// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Core.Entities.Dhr;

namespace Infrastructure.Data.Dhr
{
    public partial class FoodAssistanceDatabaseContext : DbContext
    {
        public FoodAssistanceDatabaseContext()
        {
        }

        public FoodAssistanceDatabaseContext(DbContextOptions<FoodAssistanceDatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApplicationSubmitterLogger> ApplicationSubmitterLogger { get; set; }
        public virtual DbSet<AttachmentFile> AttachmentFile { get; set; }
        public virtual DbSet<CompletedApplication> CompletedApplication { get; set; }
        public virtual DbSet<Email> Email { get; set; }
        public virtual DbSet<LexisNexis> LexisNexis { get; set; }
        public virtual DbSet<MyDhrRole> MyDhrRole { get; set; }
        public virtual DbSet<MyDhrSession> MyDhrSession { get; set; }
        public virtual DbSet<MyDhrUser> MyDhrUser { get; set; }
        public virtual DbSet<PasswordToken> PasswordToken { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=WS-SMULHALL;Initial Catalog=FoodAssistance.Database;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<ApplicationSubmitterLogger>(entity =>
            {
                entity.Property(e => e.AppSource)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.EntryDate)
                    .HasPrecision(0)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EventEntry)
                    .IsRequired()
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EventLog)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<AttachmentFile>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.AttachmentFile)
                    .HasForeignKey(d => d.EmailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AttachmentFile_Email");
            });

            modelBuilder.Entity<CompletedApplication>(entity =>
            {
                entity.HasKey(e => e.WorkflowId)
                    .HasName("PK__Complete__5704A66A1B0907CE");

                entity.Property(e => e.WorkflowId).ValueGeneratedNever();

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CompletedDate).HasColumnType("datetime");

                entity.Property(e => e.SubmittedDate).HasColumnType("datetime");

                entity.Property(e => e.WorkflowXml)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.MyDhrUser)
                    .WithMany(p => p.CompletedApplication)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompletedApplication_MyDhrUser");
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Body).IsUnicode(false);

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LexisNexis>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("PK__LexisNex__1788CC4CB1012BF9");

                entity.Property(e => e.UserId).ValueGeneratedNever();

                entity.Property(e => e.AccountAddressCity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountAddressCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountAddressState)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountAddressStreet1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountAddressStreet2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountAddressZip)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountFirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountLastName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AccountTelephone)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cvi).HasColumnName("CVI");

                entity.Property(e => e.RequestData).IsUnicode(false);

                entity.Property(e => e.ResponseData).IsUnicode(false);

                entity.Property(e => e.RiskData).IsUnicode(false);

                entity.Property(e => e.SsnRaw)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MyDhrRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MyDhrSession>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Id })
                    .HasName("PK__MyDhrSes__74A9828C03317E3D");

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CaseNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ExpireDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(dateadd(minute,(30),getdate()))");

                entity.Property(e => e.IpAddress)
                    .HasMaxLength(16)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MyDhrSession)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MyDhrSession_MyDhrUser");
            });

            modelBuilder.Entity<MyDhrUser>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Dob).HasColumnName("DOB");

                entity.Property(e => e.Email)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MyAlabamaUserName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordHash)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordLastReset).HasColumnType("datetime");

                entity.Property(e => e.SecurityAnswer1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityAnswer2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityAnswer3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityQuestion1)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityQuestion2)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityQuestion3)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ssn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SSN");

                entity.Property(e => e.Ssnhash)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SSNHash");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.HasMany(d => d.Role)
                    .WithMany(p => p.User)
                    .UsingEntity<Dictionary<string, object>>(
                        "MyDhrUserRole",
                        l => l.HasOne<MyDhrRole>().WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MyDhrUserRole_MyDhrRole"),
                        r => r.HasOne<MyDhrUser>().WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_MyDhrUserRole_MyDhrUser"),
                        j =>
                        {
                            j.HasKey("UserId", "RoleId").HasName("PK__MyDhrUse__AF2760AD0AD2A005");

                            j.ToTable("MyDhrUserRole");
                        });
            });

            modelBuilder.Entity<PasswordToken>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PasswordToken)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PasswordToken_MyDhrUser");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}