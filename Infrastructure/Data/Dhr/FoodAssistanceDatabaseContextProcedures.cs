// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Core.Entities.Dhr;

namespace Infrastructure.Data.Dhr
{
    public partial class FoodAssistanceDatabaseContext
    {
        private FoodAssistanceDatabaseContextProcedures _procedures;

        public virtual FoodAssistanceDatabaseContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new FoodAssistanceDatabaseContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public FoodAssistanceDatabaseContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class FoodAssistanceDatabaseContextProcedures
    {
        private readonly FoodAssistanceDatabaseContext _context;

        public FoodAssistanceDatabaseContextProcedures(FoodAssistanceDatabaseContext context)
        {
            _context = context;
        }

        public virtual async Task<int> EnableSRARFormAsync(string caseNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "caseNumber",
                    Size = 30,
                    Value = caseNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EnableSRARForm] @caseNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIPsWithMultipleApplicationsResult>> GetIPsWithMultipleApplicationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIPsWithMultipleApplicationsResult>("EXEC @returnValue = [dbo].[GetIPsWithMultipleApplications]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSubmittedAppsByIPAddressResult>> GetSubmittedAppsByIPAddressAsync(byte[] ipAddress, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new[]
            {
                new SqlParameter
                {
                    ParameterName = "ipAddress",
                    Size = 16,
                    Value = ipAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSubmittedAppsByIPAddressResult>("EXEC @returnValue = [dbo].[GetSubmittedAppsByIPAddress] @ipAddress", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}