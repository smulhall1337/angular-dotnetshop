// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Infrastructure.Data.Oacis
{
    public partial class MyDhrOacisContext
    {

        [DbFunction("AgeOf", "dbo")]
        public static string AgeOf(DateTime? bDate)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("BudgSum_Compute_Proration_CR", "dbo")]
        public static decimal? BudgSum_Compute_Proration_CR(int? ID_CASE_NMBR, string CD_MONTH, string EXP_TYPE, string SUB_EXP, int? BILLED_ID_IN, decimal? BILLED_AMNT_IN, int? PAID_ID_IN, decimal? PAID_AMNT_IN, int? PRVDR_ID, string EXPEDITE_FLAG)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Compute_Proration_CR", "dbo")]
        public static decimal? Compute_Proration_CR(int? ID_CASE_NMBR, string CD_MONTH, string EXP_TYPE, string SUB_EXP, int? BILLED_ID_IN, decimal? BILLED_AMNT_IN, decimal? ARRS_AMNT, int? PAID_ID_IN, decimal? PAID_AMNT_IN, decimal? CS_PAID_MNTHLY_AMNT, decimal? OTHER_CS_EXP_AMNT, int? PRVDR_ID, string EXPEDITE_FLAG)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ComputeHHExpenses", "dbo")]
        public static decimal? ComputeHHExpenses(int? ID_CASE_NMBR, int? ID_MMBR, string EXPNS_TYPE)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ExactAgeOf", "dbo")]
        public static int? ExactAgeOf(DateTime? in_DOB, DateTime? now)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Get_FirstDayOfMonth", "dbo")]
        public static DateTime? Get_FirstDayOfMonth(DateTime? pInputDate)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Get_Last_BusinessDay", "dbo")]
        public static DateTime? Get_Last_BusinessDay(DateTime? anydateofMonth)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Get_LastDayOfMonth", "dbo")]
        public static DateTime? Get_LastDayOfMonth(DateTime? pInputDate)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetbyIdMmbrAndMonth_EligibilityCode", "dbo")]
        public static string GetbyIdMmbrAndMonth_EligibilityCode(int? ID_MMBR, string CD_MONTH)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetCountMembers_EligibleAndTotal", "dbo")]
        public static int? GetCountMembers_EligibleAndTotal(int? ID_CASE_NMBR, string SQLTYPE, string CD_MONTH)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetDate_casestatus", "dbo")]
        public static DateTime? GetDate_casestatus(string pInputDate)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetDateOnly", "dbo")]
        public static DateTime? GetDateOnly(DateTime? pInputDate)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("ProperCase_Name", "dbo")]
        public static string ProperCase_Name(string input)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Split", "dbo")]
        public IQueryable<SplitResult> Split(string String, string Delimiter)
        {
            return FromExpression(() => Split(String, Delimiter));
        }

        [DbFunction("Split_sync_name", "dbo")]
        public IQueryable<Split_sync_nameResult> Split_sync_name(string NAME, DateTime? dob, string ssn, string sex, int? Race)
        {
            return FromExpression(() => Split_sync_name(NAME, dob, ssn, sex, Race));
        }

        [DbFunction("testfuncComputeHHExpenses", "dbo")]
        public IQueryable<testfuncComputeHHExpensesResult> testfuncComputeHHExpenses(int? ID_CASE_NMBR, int? ID_MMBR, string EXPNS_TYPE)
        {
            return FromExpression(() => testfuncComputeHHExpenses(ID_CASE_NMBR, ID_MMBR, EXPNS_TYPE));
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SplitResult>().HasNoKey();
            modelBuilder.Entity<Split_sync_nameResult>().HasNoKey();
            modelBuilder.Entity<testfuncComputeHHExpensesResult>().HasNoKey();
        }
    }
}
