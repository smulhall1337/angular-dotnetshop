// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Core.Entities.Oacis;

namespace Infrastructure.Data.Oacis
{
    public partial class MyDhrOacisContext
    {
        private MyDhrOacisContextProcedures _procedures;

        public virtual MyDhrOacisContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MyDhrOacisContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public MyDhrOacisContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class MyDhrOacisContextProcedures
    {
        private readonly MyDhrOacisContext _context;

        public MyDhrOacisContextProcedures(MyDhrOacisContext context)
        {
            _context = context;
        }

        public virtual async Task<List<BudgSum_Expense_Proration_CRResult>> BudgSum_Expense_Proration_CRAsync(int? ID_CASE_NMBR, string CASE_TYPE, string EXP_TYPE, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXP_TYPE",
                    Size = 1,
                    Value = EXP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<BudgSum_Expense_Proration_CRResult>("EXEC @returnValue = [dbo].[BudgSum_Expense_Proration_CR] @ID_CASE_NMBR, @CASE_TYPE, @EXP_TYPE, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_ABAWDsResult>> Chk_ABAWDsAsync(int? IDCASENMBR, string CHK_TYPE, int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CHK_TYPE",
                    Size = 6,
                    Value = CHK_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_ABAWDsResult>("EXEC @returnValue = [dbo].[Chk_ABAWDs] @IDCASENMBR, @CHK_TYPE, @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_ARCHIVE_REGISTRATIONSResult>> Chk_ARCHIVE_REGISTRATIONSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_ARCHIVE_REGISTRATIONSResult>("EXEC @returnValue = [dbo].[Chk_ARCHIVE_REGISTRATIONS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Chk_ARCHIVE_REGISTRATIONS_BY_ID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Chk_ARCHIVE_REGISTRATIONS_BY_ID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_ARCHIVE_REGISTRATIONS_BY_IDNEWCASEResult>> Chk_ARCHIVE_REGISTRATIONS_BY_IDNEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_ARCHIVE_REGISTRATIONS_BY_IDNEWCASEResult>("EXEC @returnValue = [dbo].[Chk_ARCHIVE_REGISTRATIONS_BY_IDNEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_ARCHIVE_REGISTRATIONS_BY_NOCASEResult>> Chk_ARCHIVE_REGISTRATIONS_BY_NOCASEAsync(int? ID_NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NOCASE",
                    Value = ID_NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_ARCHIVE_REGISTRATIONS_BY_NOCASEResult>("EXEC @returnValue = [dbo].[Chk_ARCHIVE_REGISTRATIONS_BY_NOCASE] @ID_NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_FOR_HLDYResult>> Chk_FOR_HLDYAsync(DateTime? DT_HLDY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DT_HLDY",
                    Value = DT_HLDY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_FOR_HLDYResult>("EXEC @returnValue = [dbo].[Chk_FOR_HLDY] @DT_HLDY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_FOR_INSRNC_PRVDRResult>> Chk_FOR_INSRNC_PRVDRAsync(int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_FOR_INSRNC_PRVDRResult>("EXEC @returnValue = [dbo].[Chk_FOR_INSRNC_PRVDR] @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_FOR_MDCL_CD_MNTHResult>> Chk_FOR_MDCL_CD_MNTHAsync(string CD_MONTH, int? ID_MMBR, int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_FOR_MDCL_CD_MNTHResult>("EXEC @returnValue = [dbo].[Chk_FOR_MDCL_CD_MNTH] @CD_MONTH, @ID_MMBR, @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_FOR_MED_PRVDRResult>> Chk_FOR_MED_PRVDRAsync(int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_FOR_MED_PRVDRResult>("EXEC @returnValue = [dbo].[Chk_FOR_MED_PRVDR] @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_INSRNC_PRVDR_CNTResult>> Chk_INSRNC_PRVDR_CNTAsync(int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_INSRNC_PRVDR_CNTResult>("EXEC @returnValue = [dbo].[Chk_INSRNC_PRVDR_CNT] @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_MED_PRVDR_CNTResult>> Chk_MED_PRVDR_CNTAsync(int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_MED_PRVDR_CNTResult>("EXEC @returnValue = [dbo].[Chk_MED_PRVDR_CNT] @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_MemCntResult>> Chk_MemCntAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_MemCntResult>("EXEC @returnValue = [dbo].[Chk_MemCnt] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_Mmbr_ABAWDsResult>> Chk_Mmbr_ABAWDsAsync(string CHK_TYPE, int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CHK_TYPE",
                    Size = 6,
                    Value = CHK_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_Mmbr_ABAWDsResult>("EXEC @returnValue = [dbo].[Chk_Mmbr_ABAWDs] @CHK_TYPE, @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<chk_OACIS_OilSpillCasesResult>> chk_OACIS_OilSpillCasesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<chk_OACIS_OilSpillCasesResult>("EXEC @returnValue = [dbo].[chk_OACIS_OilSpillCases]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Chk_StatusResult>> Chk_StatusAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Chk_StatusResult>("EXEC @returnValue = [dbo].[Chk_Status]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CORRECT_CASE_WORKFLOWAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CORRECT_CASE_WORKFLOW] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CountByIdMmbr_EMPLOYMENTAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CountByIdMmbr_EMPLOYMENT] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CreateTempTablesResult>> CreateTempTablesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CreateTempTablesResult>("EXEC @returnValue = [dbo].[CreateTempTables]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<dba_SearchCachedPlansResult>> dba_SearchCachedPlansAsync(string StringToSearchFor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StringToSearchFor",
                    Size = 255,
                    Value = StringToSearchFor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<dba_SearchCachedPlansResult>("EXEC @returnValue = [dbo].[dba_SearchCachedPlans] @StringToSearchFor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_ADDRESSAsync(int? ID_ADDRSS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_ADDRESS] @ID_ADDRSS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_Admn_MedExpAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_Admn_MedExp] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_ALIEN_STATUSAsync(int? ID_ALIEN_STATUS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ALIEN_STATUS",
                    Value = ID_ALIEN_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_ALIEN_STATUS] @ID_ALIEN_STATUS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_AR_RPRSNTTVAsync(int? ID_AR_RPRSNTTV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_AR_RPRSNTTV",
                    Value = ID_AR_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_AR_RPRSNTTV] @ID_AR_RPRSNTTV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_ARREARS_CSAsync(int? ID_ARRRS_CS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ARRRS_CS",
                    Value = ID_ARRRS_CS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_ARREARS_CS] @ID_ARRRS_CS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_aspnet_ApplicationsResult>> Del_aspnet_ApplicationsAsync(Guid? ApplicationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_aspnet_ApplicationsResult>("EXEC @returnValue = [dbo].[Del_aspnet_Applications] @ApplicationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_aspnet_MembershipResult>> Del_aspnet_MembershipAsync(Guid? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_aspnet_MembershipResult>("EXEC @returnValue = [dbo].[Del_aspnet_Membership] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_aspnet_SchemaVersionsResult>> Del_aspnet_SchemaVersionsAsync(string Feature, string CompatibleSchemaVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Feature",
                    Size = 256,
                    Value = Feature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompatibleSchemaVersion",
                    Size = 256,
                    Value = CompatibleSchemaVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_aspnet_SchemaVersionsResult>("EXEC @returnValue = [dbo].[Del_aspnet_SchemaVersions] @Feature, @CompatibleSchemaVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_aspnet_UsersResult>> Del_aspnet_UsersAsync(Guid? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_aspnet_UsersResult>("EXEC @returnValue = [dbo].[Del_aspnet_Users] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CASE_ALLDATAAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CASE_ALLDATA] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CASE_NOTESAsync(int? ID_CASE_NOTE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NOTE",
                    Value = ID_CASE_NOTE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CASE_NOTES] @ID_CASE_NOTE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CASE_STATUSAsync(int? ID_CASE_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_STTS",
                    Value = ID_CASE_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CASE_STATUS] @ID_CASE_STTS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CaseWorkflowAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CaseWorkflow] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_CERT_ELIGResult>> Del_CERT_ELIGAsync(decimal? ID_CERT_ELGBLTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CERT_ELGBLTY",
                    Precision = 2,
                    Value = ID_CERT_ELGBLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_CERT_ELIGResult>("EXEC @returnValue = [dbo].[Del_CERT_ELIG] @ID_CERT_ELGBLTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_COURT_ORDERD_AMOUNTAsync(int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_COURT_ORDERD_AMOUNT] @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_COVERED_ITEMSAsync(int? ID_CVRD_ITEMS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CVRD_ITEMS",
                    Value = ID_CVRD_ITEMS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_COVERED_ITEMS] @ID_CVRD_ITEMS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CS_AMOUNTAsync(int? ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CS_AMOUNT] @ID_CS_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CS_DPNDNTSAsync(int? ID_CS_DPNDNTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_DPNDNTS",
                    Value = ID_CS_DPNDNTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CS_DPNDNTS] @ID_CS_DPNDNTS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CS_PAYER_RECIPIENTAsync(int? ID_CS_PAYER_RCPNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_PAYER_RCPNT",
                    Value = ID_CS_PAYER_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CS_PAYER_RECIPIENT] @ID_CS_PAYER_RCPNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_CS_PAYMENTSAsync(int? ID_CS_PYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_PYMNT",
                    Value = ID_CS_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_CS_PAYMENTS] @ID_CS_PYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_DENIALResult>> Del_DENIALAsync(int? ID_DENIAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL",
                    Value = ID_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_DENIALResult>("EXEC @returnValue = [dbo].[Del_DENIAL] @ID_DENIAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_DEPENDENTAsync(int? ID_DPNDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_DEPENDENT] @ID_DPNDNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_DEPENDENT_CAREAsync(int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_DEPENDENT_CARE] @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_DEPENDENT_CARE_OTHER_PAYERAsync(int? ID_DC_OTHR_PAY, int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_DEPENDENT_CARE_OTHER_PAYER] @ID_DC_OTHR_PAY, @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_DISASTERAsync(int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_DISASTER] @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_DISASTER_COUNTIESAsync(int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_DISASTER_COUNTIES] @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_DPNDNT_CARE_EXP_AND_CHILD_RECORDSAsync(int? ID_DC_OTHR_PAY, int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_DPNDNT_CARE_EXP_AND_CHILD_RECORDS] @ID_DC_OTHR_PAY, @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_EMPLOYMENTAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_EMPLOYMENT] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_EMPLOYMENT_EarnedAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_EMPLOYMENT_Earned] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_EMPLOYMENT_RBAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_EMPLOYMENT_RB] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_FA_STATUSAsync(int? ID_FA_STTS, int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_STTS",
                    Value = ID_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_FA_STATUS] @ID_FA_STTS, @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_INSURANCEAsync(int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_INSURANCE] @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_INSURANCE_OTHER_PAYERAsync(short? ID_INSRNC_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC_OTHR_PAYER",
                    Value = ID_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_INSURANCE_OTHER_PAYER] @ID_INSRNC_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_ISSUANCEAsync(string ISS_CASENO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ISS_CASENO",
                    Size = 9,
                    Value = ISS_CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_ISSUANCE] @ISS_CASENO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_LOGINAsync(string ID_FA_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_SSN",
                    Size = 9,
                    Value = ID_FA_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_LOGIN] @ID_FA_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MDCL_INSRNC_CHILD_RECORDSAsync(int? ID_INSRNC, int? ID_PRVDR_NAME, int? ID_INSRNC_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC_OTHR_PAYER",
                    Value = ID_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MDCL_INSRNC_CHILD_RECORDS] @ID_INSRNC, @ID_PRVDR_NAME, @ID_INSRNC_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEALAsync(int? ID_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL",
                    Value = ID_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEAL] @ID_MEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MED_EXP_AND_CHILD_RECORDS_TRIPSAsync(int? ID_MDCL_EXPNS, int? ID_PRVDR_NAME, int? ID_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MED_EXP_AND_CHILD_RECORDS_TRIPS] @ID_MDCL_EXPNS, @ID_PRVDR_NAME, @ID_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEDICAL_EXPENSEAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEDICAL_EXPENSE] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEDICAL_EXPENSE_AND_CHILD_RECORDSAsync(int? ID_MDCL_EXPNS, int? ID_PRVDR_NAME, int? ID_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEDICAL_EXPENSE_AND_CHILD_RECORDS] @ID_MDCL_EXPNS, @ID_PRVDR_NAME, @ID_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEDICAL_EXPENSE_OTHER_PAYERAsync(short? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEDICAL_EXPENSE_OTHER_PAYER] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEDICAL_NOTESAsync(int? ID_MDCL_EXPNS, int? ID_REF_MDCL_NOTE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_MDCL_NOTE_TYPE",
                    Value = ID_REF_MDCL_NOTE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEDICAL_NOTES] @ID_MDCL_EXPNS, @ID_REF_MDCL_NOTE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEDL_EXP_APPLNC_AND_CHILD_RECORDSAsync(int? ID_MDCL_EXPNS, int? ID_PRVDR_NAME, int? ID_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEDL_EXP_APPLNC_AND_CHILD_RECORDS] @ID_MDCL_EXPNS, @ID_PRVDR_NAME, @ID_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEDL_EXP_ONGOINGAsync(int? ID_ME_ONGOING, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ME_ONGOING",
                    Value = ID_ME_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEDL_EXP_ONGOING] @ID_ME_ONGOING", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEM_N_TAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEM_N_T]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEM_N_T_AwardDenyAsync(int? ID_CASE_NMBR, string ALLOT_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ALLOT_TYPE",
                    Size = 1,
                    Value = ALLOT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEM_N_T_AwardDeny] @ID_CASE_NMBR, @ALLOT_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEM_N_T_ByMemberIDAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEM_N_T_ByMemberID] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEM_N_T_EOMAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEM_N_T_EOM]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEMBERAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEMBER] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEMBER_ONLYAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEMBER_ONLY] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MEMBER_TRNSFR_RSRCAsync(int? ID_MMBR_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR_RSRC",
                    Value = ID_MMBR_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MEMBER_TRNSFR_RSRC] @ID_MMBR_RSRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_MmbrOnlyAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_MmbrOnly] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_NC_MEDICAL_EXPENSE_AND_CHILD_RECORDSAsync(int? ID_MDCL_EXPNS, int? ID_PRVDR_NAME, int? ID_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_NC_MEDICAL_EXPENSE_AND_CHILD_RECORDS] @ID_MDCL_EXPNS, @ID_PRVDR_NAME, @ID_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_OACIS_CASE_BEING_WORKEDAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_OACIS_CASE_BEING_WORKED] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_OACIS_CASE_BEING_WORKEDBYIDAsync(string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_OACIS_CASE_BEING_WORKEDBYID] @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_PIV_COURT_ORDERAsync(int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_PIV_COURT_ORDER] @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_PIV_CS_PAYER_RCPNTResult>> Del_PIV_CS_PAYER_RCPNTAsync(int? ID_PAYER, int? ID_RCPNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAYER",
                    Value = ID_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RCPNT",
                    Value = ID_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_PIV_CS_PAYER_RCPNTResult>("EXEC @returnValue = [dbo].[Del_PIV_CS_PAYER_RCPNT] @ID_PAYER, @ID_RCPNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_PIV_MMBR_INSRNCAsync(int? ID_MMBR, int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_PIV_MMBR_INSRNC] @ID_MMBR, @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_PIV_MMBR_RLTNAsync(decimal? ID_RLTN, int? ID_MMBR1, int? ID_MMBR2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_PIV_MMBR_RLTN] @ID_RLTN, @ID_MMBR1, @ID_MMBR2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_PIV_PRVDR_DCResult>> Del_PIV_PRVDR_DCAsync(int? ID_PRVDR_NAME, int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_PIV_PRVDR_DCResult>("EXEC @returnValue = [dbo].[Del_PIV_PRVDR_DC] @ID_PRVDR_NAME, @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_PIV_PRVDR_INSRNCResult>> Del_PIV_PRVDR_INSRNCAsync(int? ID_PRVDR_NAME, int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_PIV_PRVDR_INSRNCResult>("EXEC @returnValue = [dbo].[Del_PIV_PRVDR_INSRNC] @ID_PRVDR_NAME, @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_PIV_RMED_MEDEXResult>> Del_PIV_RMED_MEDEXAsync(int? ID_MDCTN, int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCTN",
                    Value = ID_MDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_PIV_RMED_MEDEXResult>("EXEC @returnValue = [dbo].[Del_PIV_RMED_MEDEX] @ID_MDCTN, @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_PIV_RPRVDR_RAPPLIANCE_TYPEResult>> Del_PIV_RPRVDR_RAPPLIANCE_TYPEAsync(int? ID_PRVDR_NAME, short? ID_APPLNC_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_APPLNC_TYPE",
                    Value = ID_APPLNC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_PIV_RPRVDR_RAPPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[Del_PIV_RPRVDR_RAPPLIANCE_TYPE] @ID_PRVDR_NAME, @ID_APPLNC_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_PRVDR_NAME_AND_ADDRSSAsync(int? ID_ADDRSS, int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_PRVDR_NAME_AND_ADDRSS] @ID_ADDRSS, @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_RB_MEALResult>> Del_RB_MEALAsync(int? ID_RB_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL",
                    Value = ID_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_RB_MEALResult>("EXEC @returnValue = [dbo].[Del_RB_MEAL] @ID_RB_MEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_RB_MEAL_OTHERResult>> Del_RB_MEAL_OTHERAsync(short? ID_RB_MEAL_OTHER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL_OTHER",
                    Value = ID_RB_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_RB_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[Del_RB_MEAL_OTHER] @ID_RB_MEAL_OTHER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_ADDRESS_TYPEAsync(decimal? ID_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_ADDRESS_TYPE] @ID_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_ALLAsync(short? ID_WORK_CODE, short? ID_REF_WAIVE_ADVRS_ACTN, short? ID_RACE_CODE, short? ID_INSTRCTN, decimal? ID_REF_CERT_ELIG, string CD_RJCTN_CLSR, decimal? ID_RSTRTN_RSN, short? ID_VRFCTN_DETAIL, short? ID_REF_NTC_TYPE, short? ID_CNTY_STATE, string INPUT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_WAIVE_ADVRS_ACTN",
                    Value = ID_REF_WAIVE_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSTRCTN",
                    Value = ID_INSTRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Precision = 2,
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN_RSN",
                    Precision = 2,
                    Value = ID_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DETAIL",
                    Value = ID_VRFCTN_DETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_NTC_TYPE",
                    Value = ID_REF_NTC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "INPUT",
                    Size = 3,
                    Value = INPUT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_ALL] @ID_WORK_CODE, @ID_REF_WAIVE_ADVRS_ACTN, @ID_RACE_CODE, @ID_INSTRCTN, @ID_REF_CERT_ELIG, @CD_RJCTN_CLSR, @ID_RSTRTN_RSN, @ID_VRFCTN_DETAIL, @ID_REF_NTC_TYPE, @ID_CNTY_STATE, @INPUT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_APPLIANCE_TYPEResult>> Del_REF_APPLIANCE_TYPEAsync(short? ID_APPLNC_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_APPLNC_TYPE",
                    Value = ID_APPLNC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_APPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[Del_REF_APPLIANCE_TYPE] @ID_APPLNC_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_CASE_CTGRYAsync(short? ID_CASE_CTGRY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_CASE_CTGRY] @ID_CASE_CTGRY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_CASE_STATUSResult>> Del_REF_CASE_STATUSAsync(decimal? ID_REF_CASE_STATUS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS",
                    Precision = 1,
                    Value = ID_REF_CASE_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_CASE_STATUSResult>("EXEC @returnValue = [dbo].[Del_REF_CASE_STATUS] @ID_REF_CASE_STATUS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_CASE_STATUS_TYPEAsync(decimal? ID_REF_CASE_STATUS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS_TYPE",
                    Precision = 1,
                    Value = ID_REF_CASE_STATUS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_CASE_STATUS_TYPE] @ID_REF_CASE_STATUS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_CASE_SUB_CTGRYResult>> Del_REF_CASE_SUB_CTGRYAsync(short? ID_CASE_SUB_CTGRY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_SUB_CTGRY",
                    Value = ID_CASE_SUB_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_CASE_SUB_CTGRYResult>("EXEC @returnValue = [dbo].[Del_REF_CASE_SUB_CTGRY] @ID_CASE_SUB_CTGRY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_CERT_ELIGAsync(decimal? ID_REF_CERT_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Precision = 2,
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_CERT_ELIG] @ID_REF_CERT_ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_COUNTY_STATEAsync(short? ID_CNTY_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_COUNTY_STATE] @ID_CNTY_STATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_COURT_ORDERED_TYPEAsync(decimal? ID_CRT_ORDRD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD",
                    Precision = 1,
                    Value = ID_CRT_ORDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_COURT_ORDERED_TYPE] @ID_CRT_ORDRD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_DENIAL_CODESResult>> Del_REF_DENIAL_CODESAsync(decimal? ID_DENIAL_CODES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL_CODES",
                    Precision = 2,
                    Value = ID_DENIAL_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_DENIAL_CODESResult>("EXEC @returnValue = [dbo].[Del_REF_DENIAL_CODES] @ID_DENIAL_CODES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_DEPENDENT_CARE_LIMITAsync(decimal? ID_DPNDNT_CARE_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE_LIMIT",
                    Precision = 1,
                    Value = ID_DPNDNT_CARE_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_DEPENDENT_CARE_LIMIT] @ID_DPNDNT_CARE_LIMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_DHR_EMPLOYEEAsync(string ID_SSN_DHREMP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_DHREMP",
                    Size = 9,
                    Value = ID_SSN_DHREMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_DHR_EMPLOYEE] @ID_SSN_DHREMP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_EARNED_INCOME_TYPEAsync(decimal? ID_INCM_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Precision = 2,
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_EARNED_INCOME_TYPE] @ID_INCM_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_EBT_CHCKAsync(string ID_SSN_EBT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_EBT",
                    Size = 9,
                    Value = ID_SSN_EBT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_EBT_CHCK] @ID_SSN_EBT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_FA_STATUSResult>> Del_REF_FA_STATUSAsync(short? ID_REF_FA_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_FA_STTS",
                    Value = ID_REF_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_FA_STATUSResult>("EXEC @returnValue = [dbo].[Del_REF_FA_STATUS] @ID_REF_FA_STTS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_FREQUENCYAsync(decimal? ID_FRQNCY_REF, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_REF",
                    Precision = 2,
                    Value = ID_FRQNCY_REF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_FREQUENCY] @ID_FRQNCY_REF", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_HLDYAsync(int? ID_HLDY_DATES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_HLDY_DATES",
                    Value = ID_HLDY_DATES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_HLDY] @ID_HLDY_DATES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_IEVS_TRAKAsync(string ID_SSN_IEVS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_IEVS",
                    Size = 9,
                    Value = ID_SSN_IEVS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_IEVS_TRAK] @ID_SSN_IEVS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_INACTIVE_SCIIIAsync(string ID_SSN, decimal? CD_CNTY_SCIII, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN",
                    Size = 9,
                    Value = ID_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_SCIII",
                    Precision = 3,
                    Value = CD_CNTY_SCIII ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_INACTIVE_SCIII] @ID_SSN, @CD_CNTY_SCIII", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_INCOME_LIMITAsync(decimal? ID_REF_INCM_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_INCM_LIMIT",
                    Precision = 2,
                    Value = ID_REF_INCM_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_INCOME_LIMIT] @ID_REF_INCM_LIMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_INSRNC_PAYERAsync(decimal? ID_INSRNC_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC_PAYER",
                    Precision = 1,
                    Value = ID_INSRNC_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_INSRNC_PAYER] @ID_INSRNC_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_INSTRUCTIONSAsync(short? ID_INSTRCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSTRCTN",
                    Value = ID_INSTRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_INSTRUCTIONS] @ID_INSTRCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_MEDICAL_LIMITAsync(decimal? ID_MDCL_LMT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_LMT",
                    Precision = 1,
                    Value = ID_MDCL_LMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_MEDICAL_LIMIT] @ID_MDCL_LMT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_MEDICAL_NOTE_TYPEAsync(decimal? ID_REF_MDCL_NOTE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_MDCL_NOTE_TYPE",
                    Precision = 2,
                    Value = ID_REF_MDCL_NOTE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_MEDICAL_NOTE_TYPE] @ID_REF_MDCL_NOTE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_MEDICATIONResult>> Del_REF_MEDICATIONAsync(int? ID_MDCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCTN",
                    Value = ID_MDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_MEDICATIONResult>("EXEC @returnValue = [dbo].[Del_REF_MEDICATION] @ID_MDCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_MESSAGEAsync(short? ID_MESSAGES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MESSAGES",
                    Value = ID_MESSAGES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_MESSAGE] @ID_MESSAGES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_OBLIGATION_REASONAsync(int? ID_OBLGTN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_OBLGTN_RSN",
                    Value = ID_OBLGTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_OBLIGATION_REASON] @ID_OBLGTN_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PAST_DUE_RSNAsync(string CD_PAST_DUE_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PAST_DUE_RSN] @CD_PAST_DUE_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PAY_DATESAsync(int? ID_PAY_DATES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAY_DATES",
                    Value = ID_PAY_DATES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PAY_DATES] @ID_PAY_DATES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PAY_DATES_ByEmploymentAsync(int? IDEMPLOYMENT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDEMPLOYMENT",
                    Value = IDEMPLOYMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PAY_DATES_ByEmployment] @IDEMPLOYMENT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PAY_DATES_ByUnerndIncmAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PAY_DATES_ByUnerndIncm] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PAY_DATES_EmploymentOnlyAsync(int? IDEMPLOYMENT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDEMPLOYMENT",
                    Value = IDEMPLOYMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PAY_DATES_EmploymentOnly] @IDEMPLOYMENT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PAY_TYPEAsync(int? ID_PAY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAY_TYPE",
                    Value = ID_PAY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PAY_TYPE] @ID_PAY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PROVIDER_NAMEAsync(int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PROVIDER_NAME] @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_PROVIDER_TYPEAsync(decimal? ID_PRVDR_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_PROVIDER_TYPE] @ID_PRVDR_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_RACEAsync(short? ID_RACE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_RACE] @ID_RACE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_RB_MEALResult>> Del_REF_RB_MEALAsync(short? ID_REF_RB_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_RB_MEAL",
                    Value = ID_REF_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_RB_MEALResult>("EXEC @returnValue = [dbo].[Del_REF_RB_MEAL] @ID_REF_RB_MEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_REJ_CLO_CODEResult>> Del_REF_REJ_CLO_CODEAsync(decimal? ID_RJCTN_CLSR_CODES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR_CODES",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_REJ_CLO_CODEResult>("EXEC @returnValue = [dbo].[Del_REF_REJ_CLO_CODE] @ID_RJCTN_CLSR_CODES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_RELATIONAsync(decimal? ID_RLTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_RELATION] @ID_RLTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_RESOURCE_LIMITAsync(short? ID_RSRC_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_LIMIT",
                    Value = ID_RSRC_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_RESOURCE_LIMIT] @ID_RSRC_LIMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_RESOURCE_TYPEAsync(int? ID_RSRC_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_RESOURCE_TYPE] @ID_RSRC_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_RESTORATION_REASON_TYPEAsync(decimal? ID_RSTRTN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN_RSN",
                    Precision = 2,
                    Value = ID_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_RESTORATION_REASON_TYPE] @ID_RSTRTN_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_SANCTION_REASONAsync(decimal? ID_REF_SNCTN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_SNCTN_RSN",
                    Precision = 2,
                    Value = ID_REF_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_SANCTION_REASON] @ID_REF_SNCTN_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_SECURITYAsync(int? ID_SCRTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SCRTY",
                    Value = ID_SCRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_SECURITY] @ID_SCRTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_SHELTER_DWELLING_TYPEAsync(short? ID_SHLTR_DWELLNG_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_SHELTER_DWELLING_TYPE] @ID_SHLTR_DWELLNG_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_SHELTER_EXPENSE_TYPEAsync(short? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_SHELTER_EXPENSE_TYPE] @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_SHELTER_OWNERSHIPAsync(short? ID_OWNRSHP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_SHELTER_OWNERSHIP] @ID_OWNRSHP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_STATEAsync(string ID_REF_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_STATE",
                    Size = 2,
                    Value = ID_REF_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_STATE] @ID_REF_STATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_TFP_LIMITAsync(short? ID_REF_TFP_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_TFP_LIMIT",
                    Value = ID_REF_TFP_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_TFP_LIMIT] @ID_REF_TFP_LIMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REF_TRNSFR_RSRC_CODEResult>> Del_REF_TRNSFR_RSRC_CODEAsync(short? ID_TRNSFR_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_TRNSFR_CODE",
                    Value = ID_TRNSFR_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REF_TRNSFR_RSRC_CODEResult>("EXEC @returnValue = [dbo].[Del_REF_TRNSFR_RSRC_CODE] @ID_TRNSFR_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_UNEARNED_TYPEAsync(short? ID_UNERND_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_TYPE",
                    Value = ID_UNERND_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_UNEARNED_TYPE] @ID_UNERND_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_UTILITY_TYPEAsync(int? ID_UTLTY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_UTILITY_TYPE] @ID_UTLTY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_VERIFICATION_DETAILAsync(decimal? ID_VRFCTN_DETAIL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DETAIL",
                    Precision = 2,
                    Value = ID_VRFCTN_DETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_VERIFICATION_DETAIL] @ID_VRFCTN_DETAIL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_VERIFICATION_SUBTYPEAsync(decimal? ID_REF_VRFCTN_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_SUBTYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_VERIFICATION_SUBTYPE] @ID_REF_VRFCTN_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_VERIFICATION_TYPEAsync(decimal? ID_REF_VRFCTN_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_TYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_VERIFICATION_TYPE] @ID_REF_VRFCTN_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_WELCOME_MESSAGEAsync(short? ID_WLCM_MSSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WLCM_MSSG",
                    Value = ID_WLCM_MSSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_WELCOME_MESSAGE] @ID_WLCM_MSSG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REF_WORK_REG_CODEAsync(short? ID_WORK_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REF_WORK_REG_CODE] @ID_WORK_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REG_CASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REG_CASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REG_CASEMBRAsync(int? ID_NEWMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REG_CASEMBR] @ID_NEWMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REG_NOMEMBERSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REG_NOMEMBERS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> del_REGISTER_APPLICATIONAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[del_REGISTER_APPLICATION] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REGISTER_APPLICATION_ALLAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REGISTER_APPLICATION_ALL] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REGISTER_APPLICATION_ALL_BY_IDNEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REGISTER_APPLICATION_ALL_BY_IDNEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REGISTER_APPLICATION_ALL_MEMBERSAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REGISTER_APPLICATION_ALL_MEMBERS] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DEL_REGISTER_DONOTAPPLY_DUPLICATESAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DEL_REGISTER_DONOTAPPLY_DUPLICATES]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> del_REGISTER_MEMBERSAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[del_REGISTER_MEMBERS] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Del_REJ_CLOResult>> Del_REJ_CLOAsync(decimal? ID_RJCTN_CLSR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Del_REJ_CLOResult>("EXEC @returnValue = [dbo].[Del_REJ_CLO] @ID_RJCTN_CLSR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_REPORTINGAsync(int? ID_RPRTNG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RPRTNG",
                    Value = ID_RPRTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_REPORTING] @ID_RPRTNG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_RESOURCEAsync(short? ID_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC",
                    Value = ID_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_RESOURCE] @ID_RSRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_RESTORATIONAsync(short? ID_RSTRTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN",
                    Value = ID_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_RESTORATION] @ID_RSTRTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_ROOMAsync(int? ID_ROOM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ROOM",
                    Value = ID_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_ROOM] @ID_ROOM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_SANCTIONAsync(int? ID_SNCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SNCTN",
                    Value = ID_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_SANCTION] @ID_SNCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_SCI2_MMBR_DATAAsync(int? ID_SCI2_CASE_DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SCI2_CASE_DATA",
                    Value = ID_SCI2_CASE_DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_SCI2_MMBR_DATA] @ID_SCI2_CASE_DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_SECURITYAsync(string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_SECURITY] @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_SHELTER_EXPENSEAsync(int? ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_SHELTER_EXPENSE] @ID_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_SHELTER_EXPENSE_OTHER_PAYERAsync(short? ID_SHLTR_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_SHELTER_EXPENSE_OTHER_PAYER] @ID_SHLTR_EXPNS_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_SHLTR_EXP_AND_CHILD_RECORDSAsync(int? ID_SHLTR_EXPNS_OTHR_PAYER, int? ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_SHLTR_EXP_AND_CHILD_RECORDS] @ID_SHLTR_EXPNS_OTHR_PAYER, @ID_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_SHLTR_EXPENSE_OTHER_PAYERAsync(short? ID_SHLTR_EXPNS_OTHR_PAYER, int? ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_SHLTR_EXPENSE_OTHER_PAYER] @ID_SHLTR_EXPNS_OTHR_PAYER, @ID_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_STRIKEAsync(int? ID_STRKR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STRKR",
                    Value = ID_STRKR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_STRIKE] @ID_STRKR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_STUDENTAsync(int? ID_STDNT, int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STDNT",
                    Value = ID_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_STUDENT] @ID_STDNT, @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_TANF_MMBR_INCLUDEDAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_TANF_MMBR_INCLUDED] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_TRIPAsync(int? ID_TRIPS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_TRIPS",
                    Value = ID_TRIPS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_TRIP] @ID_TRIPS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UNEARNED_INCOMEAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UNEARNED_INCOME] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UNEARNED_INCOME_PenaltyIncAsync(int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UNEARNED_INCOME_PenaltyInc] @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UNEARNED_PAYERAsync(int? ID_UNERND_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_PAYER",
                    Value = ID_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UNEARNED_PAYER] @ID_UNERND_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UNEARNED_PAYER_byIdUnerndIncmAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UNEARNED_PAYER_byIdUnerndIncm] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UNEARNINC_DPNDNTCARE_EXPAsync(int? ID_DC_OTHR_PAY, int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UNEARNINC_DPNDNTCARE_EXP] @ID_DC_OTHR_PAY, @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UNEARNINC_SHLTR_EXPAsync(int? ID_SHLTR_EXPNS_OTHR_PAYER, int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UNEARNINC_SHLTR_EXP] @ID_SHLTR_EXPNS_OTHR_PAYER, @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UNEARNINC_UTLTY_EXPAsync(int? ID_UTLTY_EXPNS_OTHR_PAYER, int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UNEARNINC_UTLTY_EXP] @ID_UTLTY_EXPNS_OTHR_PAYER, @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UPDATE_NOTICE_TYPEAsync(int? ID_UPDT_NTC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UPDT_NTC",
                    Value = ID_UPDT_NTC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UPDATE_NOTICE_TYPE] @ID_UPDT_NTC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UTILITY_EXPENSEAsync(int? ID_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UTILITY_EXPENSE] @ID_UTLTY_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UTILITY_EXPENSE_OTHER_PAYERAsync(short? ID_UTLTY_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UTILITY_EXPENSE_OTHER_PAYER] @ID_UTLTY_EXPNS_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_UTLTY_EXP_AND_CHILD_RECORDSAsync(int? ID_UTLTY_EXPNS_OTHR_PAYER, int? ID_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_UTLTY_EXP_AND_CHILD_RECORDS] @ID_UTLTY_EXPNS_OTHR_PAYER, @ID_UTLTY_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_WAIVE_ADVERSE_ACTIONAsync(int? ID_WAIVE_ADVRS_ACTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WAIVE_ADVRS_ACTN",
                    Value = ID_WAIVE_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_WAIVE_ADVERSE_ACTION] @ID_WAIVE_ADVRS_ACTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_WELCOME_MESSAGEAsync(short? ID_WLCM_MSSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WLCM_MSSG",
                    Value = ID_WLCM_MSSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_WELCOME_MESSAGE] @ID_WLCM_MSSG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del_WORKER_REMINDERAsync(int? ID_WRKR_RMNDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_RMNDR",
                    Value = ID_WRKR_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del_WORKER_REMINDER] @ID_WRKR_RMNDR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Del2_PIV_COURT_ORDERAsync(int? ID_CRT_ORDRD_AMNT, int? ID_DPNDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Del2_PIV_COURT_ORDER] @ID_CRT_ORDRD_AMNT, @ID_DPNDNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIdCaseNmbr_MEAL_OTHERAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIdCaseNmbr_MEAL_OTHER] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIdCaseNmbr_RESTORATIONAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIdCaseNmbr_RESTORATION] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIdCrtOrdrdAmnt_ARREARS_CSAsync(int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIdCrtOrdrdAmnt_ARREARS_CS] @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIdCsAmnt_CS_DPNDNTSAsync(int? ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIdCsAmnt_CS_DPNDNTS] @ID_CS_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIdCsAmnt_CS_PAYMENTSAsync(int? ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIdCsAmnt_CS_PAYMENTS] @ID_CS_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIdEmplymnt_ADDRESSAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIdEmplymnt_ADDRESS] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIDMmbr_EmploymentAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIDMmbr_Employment] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIDMmbr_MEALAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIDMmbr_MEAL] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByIDMmbr_ROOMAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByIDMmbr_ROOM] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DelByPrimaryKey_MEAL_OTHERAsync(short? ID_MEAL_OTHER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL_OTHER",
                    Value = ID_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DelByPrimaryKey_MEAL_OTHER] @ID_MEAL_OTHER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DeleteExpiredSessionsResult>> DeleteExpiredSessionsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DeleteExpiredSessionsResult>("EXEC @returnValue = [dbo].[DeleteExpiredSessions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EXE_COLA_AUDIT_HISTORY_PROCESSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EXE_COLA_AUDIT_HISTORY_PROCESS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EXE_DAILY_STATUSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EXE_DAILY_STATUS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EXE_DAILY_STATUS_DSNAPAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EXE_DAILY_STATUS_DSNAP]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EXE_Del_MEM_N_T_EOMAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EXE_Del_MEM_N_T_EOM]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EXE_DEL_MMBR_EOMAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EXE_DEL_MMBR_EOM]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EXE_SYNC_DAILY_PROCESSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EXE_SYNC_DAILY_PROCESS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> EXECUTE_Del_MEM_N_T_EOMAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[EXECUTE_Del_MEM_N_T_EOM]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Expense_Proration_CRResult>> Expense_Proration_CRAsync(int? ID_CASE_NMBR, string CASE_TYPE, string EXP_TYPE, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXP_TYPE",
                    Size = 1,
                    Value = EXP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Expense_Proration_CRResult>("EXEC @returnValue = [dbo].[Expense_Proration_CR] @ID_CASE_NMBR, @CASE_TYPE, @EXP_TYPE, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_A_DEPENDENTResult>> Get_A_DEPENDENTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_A_DEPENDENTResult>("EXEC @returnValue = [dbo].[Get_A_DEPENDENT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ACTIVE_DISASTERSResult>> Get_ACTIVE_DISASTERSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ACTIVE_DISASTERSResult>("EXEC @returnValue = [dbo].[Get_ACTIVE_DISASTERS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ADDI_InfoResult>> Get_ADDI_InfoAsync(int? CASENO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASENO",
                    Value = CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ADDI_InfoResult>("EXEC @returnValue = [dbo].[Get_ADDI_Info] @CASENO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ADDRESSResult>> Get_ADDRESSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ADDRESSResult>("EXEC @returnValue = [dbo].[Get_ADDRESS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ADDRESS_HOH_BY_CASENOResult>> Get_ADDRESS_HOH_BY_CASENOAsync(int? CASENO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASENO",
                    Value = CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ADDRESS_HOH_BY_CASENOResult>("EXEC @returnValue = [dbo].[Get_ADDRESS_HOH_BY_CASENO] @CASENO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Admin_all_MedExpResult>> Get_Admin_all_MedExpAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Admin_all_MedExpResult>("EXEC @returnValue = [dbo].[Get_Admin_all_MedExp] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ALIEN_STATUSResult>> Get_ALIEN_STATUSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ALIEN_STATUSResult>("EXEC @returnValue = [dbo].[Get_ALIEN_STATUS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ALL_VRFCTNS_CRYSTLRPTResult>> Get_ALL_VRFCTNS_CRYSTLRPTAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ALL_VRFCTNS_CRYSTLRPTResult>("EXEC @returnValue = [dbo].[Get_ALL_VRFCTNS_CRYSTLRPT] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_APP_STATUSResult>> GET_APP_STATUSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_APP_STATUSResult>("EXEC @returnValue = [dbo].[GET_APP_STATUS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ApplicationsFromInternet_ByDateRangeResult>> Get_ApplicationsFromInternet_ByDateRangeAsync(DateTime? dtStartDate, DateTime? dtEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ApplicationsFromInternet_ByDateRangeResult>("EXEC @returnValue = [dbo].[Get_ApplicationsFromInternet_ByDateRange] @dtStartDate, @dtEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ApplicationsFromInternet_ByDateRangeTYPESResult>> Get_ApplicationsFromInternet_ByDateRangeTYPESAsync(DateTime? dtStartDate, DateTime? dtEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ApplicationsFromInternet_ByDateRangeTYPESResult>("EXEC @returnValue = [dbo].[Get_ApplicationsFromInternet_ByDateRange -TYPES] @dtStartDate, @dtEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ApplicationsFromInternet_ByDateRangeCtyResult>> Get_ApplicationsFromInternet_ByDateRangeCtyAsync(DateTime? dtStartDate, DateTime? dtEndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ApplicationsFromInternet_ByDateRangeCtyResult>("EXEC @returnValue = [dbo].[Get_ApplicationsFromInternet_ByDateRangeCty] @dtStartDate, @dtEndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_AR_RPRSNTTVResult>> Get_AR_RPRSNTTVAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_AR_RPRSNTTVResult>("EXEC @returnValue = [dbo].[Get_AR_RPRSNTTV]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ARREARS_CSResult>> Get_ARREARS_CSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ARREARS_CSResult>("EXEC @returnValue = [dbo].[Get_ARREARS_CS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_aspnet_ApplicationsResult>> Get_aspnet_ApplicationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_aspnet_ApplicationsResult>("EXEC @returnValue = [dbo].[Get_aspnet_Applications]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_aspnet_MembershipResult>> Get_aspnet_MembershipAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_aspnet_MembershipResult>("EXEC @returnValue = [dbo].[Get_aspnet_Membership]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_aspnet_SchemaVersionsResult>> Get_aspnet_SchemaVersionsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_aspnet_SchemaVersionsResult>("EXEC @returnValue = [dbo].[Get_aspnet_SchemaVersions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_aspnet_UsersResult>> Get_aspnet_UsersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_aspnet_UsersResult>("EXEC @returnValue = [dbo].[Get_aspnet_Users]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_AU_FORMS_OACISResult>> Get_AU_FORMS_OACISAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_AU_FORMS_OACISResult>("EXEC @returnValue = [dbo].[Get_AU_FORMS_OACIS] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_AU_FORMS_OACIS_bytypeResult>> Get_AU_FORMS_OACIS_bytypeAsync(string NO_CASE, string CD_FORM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FORM",
                    Size = 8,
                    Value = CD_FORM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_AU_FORMS_OACIS_bytypeResult>("EXEC @returnValue = [dbo].[Get_AU_FORMS_OACIS_bytype] @NO_CASE, @CD_FORM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_AU_SemiAnnual_By_NoCaseResult>> Get_AU_SemiAnnual_By_NoCaseAsync(decimal? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_AU_SemiAnnual_By_NoCaseResult>("EXEC @returnValue = [dbo].[Get_AU_SemiAnnual_By_NoCase] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_AU_VOTER_POPUPResult>> Get_AU_VOTER_POPUPAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_AU_VOTER_POPUPResult>("EXEC @returnValue = [dbo].[Get_AU_VOTER_POPUP]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Audit_Case_ActionResult>> Get_Audit_Case_ActionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Audit_Case_ActionResult>("EXEC @returnValue = [dbo].[Get_Audit_Case_Action]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Audit_Case_Action_By_CaseResult>> Get_Audit_Case_Action_By_CaseAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Audit_Case_Action_By_CaseResult>("EXEC @returnValue = [dbo].[Get_Audit_Case_Action_By_Case] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ByCase_AU_SemiAnnual_RptResult>> Get_ByCase_AU_SemiAnnual_RptAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, decimal? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ByCase_AU_SemiAnnual_RptResult>("EXEC @returnValue = [dbo].[Get_ByCase_AU_SemiAnnual_Rpt] @strRunBy, @dtStartDate, @dtEndDate, @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASEResult>> Get_CASEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASEResult>("EXEC @returnValue = [dbo].[Get_CASE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CASE_ACTIONResult>> GET_CASE_ACTIONAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CASE_ACTIONResult>("EXEC @returnValue = [dbo].[GET_CASE_ACTION] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CASE_ALT_OFFICE_NOResult>> GET_CASE_ALT_OFFICE_NOAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CASE_ALT_OFFICE_NOResult>("EXEC @returnValue = [dbo].[GET_CASE_ALT_OFFICE_NO] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASE_ForUnearnedIncomeTANFResult>> Get_CASE_ForUnearnedIncomeTANFAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASE_ForUnearnedIncomeTANFResult>("EXEC @returnValue = [dbo].[Get_CASE_ForUnearnedIncomeTANF] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASE_NOTESResult>> Get_CASE_NOTESAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASE_NOTESResult>("EXEC @returnValue = [dbo].[Get_CASE_NOTES] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASE_NOTES_MEMBERNMResult>> Get_CASE_NOTES_MEMBERNMAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASE_NOTES_MEMBERNMResult>("EXEC @returnValue = [dbo].[Get_CASE_NOTES_MEMBERNM] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASE_NOTES_SORTResult>> Get_CASE_NOTES_SORTAsync(int? ID_MMBR, string SQLTYPE, DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASE_NOTES_SORTResult>("EXEC @returnValue = [dbo].[Get_CASE_NOTES_SORT] @ID_MMBR, @SQLTYPE, @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASE_NOTES_SORT_CASEResult>> Get_CASE_NOTES_SORT_CASEAsync(int? ID_CASE_NMBR, string SQLTYPE, DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASE_NOTES_SORT_CASEResult>("EXEC @returnValue = [dbo].[Get_CASE_NOTES_SORT_CASE] @ID_CASE_NMBR, @SQLTYPE, @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASE_NOTES_SYNCResult>> Get_CASE_NOTES_SYNCAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASE_NOTES_SYNCResult>("EXEC @returnValue = [dbo].[Get_CASE_NOTES_SYNC] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASE_STATUSResult>> Get_CASE_STATUSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASE_STATUSResult>("EXEC @returnValue = [dbo].[Get_CASE_STATUS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CASE_STATUS_REGResult>> GET_CASE_STATUS_REGAsync(string COUNTY_SUBMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CASE_STATUS_REGResult>("EXEC @returnValue = [dbo].[GET_CASE_STATUS_REG] @COUNTY_SUBMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CASE_STATUS_REG_BY_NAMEResult>> GET_CASE_STATUS_REG_BY_NAMEAsync(string DHR_MEMBER_FIRST_NAME, string DHR_MEMBER_LAST_NAME, string COUNTY_SUBMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_FIRST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_LAST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CASE_STATUS_REG_BY_NAMEResult>("EXEC @returnValue = [dbo].[GET_CASE_STATUS_REG_BY_NAME] @DHR_MEMBER_FIRST_NAME, @DHR_MEMBER_LAST_NAME, @COUNTY_SUBMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CASE_STATUS_REG_BY_NO_CASEResult>> GET_CASE_STATUS_REG_BY_NO_CASEAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CASE_STATUS_REG_BY_NO_CASEResult>("EXEC @returnValue = [dbo].[GET_CASE_STATUS_REG_BY_NO_CASE] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CASE_STATUS_REG_BY_OFFCDResult>> GET_CASE_STATUS_REG_BY_OFFCDAsync(string COUNTY_SUBMIT, string COUNTY_OFFICE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_OFFICE",
                    Size = 2,
                    Value = COUNTY_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CASE_STATUS_REG_BY_OFFCDResult>("EXEC @returnValue = [dbo].[GET_CASE_STATUS_REG_BY_OFFCD] @COUNTY_SUBMIT, @COUNTY_OFFICE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CASE_STATUS_REG_BY_SSNResult>> GET_CASE_STATUS_REG_BY_SSNAsync(string DHR_MEMBER_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SSN",
                    Size = 9,
                    Value = DHR_MEMBER_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CASE_STATUS_REG_BY_SSNResult>("EXEC @returnValue = [dbo].[GET_CASE_STATUS_REG_BY_SSN] @DHR_MEMBER_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CASEVOTE_INFOResult>> Get_CASEVOTE_INFOAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CASEVOTE_INFOResult>("EXEC @returnValue = [dbo].[Get_CASEVOTE_INFO] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CD_CERT_ELIGBYIDResult>> Get_CD_CERT_ELIGBYIDAsync(int? ID_REF_CERT_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CD_CERT_ELIGBYIDResult>("EXEC @returnValue = [dbo].[Get_CD_CERT_ELIGBYID] @ID_REF_CERT_ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CERT_ELIGResult>> Get_CERT_ELIGAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CERT_ELIGResult>("EXEC @returnValue = [dbo].[Get_CERT_ELIG]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ChildSupportFlag_CASEResult>> Get_ChildSupportFlag_CASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ChildSupportFlag_CASEResult>("EXEC @returnValue = [dbo].[Get_ChildSupportFlag_CASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_CNTY_ADDRS_PHNResult>> GET_CNTY_ADDRS_PHNAsync(int? ID_CNTY_STATE, int? OFFICE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OFFICE_CODE",
                    Value = OFFICE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_CNTY_ADDRS_PHNResult>("EXEC @returnValue = [dbo].[GET_CNTY_ADDRS_PHN] @ID_CNTY_STATE, @OFFICE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CNTY_BY_IDResult>> Get_CNTY_BY_IDAsync(int? ID_CNTY_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CNTY_BY_IDResult>("EXEC @returnValue = [dbo].[Get_CNTY_BY_ID] @ID_CNTY_STATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_COUNTY_STATEResult>> Get_COUNTY_STATEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_COUNTY_STATEResult>("EXEC @returnValue = [dbo].[Get_COUNTY_STATE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_COURT_ORDERD_AMOUNTResult>> Get_COURT_ORDERD_AMOUNTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_COURT_ORDERD_AMOUNTResult>("EXEC @returnValue = [dbo].[Get_COURT_ORDERD_AMOUNT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_COVERED_ITEMSResult>> Get_COVERED_ITEMSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_COVERED_ITEMSResult>("EXEC @returnValue = [dbo].[Get_COVERED_ITEMS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_COVERED_ITEMS_RECORDResult>> Get_COVERED_ITEMS_RECORDAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_COVERED_ITEMS_RECORDResult>("EXEC @returnValue = [dbo].[Get_COVERED_ITEMS_RECORD] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CS_AMOUNTResult>> Get_CS_AMOUNTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CS_AMOUNTResult>("EXEC @returnValue = [dbo].[Get_CS_AMOUNT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CS_DPNDNTSResult>> Get_CS_DPNDNTSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CS_DPNDNTSResult>("EXEC @returnValue = [dbo].[Get_CS_DPNDNTS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CS_DPNDNTS_ByIdCsAmntResult>> Get_CS_DPNDNTS_ByIdCsAmntAsync(int? ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CS_DPNDNTS_ByIdCsAmntResult>("EXEC @returnValue = [dbo].[Get_CS_DPNDNTS_ByIdCsAmnt] @ID_CS_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CS_PAYER_RECIPIENTResult>> Get_CS_PAYER_RECIPIENTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CS_PAYER_RECIPIENTResult>("EXEC @returnValue = [dbo].[Get_CS_PAYER_RECIPIENT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_CS_PAYMENTSResult>> Get_CS_PAYMENTSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_CS_PAYMENTSResult>("EXEC @returnValue = [dbo].[Get_CS_PAYMENTS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DAILY_AWARD_DENIALSResult>> Get_DAILY_AWARD_DENIALSAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DAILY_AWARD_DENIALSResult>("EXEC @returnValue = [dbo].[Get_DAILY_AWARD_DENIALS] @strRunBy, @dtStartDate, @dtEndDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DAILY_AWARD_DENIALS_BAFBResult>> Get_DAILY_AWARD_DENIALS_BAFBAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DAILY_AWARD_DENIALS_BAFBResult>("EXEC @returnValue = [dbo].[Get_DAILY_AWARD_DENIALS_BAFB] @strRunBy, @dtStartDate, @dtEndDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DAILY_AWARD_DENIALS_BY_CNTYResult>> Get_DAILY_AWARD_DENIALS_BY_CNTYAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DAILY_AWARD_DENIALS_BY_CNTYResult>("EXEC @returnValue = [dbo].[Get_DAILY_AWARD_DENIALS_BY_CNTY] @strRunBy, @dtStartDate, @dtEndDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DAILY_AWARD_DENIALS_OILResult>> Get_DAILY_AWARD_DENIALS_OILAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, string RptType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RptType",
                    Size = 3,
                    Value = RptType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DAILY_AWARD_DENIALS_OILResult>("EXEC @returnValue = [dbo].[Get_DAILY_AWARD_DENIALS_OIL] @strRunBy, @dtStartDate, @dtEndDate, @strCounty, @RptType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Daily_STTS_RPTResult>> Get_Daily_STTS_RPTAsync(DateTime? dtStartDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 3,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Daily_STTS_RPTResult>("EXEC @returnValue = [dbo].[Get_Daily_STTS_RPT] @dtStartDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Daily_STTS_RPT_DSNAPResult>> Get_Daily_STTS_RPT_DSNAPAsync(string strRunBy, DateTime? dtStartDate, string strCounty, int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Daily_STTS_RPT_DSNAPResult>("EXEC @returnValue = [dbo].[Get_Daily_STTS_RPT_DSNAP] @strRunBy, @dtStartDate, @strCounty, @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DC_UNEARN_RECORDResult>> Get_DC_UNEARN_RECORDAsync(int? ID_MMBR, int? ID_DC_OTHR_PAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DC_UNEARN_RECORDResult>("EXEC @returnValue = [dbo].[Get_DC_UNEARN_RECORD] @ID_MMBR, @ID_DC_OTHR_PAY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DENIALResult>> Get_DENIALAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DENIALResult>("EXEC @returnValue = [dbo].[Get_DENIAL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DENIALS_TERM_MNTH_BY_CNTYResult>> Get_DENIALS_TERM_MNTH_BY_CNTYAsync(string strRunBy, DateTime? dtStartDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DENIALS_TERM_MNTH_BY_CNTYResult>("EXEC @returnValue = [dbo].[Get_DENIALS_TERM_MNTH_BY_CNTY] @strRunBy, @dtStartDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DENIALS_TERM_MNTH_BY_FAWResult>> Get_DENIALS_TERM_MNTH_BY_FAWAsync(string strRunBy, DateTime? dtStartDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DENIALS_TERM_MNTH_BY_FAWResult>("EXEC @returnValue = [dbo].[Get_DENIALS_TERM_MNTH_BY_FAW] @strRunBy, @dtStartDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DEPENDENTResult>> Get_DEPENDENTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DEPENDENTResult>("EXEC @returnValue = [dbo].[Get_DEPENDENT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DEPENDENT_CAREResult>> Get_DEPENDENT_CAREAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DEPENDENT_CAREResult>("EXEC @returnValue = [dbo].[Get_DEPENDENT_CARE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DEPENDENT_CARE_OTHER_PAYERResult>> Get_DEPENDENT_CARE_OTHER_PAYERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DEPENDENT_CARE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[Get_DEPENDENT_CARE_OTHER_PAYER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DependentsbyIDCASENOResult>> Get_DependentsbyIDCASENOAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DependentsbyIDCASENOResult>("EXEC @returnValue = [dbo].[Get_DependentsbyIDCASENO] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DependentsbyIdMmbrResult>> Get_DependentsbyIdMmbrAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DependentsbyIdMmbrResult>("EXEC @returnValue = [dbo].[Get_DependentsbyIdMmbr] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DependentsbyIdMmbr_09012009Result>> Get_DependentsbyIdMmbr_09012009Async(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DependentsbyIdMmbr_09012009Result>("EXEC @returnValue = [dbo].[Get_DependentsbyIdMmbr_09012009] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DISASTERResult>> Get_DISASTERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DISASTERResult>("EXEC @returnValue = [dbo].[Get_DISASTER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_CARE_EXP_ALL_IDCASEResult>> Get_DPNDNT_CARE_EXP_ALL_IDCASEAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_CARE_EXP_ALL_IDCASEResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_CARE_EXP_ALL_IDCASE] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_CARE_EXP_ALL_IDMMBRResult>> Get_DPNDNT_CARE_EXP_ALL_IDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_CARE_EXP_ALL_IDMMBRResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_CARE_EXP_ALL_IDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_CHILDResult>> Get_DPNDNT_CHILDAsync(int? IDMMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_CHILDResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_CHILD] @IDMMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_ID_CDMTHResult>> Get_DPNDNT_ID_CDMTHAsync(int? ID_MMBR, int? ID_MMBR1, int? ID_DPNDNT, int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_ID_CDMTHResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_ID_CDMTH] @ID_MMBR, @ID_MMBR1, @ID_DPNDNT, @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_RECORDResult>> Get_DPNDNT_RECORDAsync(int? ID_MMBR, int? ID_MMBR1, int? ID_DPNDNT, int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_RECORDResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_RECORD] @ID_MMBR, @ID_MMBR1, @ID_DPNDNT, @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_RECORD_CDMTHResult>> Get_DPNDNT_RECORD_CDMTHAsync(int? ID_MMBR, int? ID_MMBR1, int? ID_DPNDNT, int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_RECORD_CDMTHResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_RECORD_CDMTH] @ID_MMBR, @ID_MMBR1, @ID_DPNDNT, @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_RECORD_OTHERResult>> Get_DPNDNT_RECORD_OTHERAsync(int? ID_MMBR, int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_RECORD_OTHERResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_RECORD_OTHER] @ID_MMBR, @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_RECORD2Result>> Get_DPNDNT_RECORD2Async(int? ID_MMBR, int? ID_MMBR1, int? ID_DPNDNT, int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_RECORD2Result>("EXEC @returnValue = [dbo].[Get_DPNDNT_RECORD2] @ID_MMBR, @ID_MMBR1, @ID_DPNDNT, @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DPNDNT_RECORDBResult>> Get_DPNDNT_RECORDBAsync(int? ID_MMBR, int? ID_MMBR1, int? ID_DPNDNT, int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DPNDNT_RECORDBResult>("EXEC @returnValue = [dbo].[Get_DPNDNT_RECORDB] @ID_MMBR, @ID_MMBR1, @ID_DPNDNT, @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DSNAP_DAILY_AWARD_DENIALSResult>> Get_DSNAP_DAILY_AWARD_DENIALSAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DSNAP_DAILY_AWARD_DENIALSResult>("EXEC @returnValue = [dbo].[Get_DSNAP_DAILY_AWARD_DENIALS] @strRunBy, @dtStartDate, @dtEndDate, @strCounty, @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DSNAP_DAILY_AWARD_DENIALS_BY_CNTYResult>> Get_DSNAP_DAILY_AWARD_DENIALS_BY_CNTYAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DSNAP_DAILY_AWARD_DENIALS_BY_CNTYResult>("EXEC @returnValue = [dbo].[Get_DSNAP_DAILY_AWARD_DENIALS_BY_CNTY] @strRunBy, @dtStartDate, @dtEndDate, @strCounty, @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DSNAP_MONTHLY_AWARD_DENIALS_FAWResult>> Get_DSNAP_MONTHLY_AWARD_DENIALS_FAWAsync(string strRunBy, DateTime? dtStartDate, string strCounty, int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DSNAP_MONTHLY_AWARD_DENIALS_FAWResult>("EXEC @returnValue = [dbo].[Get_DSNAP_MONTHLY_AWARD_DENIALS_FAW] @strRunBy, @dtStartDate, @strCounty, @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DSNAP_REGISTERED_BUT_NOT_COMPLETEResult>> Get_DSNAP_REGISTERED_BUT_NOT_COMPLETEAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DSNAP_REGISTERED_BUT_NOT_COMPLETEResult>("EXEC @returnValue = [dbo].[Get_DSNAP_REGISTERED_BUT_NOT_COMPLETE] @strRunBy, @dtStartDate, @dtEndDate, @strCounty, @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_DUPLICATE_MEMBERSResult>> Get_DUPLICATE_MEMBERSAsync(string LAST, string FRST, string MDDL, string SUFX, DateTime? DOB, int? MTHS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LAST",
                    Size = 40,
                    Value = LAST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FRST",
                    Size = 40,
                    Value = FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MDDL",
                    Size = 40,
                    Value = MDDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SUFX",
                    Size = 6,
                    Value = SUFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MTHS",
                    Value = MTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_DUPLICATE_MEMBERSResult>("EXEC @returnValue = [dbo].[Get_DUPLICATE_MEMBERS] @LAST, @FRST, @MDDL, @SUFX, @DOB, @MTHS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EARN_INC_VRFCTNSResult>> Get_EARN_INC_VRFCTNSAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EARN_INC_VRFCTNSResult>("EXEC @returnValue = [dbo].[Get_EARN_INC_VRFCTNS] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EARNINC_INC_SUMResult>> Get_EARNINC_INC_SUMAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EARNINC_INC_SUMResult>("EXEC @returnValue = [dbo].[Get_EARNINC_INC_SUM] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EARNINC_INC_SUM_BY_IDMMBRResult>> Get_EARNINC_INC_SUM_BY_IDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EARNINC_INC_SUM_BY_IDMMBRResult>("EXEC @returnValue = [dbo].[Get_EARNINC_INC_SUM_BY_IDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EMPLOYMENTResult>> Get_EMPLOYMENTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EMPLOYMENTResult>("EXEC @returnValue = [dbo].[Get_EMPLOYMENT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EMPLOYMENT_ReminderIDResult>> Get_EMPLOYMENT_ReminderIDAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EMPLOYMENT_ReminderIDResult>("EXEC @returnValue = [dbo].[Get_EMPLOYMENT_ReminderID] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_EMPLYMNT_TOTLS_BYIDCASENOResult>> Get_EMPLYMNT_TOTLS_BYIDCASENOAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_EMPLYMNT_TOTLS_BYIDCASENOResult>("EXEC @returnValue = [dbo].[Get_EMPLYMNT_TOTLS_BYIDCASENO] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_FA_STATUSResult>> Get_FA_STATUSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_FA_STATUSResult>("EXEC @returnValue = [dbo].[Get_FA_STATUS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_FA_STATUS_BY_IDCASEResult>> Get_FA_STATUS_BY_IDCASEAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_FA_STATUS_BY_IDCASEResult>("EXEC @returnValue = [dbo].[Get_FA_STATUS_BY_IDCASE] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Form657_ByNoCaseResult>> Get_Form657_ByNoCaseAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Form657_ByNoCaseResult>("EXEC @returnValue = [dbo].[Get_Form657_ByNoCase] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Form879_ByNoCaseResult>> Get_Form879_ByNoCaseAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Form879_ByNoCaseResult>("EXEC @returnValue = [dbo].[Get_Form879_ByNoCase] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_FormAPPT_ByNoCaseResult>> Get_FormAPPT_ByNoCaseAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_FormAPPT_ByNoCaseResult>("EXEC @returnValue = [dbo].[Get_FormAPPT_ByNoCase] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_FSHHMembersByCaseResult>> Get_FSHHMembersByCaseAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_FSHHMembersByCaseResult>("EXEC @returnValue = [dbo].[Get_FSHHMembersByCase] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_GRAND_TTL_MDCL_EXPResult>> Get_GRAND_TTL_MDCL_EXPAsync(int? IDCASENMBR, string CD_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 1,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_GRAND_TTL_MDCL_EXPResult>("EXEC @returnValue = [dbo].[Get_GRAND_TTL_MDCL_EXP] @IDCASENMBR, @CD_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_GRAND_TTL_MDCL_EXP_AwdDnyResult>> Get_GRAND_TTL_MDCL_EXP_AwdDnyAsync(int? IDCASENMBR, string CD_MNTH, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 1,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_GRAND_TTL_MDCL_EXP_AwdDnyResult>("EXEC @returnValue = [dbo].[Get_GRAND_TTL_MDCL_EXP_AwdDny] @IDCASENMBR, @CD_MNTH, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_GRAND_TTL_MDCL_EXP_IntBudSumPrintResult>> Get_GRAND_TTL_MDCL_EXP_IntBudSumPrintAsync(int? ID_CASE_NMBR, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_GRAND_TTL_MDCL_EXP_IntBudSumPrintResult>("EXEC @returnValue = [dbo].[Get_GRAND_TTL_MDCL_EXP_IntBudSumPrint] @ID_CASE_NMBR, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_GRAND_TTL_MED_INSRNC_EXPResult>> Get_GRAND_TTL_MED_INSRNC_EXPAsync(int? IDCASENMBR, string CD_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 1,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_GRAND_TTL_MED_INSRNC_EXPResult>("EXEC @returnValue = [dbo].[Get_GRAND_TTL_MED_INSRNC_EXP] @IDCASENMBR, @CD_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_GRAND_TTL_MED_INSRNC_EXP_AwdDnyResult>> Get_GRAND_TTL_MED_INSRNC_EXP_AwdDnyAsync(int? IDCASENMBR, string CD_MNTH, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 1,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_GRAND_TTL_MED_INSRNC_EXP_AwdDnyResult>("EXEC @returnValue = [dbo].[Get_GRAND_TTL_MED_INSRNC_EXP_AwdDny] @IDCASENMBR, @CD_MNTH, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_GRAND_TTL_MED_INSRNC_EXP_IntBudSumPrintResult>> Get_GRAND_TTL_MED_INSRNC_EXP_IntBudSumPrintAsync(int? ID_CASE_NMBR, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_GRAND_TTL_MED_INSRNC_EXP_IntBudSumPrintResult>("EXEC @returnValue = [dbo].[Get_GRAND_TTL_MED_INSRNC_EXP_IntBudSumPrint] @ID_CASE_NMBR, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_HHMembersResult>> Get_HHMembersAsync(int? idcasenmbr, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idcasenmbr",
                    Value = idcasenmbr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_HHMembersResult>("EXEC @returnValue = [dbo].[Get_HHMembers] @idcasenmbr", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_HLDY_DATESResult>> Get_HLDY_DATESAsync(DateTime? FIRSTDATE, DateTime? LASTDATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FIRSTDATE",
                    Value = FIRSTDATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LASTDATE",
                    Value = LASTDATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_HLDY_DATESResult>("EXEC @returnValue = [dbo].[Get_HLDY_DATES] @FIRSTDATE, @LASTDATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_HOH_BY_CASENOResult>> Get_HOH_BY_CASENOAsync(int? CASENO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASENO",
                    Value = CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_HOH_BY_CASENOResult>("EXEC @returnValue = [dbo].[Get_HOH_BY_CASENO] @CASENO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_HOME_ADDRSS_IDResult>> GET_HOME_ADDRSS_IDAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_HOME_ADDRSS_IDResult>("EXEC @returnValue = [dbo].[GET_HOME_ADDRSS_ID] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_ID_CASE_BY_NOCASEResult>> GET_ID_CASE_BY_NOCASEAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_ID_CASE_BY_NOCASEResult>("EXEC @returnValue = [dbo].[GET_ID_CASE_BY_NOCASE] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_ID_MEMBER_BY_IDCASEResult>> GET_ID_MEMBER_BY_IDCASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_ID_MEMBER_BY_IDCASEResult>("EXEC @returnValue = [dbo].[GET_ID_MEMBER_BY_IDCASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ID_NEWCASE_BY_NOCASEResult>> Get_ID_NEWCASE_BY_NOCASEAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ID_NEWCASE_BY_NOCASEResult>("EXEC @returnValue = [dbo].[Get_ID_NEWCASE_BY_NOCASE] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ID_NEWMBR_BY_IDNEWCASEResult>> Get_ID_NEWMBR_BY_IDNEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ID_NEWMBR_BY_IDNEWCASEResult>("EXEC @returnValue = [dbo].[Get_ID_NEWMBR_BY_IDNEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_INSURANCEResult>> Get_INSURANCEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_INSURANCEResult>("EXEC @returnValue = [dbo].[Get_INSURANCE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_INTERVIEWEE_INFOResult>> Get_INTERVIEWEE_INFOAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_INTERVIEWEE_INFOResult>("EXEC @returnValue = [dbo].[Get_INTERVIEWEE_INFO] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ISSUANCE_byCASENOResult>> Get_ISSUANCE_byCASENOAsync(string ISS_CASENO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ISS_CASENO",
                    Size = 9,
                    Value = ISS_CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ISSUANCE_byCASENOResult>("EXEC @returnValue = [dbo].[Get_ISSUANCE_byCASENO] @ISS_CASENO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ISSUANCE_HDR_byCASENOResult>> Get_ISSUANCE_HDR_byCASENOAsync(string ISS_CASENO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ISS_CASENO",
                    Size = 9,
                    Value = ISS_CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ISSUANCE_HDR_byCASENOResult>("EXEC @returnValue = [dbo].[Get_ISSUANCE_HDR_byCASENO] @ISS_CASENO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_LOGINResult>> Get_LOGINAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_LOGINResult>("EXEC @returnValue = [dbo].[Get_LOGIN]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_MAILING_ADDRSS_IDResult>> GET_MAILING_ADDRSS_IDAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_MAILING_ADDRSS_IDResult>("EXEC @returnValue = [dbo].[GET_MAILING_ADDRSS_ID] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MDCL_PRVDRS_BY_EXPNSTYPE_AND_MMBRResult>> Get_MDCL_PRVDRS_BY_EXPNSTYPE_AND_MMBRAsync(int? ID_CASE_NMBR, int? ID_PROVIDER_TYPE, int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PROVIDER_TYPE",
                    Value = ID_PROVIDER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MDCL_PRVDRS_BY_EXPNSTYPE_AND_MMBRResult>("EXEC @returnValue = [dbo].[Get_MDCL_PRVDRS_BY_EXPNSTYPE_AND_MMBR] @ID_CASE_NMBR, @ID_PROVIDER_TYPE, @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MDCL_RX_AVG_MNTHLYResult>> Get_MDCL_RX_AVG_MNTHLYAsync(int? ID_MDCL_EXPNSE, string flaverage, decimal? onetimettl, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNSE",
                    Value = ID_MDCL_EXPNSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "flaverage",
                    Size = 1,
                    Value = flaverage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "onetimettl",
                    Precision = 19,
                    Scale = 4,
                    Value = onetimettl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MDCL_RX_AVG_MNTHLYResult>("EXEC @returnValue = [dbo].[Get_MDCL_RX_AVG_MNTHLY] @ID_MDCL_EXPNSE, @flaverage, @onetimettl", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEALResult>> Get_MEALAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEALResult>("EXEC @returnValue = [dbo].[Get_MEAL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEAL_OTHERResult>> Get_MEAL_OTHERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[Get_MEAL_OTHER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Meals_Allowance_CRResult>> Get_Meals_Allowance_CRAsync(int? ID_CASE_NMBR, string CASE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Meals_Allowance_CRResult>("EXEC @returnValue = [dbo].[Get_Meals_Allowance_CR] @ID_CASE_NMBR, @CASE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MED_EXP_TRIPSResult>> Get_MED_EXP_TRIPSAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MED_EXP_TRIPSResult>("EXEC @returnValue = [dbo].[Get_MED_EXP_TRIPS] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEDICAL_EXPENSEResult>> Get_MEDICAL_EXPENSEAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEDICAL_EXPENSEResult>("EXEC @returnValue = [dbo].[Get_MEDICAL_EXPENSE] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEDICAL_EXPENSE_OTHER_PAYERResult>> Get_MEDICAL_EXPENSE_OTHER_PAYERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEDICAL_EXPENSE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[Get_MEDICAL_EXPENSE_OTHER_PAYER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEDICAL_NOTESResult>> Get_MEDICAL_NOTESAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEDICAL_NOTESResult>("EXEC @returnValue = [dbo].[Get_MEDICAL_NOTES] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEDL_EXP_APPLNCResult>> Get_MEDL_EXP_APPLNCAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEDL_EXP_APPLNCResult>("EXEC @returnValue = [dbo].[Get_MEDL_EXP_APPLNC] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEDL_EXP_RXResult>> Get_MEDL_EXP_RXAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEDL_EXP_RXResult>("EXEC @returnValue = [dbo].[Get_MEDL_EXP_RX] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEMResult>> Get_MEMAsync(int? IDCASENMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEMResult>("EXEC @returnValue = [dbo].[Get_MEM] @IDCASENMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEMBERResult>> Get_MEMBERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEMBERResult>("EXEC @returnValue = [dbo].[Get_MEMBER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEMBER_allResult>> Get_MEMBER_allAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEMBER_allResult>("EXEC @returnValue = [dbo].[Get_MEMBER_all]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEMBER_TRNSFR_RSRCResult>> Get_MEMBER_TRNSFR_RSRCAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEMBER_TRNSFR_RSRCResult>("EXEC @returnValue = [dbo].[Get_MEMBER_TRNSFR_RSRC]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MEMBERVOTE_INFOResult>> Get_MEMBERVOTE_INFOAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MEMBERVOTE_INFOResult>("EXEC @returnValue = [dbo].[Get_MEMBERVOTE_INFO] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MemInfoResult>> Get_MemInfoAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MemInfoResult>("EXEC @returnValue = [dbo].[Get_MemInfo] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_MMBR_CNTY_ADD_REGResult>> GET_MMBR_CNTY_ADD_REGAsync(string NO_CASE, int? OFFICE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OFFICE_CODE",
                    Value = OFFICE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_MMBR_CNTY_ADD_REGResult>("EXEC @returnValue = [dbo].[GET_MMBR_CNTY_ADD_REG] @NO_CASE, @OFFICE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_MMBR_CNTY_ADDRS_F657Result>> GET_MMBR_CNTY_ADDRS_F657Async(string NO_CASE, int? OFFICE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OFFICE_CODE",
                    Value = OFFICE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_MMBR_CNTY_ADDRS_F657Result>("EXEC @returnValue = [dbo].[GET_MMBR_CNTY_ADDRS_F657] @NO_CASE, @OFFICE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_MMBR_CNTY_ADDRS_F879Result>> GET_MMBR_CNTY_ADDRS_F879Async(string NO_CASE, int? OFFICE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OFFICE_CODE",
                    Value = OFFICE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_MMBR_CNTY_ADDRS_F879Result>("EXEC @returnValue = [dbo].[GET_MMBR_CNTY_ADDRS_F879] @NO_CASE, @OFFICE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_MMBR_CNTY_ADDRS_FAPPTResult>> GET_MMBR_CNTY_ADDRS_FAPPTAsync(string NO_CASE, int? OFFICE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OFFICE_CODE",
                    Value = OFFICE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_MMBR_CNTY_ADDRS_FAPPTResult>("EXEC @returnValue = [dbo].[GET_MMBR_CNTY_ADDRS_FAPPT] @NO_CASE, @OFFICE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_MMBR_CNTY_ADDRS_FNOMAResult>> GET_MMBR_CNTY_ADDRS_FNOMAAsync(string NO_CASE, int? OFFICE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OFFICE_CODE",
                    Value = OFFICE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_MMBR_CNTY_ADDRS_FNOMAResult>("EXEC @returnValue = [dbo].[GET_MMBR_CNTY_ADDRS_FNOMA] @NO_CASE, @OFFICE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MMBR_IDResult>> Get_MMBR_IDAsync(string NO_CASE, string NO_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MMBR_IDResult>("EXEC @returnValue = [dbo].[Get_MMBR_ID] @NO_CASE, @NO_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MMBR_MED_EXP_DETAIL_SUMMARYResult>> Get_MMBR_MED_EXP_DETAIL_SUMMARYAsync(int? ID_MMBR, string CD_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 1,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MMBR_MED_EXP_DETAIL_SUMMARYResult>("EXEC @returnValue = [dbo].[Get_MMBR_MED_EXP_DETAIL_SUMMARY] @ID_MMBR, @CD_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MMBR_MED_SUMMARYResult>> Get_MMBR_MED_SUMMARYAsync(int? IDCASENMBR, string CaeType, string CD_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CaeType",
                    Size = 1,
                    Value = CaeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 2,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MMBR_MED_SUMMARYResult>("EXEC @returnValue = [dbo].[Get_MMBR_MED_SUMMARY] @IDCASENMBR, @CaeType, @CD_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MMBR_NM_ONBILLResult>> Get_MMBR_NM_ONBILLAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MMBR_NM_ONBILLResult>("EXEC @returnValue = [dbo].[Get_MMBR_NM_ONBILL] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MMBR_WORKREG_AND_CERTELIGResult>> Get_MMBR_WORKREG_AND_CERTELIGAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MMBR_WORKREG_AND_CERTELIGResult>("EXEC @returnValue = [dbo].[Get_MMBR_WORKREG_AND_CERTELIG] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MMBRS_NOT_IN_SCI_II_BYCASENOResult>> Get_MMBRS_NOT_IN_SCI_II_BYCASENOAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MMBRS_NOT_IN_SCI_II_BYCASENOResult>("EXEC @returnValue = [dbo].[Get_MMBRS_NOT_IN_SCI_II_BYCASENO] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MNTHLY_STTS_RPTResult>> Get_MNTHLY_STTS_RPTAsync(DateTime? dtStartDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MNTHLY_STTS_RPTResult>("EXEC @returnValue = [dbo].[Get_MNTHLY_STTS_RPT] @dtStartDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MONTHLY_AWARD_DENIALS_FAWResult>> Get_MONTHLY_AWARD_DENIALS_FAWAsync(string strRunBy, DateTime? dtStartDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MONTHLY_AWARD_DENIALS_FAWResult>("EXEC @returnValue = [dbo].[Get_MONTHLY_AWARD_DENIALS_FAW] @strRunBy, @dtStartDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MYDHRAPPS_byID_NEWCASEResult>> Get_MYDHRAPPS_byID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MYDHRAPPS_byID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_MYDHRAPPS_byID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_MYDHRAPPS_bySSNorNameResult>> Get_MYDHRAPPS_bySSNorNameAsync(string SSN, string DHR_MEMBER_FIRST_NAME, string DHR_MEMBER_LAST_NAME, string TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_FIRST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_LAST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TYPE",
                    Size = 1,
                    Value = TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_MYDHRAPPS_bySSNorNameResult>("EXEC @returnValue = [dbo].[Get_MYDHRAPPS_bySSNorName] @SSN, @DHR_MEMBER_FIRST_NAME, @DHR_MEMBER_LAST_NAME, @TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_NC_MEDICAL_EXPENSEResult>> Get_NC_MEDICAL_EXPENSEAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_NC_MEDICAL_EXPENSEResult>("EXEC @returnValue = [dbo].[Get_NC_MEDICAL_EXPENSE] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_NO_OF_MEALS_LIMITResult>> Get_NO_OF_MEALS_LIMITAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_NO_OF_MEALS_LIMITResult>("EXEC @returnValue = [dbo].[Get_NO_OF_MEALS_LIMIT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_NOCASE_BY_SSNResult>> Get_NOCASE_BY_SSNAsync(string NO_SSN, int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_NOCASE_BY_SSNResult>("EXEC @returnValue = [dbo].[Get_NOCASE_BY_SSN] @NO_SSN, @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_OACICS_ERRORS_ALLResult>> Get_OACICS_ERRORS_ALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_OACICS_ERRORS_ALLResult>("EXEC @returnValue = [dbo].[Get_OACICS_ERRORS_ALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_OACICS_ERRORS_BYDateResult>> Get_OACICS_ERRORS_BYDateAsync(string DT_ERROR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DT_ERROR",
                    Size = 10,
                    Value = DT_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_OACICS_ERRORS_BYDateResult>("EXEC @returnValue = [dbo].[Get_OACICS_ERRORS_BYDate] @DT_ERROR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_OACICS_ERRORS_BYIDUSerResult>> Get_OACICS_ERRORS_BYIDUSerAsync(string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_OACICS_ERRORS_BYIDUSerResult>("EXEC @returnValue = [dbo].[Get_OACICS_ERRORS_BYIDUSer] @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_OACICS_ERRORS_BYModuleResult>> Get_OACICS_ERRORS_BYModuleAsync(string CD_REF_MODULE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_MODULE",
                    Size = 5,
                    Value = CD_REF_MODULE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_OACICS_ERRORS_BYModuleResult>("EXEC @returnValue = [dbo].[Get_OACICS_ERRORS_BYModule] @CD_REF_MODULE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_OACIS_CASE_BEING_WORKEDResult>> GET_OACIS_CASE_BEING_WORKEDAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_OACIS_CASE_BEING_WORKEDResult>("EXEC @returnValue = [dbo].[GET_OACIS_CASE_BEING_WORKED] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_OACIS_CASE_BEING_WORKED_ALLResult>> GET_OACIS_CASE_BEING_WORKED_ALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_OACIS_CASE_BEING_WORKED_ALLResult>("EXEC @returnValue = [dbo].[GET_OACIS_CASE_BEING_WORKED_ALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_OACIS_CASE_BEING_WORKEDALLResult>> GET_OACIS_CASE_BEING_WORKEDALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_OACIS_CASE_BEING_WORKEDALLResult>("EXEC @returnValue = [dbo].[GET_OACIS_CASE_BEING_WORKED-ALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_OILINFOResult>> Get_OILINFOAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_OILINFOResult>("EXEC @returnValue = [dbo].[Get_OILINFO]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_COURT_ORDERResult>> Get_PIV_COURT_ORDERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_COURT_ORDERResult>("EXEC @returnValue = [dbo].[Get_PIV_COURT_ORDER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_CS_PAYER_RCPNTResult>> Get_PIV_CS_PAYER_RCPNTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_CS_PAYER_RCPNTResult>("EXEC @returnValue = [dbo].[Get_PIV_CS_PAYER_RCPNT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_MMBR_INSRNCResult>> Get_PIV_MMBR_INSRNCAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_MMBR_INSRNCResult>("EXEC @returnValue = [dbo].[Get_PIV_MMBR_INSRNC]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_MMBR_RLTNResult>> Get_PIV_MMBR_RLTNAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_MMBR_RLTNResult>("EXEC @returnValue = [dbo].[Get_PIV_MMBR_RLTN]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_PRVDR_DCResult>> Get_PIV_PRVDR_DCAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_PRVDR_DCResult>("EXEC @returnValue = [dbo].[Get_PIV_PRVDR_DC]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_PRVDR_INSRNCResult>> Get_PIV_PRVDR_INSRNCAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_PRVDR_INSRNCResult>("EXEC @returnValue = [dbo].[Get_PIV_PRVDR_INSRNC]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_RMED_MEDEXResult>> Get_PIV_RMED_MEDEXAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_RMED_MEDEXResult>("EXEC @returnValue = [dbo].[Get_PIV_RMED_MEDEX]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PIV_RPRVDR_RAPPLIANCE_TYPEResult>> Get_PIV_RPRVDR_RAPPLIANCE_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PIV_RPRVDR_RAPPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[Get_PIV_RPRVDR_RAPPLIANCE_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PROVIDER_INFOResult>> Get_PROVIDER_INFOAsync(int? IDMMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PROVIDER_INFOResult>("EXEC @returnValue = [dbo].[Get_PROVIDER_INFO] @IDMMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PROVIDER_NMResult>> Get_PROVIDER_NMAsync(int? IDMMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PROVIDER_NMResult>("EXEC @returnValue = [dbo].[Get_PROVIDER_NM] @IDMMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_PRVDR_RECORDSResult>> Get_PRVDR_RECORDSAsync(int? ID_MMBR, int? ID_PRVDR_NAME, int? ID_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_PRVDR_RECORDSResult>("EXEC @returnValue = [dbo].[Get_PRVDR_RECORDS] @ID_MMBR, @ID_PRVDR_NAME, @ID_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RB_MEALResult>> Get_RB_MEALAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RB_MEALResult>("EXEC @returnValue = [dbo].[Get_RB_MEAL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RB_MEAL_OTHERResult>> Get_RB_MEAL_OTHERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RB_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[Get_RB_MEAL_OTHER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_ADDRESS_ID_BYDESCResult>> Get_REF_ADDRESS_ID_BYDESCAsync(string CD_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_ADDRSS_TYPE",
                    Size = 20,
                    Value = CD_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_ADDRESS_ID_BYDESCResult>("EXEC @returnValue = [dbo].[Get_REF_ADDRESS_ID_BYDESC] @CD_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_ADDRESS_TYPEResult>> Get_REF_ADDRESS_TYPEAsync(int? ID_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_ADDRESS_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_ADDRESS_TYPE] @ID_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_AL_COUNTIESResult>> Get_REF_AL_COUNTIESAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_AL_COUNTIESResult>("EXEC @returnValue = [dbo].[Get_REF_AL_COUNTIES]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_ALLResult>> Get_REF_ALLAsync(string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 3,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_ALLResult>("EXEC @returnValue = [dbo].[Get_REF_ALL] @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_ALL_HLDYSResult>> Get_REF_ALL_HLDYSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_ALL_HLDYSResult>("EXEC @returnValue = [dbo].[Get_REF_ALL_HLDYS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_APPLIANCE_TYPEResult>> Get_REF_APPLIANCE_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_APPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_APPLIANCE_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CASE_CTGRYResult>> Get_REF_CASE_CTGRYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CASE_CTGRYResult>("EXEC @returnValue = [dbo].[Get_REF_CASE_CTGRY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CASE_CTGRY_BYDSCRResult>> Get_REF_CASE_CTGRY_BYDSCRAsync(string CD_CASE_CTGRY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CTGRY_DSCR",
                    Size = 15,
                    Value = CD_CASE_CTGRY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CASE_CTGRY_BYDSCRResult>("EXEC @returnValue = [dbo].[Get_REF_CASE_CTGRY_BYDSCR] @CD_CASE_CTGRY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CASE_CTGRY_BYIDResult>> Get_REF_CASE_CTGRY_BYIDAsync(int? ID_CASE_CTGRY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CASE_CTGRY_BYIDResult>("EXEC @returnValue = [dbo].[Get_REF_CASE_CTGRY_BYID] @ID_CASE_CTGRY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CASE_STATUSResult>> Get_REF_CASE_STATUSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CASE_STATUSResult>("EXEC @returnValue = [dbo].[Get_REF_CASE_STATUS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CASE_STATUS_TYPEResult>> Get_REF_CASE_STATUS_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CASE_STATUS_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_CASE_STATUS_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CASE_SUB_CTGRYResult>> Get_REF_CASE_SUB_CTGRYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CASE_SUB_CTGRYResult>("EXEC @returnValue = [dbo].[Get_REF_CASE_SUB_CTGRY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CERT_ELIGResult>> Get_REF_CERT_ELIGAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CERT_ELIGResult>("EXEC @returnValue = [dbo].[Get_REF_CERT_ELIG]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_CERT_ELIG_RoomersBoardersResult>> Get_REF_CERT_ELIG_RoomersBoardersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_CERT_ELIG_RoomersBoardersResult>("EXEC @returnValue = [dbo].[Get_REF_CERT_ELIG_RoomersBoarders]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_COUNTY_STATEResult>> Get_REF_COUNTY_STATEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_COUNTY_STATEResult>("EXEC @returnValue = [dbo].[Get_REF_COUNTY_STATE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_COUNTY_STATE_CountiesOnlyResult>> Get_REF_COUNTY_STATE_CountiesOnlyAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_COUNTY_STATE_CountiesOnlyResult>("EXEC @returnValue = [dbo].[Get_REF_COUNTY_STATE_CountiesOnly]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_COURT_ORDERED_TYPEResult>> Get_REF_COURT_ORDERED_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_COURT_ORDERED_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_COURT_ORDERED_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_DENIAL_CODESResult>> Get_REF_DENIAL_CODESAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_DENIAL_CODESResult>("EXEC @returnValue = [dbo].[Get_REF_DENIAL_CODES]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_DEPENDENT_CARE_LIMITResult>> Get_REF_DEPENDENT_CARE_LIMITAsync(string DPNDNTCARE_DESC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DPNDNTCARE_DESC",
                    Size = 20,
                    Value = DPNDNTCARE_DESC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_DEPENDENT_CARE_LIMITResult>("EXEC @returnValue = [dbo].[Get_REF_DEPENDENT_CARE_LIMIT] @DPNDNTCARE_DESC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_DEPENDENT_CARE_LIMITALLResult>> Get_REF_DEPENDENT_CARE_LIMITALLAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_DEPENDENT_CARE_LIMITALLResult>("EXEC @returnValue = [dbo].[Get_REF_DEPENDENT_CARE_LIMITALL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_DHR_EMPLOYEEResult>> Get_REF_DHR_EMPLOYEEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_DHR_EMPLOYEEResult>("EXEC @returnValue = [dbo].[Get_REF_DHR_EMPLOYEE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_EARNED_INCOME_TYPEResult>> Get_REF_EARNED_INCOME_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_EARNED_INCOME_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_EARNED_INCOME_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_EBT_CHCKResult>> Get_REF_EBT_CHCKAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_EBT_CHCKResult>("EXEC @returnValue = [dbo].[Get_REF_EBT_CHCK]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_EXCESS_RESOURCE_LIMITResult>> Get_REF_EXCESS_RESOURCE_LIMITAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_EXCESS_RESOURCE_LIMITResult>("EXEC @returnValue = [dbo].[Get_REF_EXCESS_RESOURCE_LIMIT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_FA_STATUSResult>> Get_REF_FA_STATUSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_FA_STATUSResult>("EXEC @returnValue = [dbo].[Get_REF_FA_STATUS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_FDRL_MLGE_RTResult>> Get_REF_FDRL_MLGE_RTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_FDRL_MLGE_RTResult>("EXEC @returnValue = [dbo].[Get_REF_FDRL_MLGE_RT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_FEDERAL_MILEAGE_RATEResult>> Get_REF_FEDERAL_MILEAGE_RATEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_FEDERAL_MILEAGE_RATEResult>("EXEC @returnValue = [dbo].[Get_REF_FEDERAL_MILEAGE_RATE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_FormsResult>> Get_REF_FormsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_FormsResult>("EXEC @returnValue = [dbo].[Get_REF_Forms]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_FREQ_BYIDFREQResult>> Get_REF_FREQ_BYIDFREQAsync(decimal? ID_FRQNCY_REF, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_REF",
                    Precision = 2,
                    Value = ID_FRQNCY_REF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_FREQ_BYIDFREQResult>("EXEC @returnValue = [dbo].[Get_REF_FREQ_BYIDFREQ] @ID_FRQNCY_REF", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_FREQUENCYResult>> Get_REF_FREQUENCYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_FREQUENCYResult>("EXEC @returnValue = [dbo].[Get_REF_FREQUENCY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_FREQUENCY_PAYResult>> Get_REF_FREQUENCY_PAYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_FREQUENCY_PAYResult>("EXEC @returnValue = [dbo].[Get_REF_FREQUENCY_PAY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_IEVS_TRAKResult>> Get_REF_IEVS_TRAKAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_IEVS_TRAKResult>("EXEC @returnValue = [dbo].[Get_REF_IEVS_TRAK]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_INACTIVE_SCIIIResult>> Get_REF_INACTIVE_SCIIIAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_INACTIVE_SCIIIResult>("EXEC @returnValue = [dbo].[Get_REF_INACTIVE_SCIII]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_INCOME_LIMITResult>> Get_REF_INCOME_LIMITAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_INCOME_LIMITResult>("EXEC @returnValue = [dbo].[Get_REF_INCOME_LIMIT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_INSRNC_PAYERResult>> Get_REF_INSRNC_PAYERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_INSRNC_PAYERResult>("EXEC @returnValue = [dbo].[Get_REF_INSRNC_PAYER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_INSTRUCTIONSResult>> Get_REF_INSTRUCTIONSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_INSTRUCTIONSResult>("EXEC @returnValue = [dbo].[Get_REF_INSTRUCTIONS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_MEDICAL_LIMITResult>> Get_REF_MEDICAL_LIMITAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_MEDICAL_LIMITResult>("EXEC @returnValue = [dbo].[Get_REF_MEDICAL_LIMIT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_MEDICATIONResult>> Get_REF_MEDICATIONAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_MEDICATIONResult>("EXEC @returnValue = [dbo].[Get_REF_MEDICATION]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_MESSAGEResult>> Get_REF_MESSAGEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_MESSAGEResult>("EXEC @returnValue = [dbo].[Get_REF_MESSAGE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_NOTICE_TYPEResult>> Get_REF_NOTICE_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_NOTICE_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_NOTICE_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_OACIS_MODULEResult>> Get_REF_OACIS_MODULEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_OACIS_MODULEResult>("EXEC @returnValue = [dbo].[Get_REF_OACIS_MODULE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_OBLIGATION_REASONResult>> Get_REF_OBLIGATION_REASONAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_OBLIGATION_REASONResult>("EXEC @returnValue = [dbo].[Get_REF_OBLIGATION_REASON]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_OBLIGATION_REASON_CSResult>> Get_REF_OBLIGATION_REASON_CSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_OBLIGATION_REASON_CSResult>("EXEC @returnValue = [dbo].[Get_REF_OBLIGATION_REASON_CS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAST_DUE_RSNResult>> Get_REF_PAST_DUE_RSNAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAST_DUE_RSNResult>("EXEC @returnValue = [dbo].[Get_REF_PAST_DUE_RSN]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATESResult>> Get_REF_PAY_DATESAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATESResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_ByDateResult>> Get_REF_PAY_DATES_ByDateAsync(int? ID_EMPLYMNT, DateTime? DT_PAY_DATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PAY_DATE",
                    Value = DT_PAY_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_ByDateResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_ByDate] @ID_EMPLYMNT, @DT_PAY_DATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_IDResult>> Get_REF_PAY_DATES_IDAsync(int? ID_PAY_DATES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAY_DATES",
                    Value = ID_PAY_DATES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_IDResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_ID] @ID_PAY_DATES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_MTResult>> Get_REF_PAY_DATES_MTAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_MTResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_MT] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_NRResult>> Get_REF_PAY_DATES_NRAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_NRResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_NR] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_NRDatesResult>> Get_REF_PAY_DATES_NRDatesAsync(int? ID_EMPLYMNT, DateTime? DATEFROM, DateTime? DATETO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DATEFROM",
                    Value = DATEFROM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATETO",
                    Value = DATETO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_NRDatesResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_NRDates] @ID_EMPLYMNT, @DATEFROM, @DATETO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_PDResult>> Get_REF_PAY_DATES_PDAsync(int? ID_EMPLYMNT, DateTime? DT_PAY_DATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PAY_DATE",
                    Value = DT_PAY_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_PDResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_PD] @ID_EMPLYMNT, @DT_PAY_DATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_PDNRResult>> Get_REF_PAY_DATES_PDNRAsync(int? ID_EMPLYMNT, DateTime? DT_PAY_DATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PAY_DATE",
                    Value = DT_PAY_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_PDNRResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_PDNR] @ID_EMPLYMNT, @DT_PAY_DATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_PDSEResult>> Get_REF_PAY_DATES_PDSEAsync(int? ID_EMPLYMNT, DateTime? DT_PAY_DATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PAY_DATE",
                    Value = DT_PAY_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_PDSEResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_PDSE] @ID_EMPLYMNT, @DT_PAY_DATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_DATES_VACResult>> Get_REF_PAY_DATES_VACAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_DATES_VACResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_DATES_VAC] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PAY_TYPEResult>> Get_REF_PAY_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PAY_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_PAY_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PROVIDER_NAMEResult>> Get_REF_PROVIDER_NAMEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PROVIDER_NAMEResult>("EXEC @returnValue = [dbo].[Get_REF_PROVIDER_NAME]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_PROVIDER_TYPEResult>> Get_REF_PROVIDER_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_PROVIDER_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_PROVIDER_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RACEResult>> Get_REF_RACEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RACEResult>("EXEC @returnValue = [dbo].[Get_REF_RACE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RB_MEALResult>> Get_REF_RB_MEALAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RB_MEALResult>("EXEC @returnValue = [dbo].[Get_REF_RB_MEAL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_REJ_CLO_CODEResult>> Get_REF_REJ_CLO_CODEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_REJ_CLO_CODEResult>("EXEC @returnValue = [dbo].[Get_REF_REJ_CLO_CODE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RELATIONResult>> Get_REF_RELATIONAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RELATIONResult>("EXEC @returnValue = [dbo].[Get_REF_RELATION]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RESORATION_REASON_TYPEResult>> Get_REF_RESORATION_REASON_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RESORATION_REASON_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_RESORATION_REASON_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RESORATION_REASON_TYPE_AwardDenyResult>> Get_REF_RESORATION_REASON_TYPE_AwardDenyAsync(string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RESORATION_REASON_TYPE_AwardDenyResult>("EXEC @returnValue = [dbo].[Get_REF_RESORATION_REASON_TYPE_AwardDeny] @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RESOURCE_LIMITResult>> Get_REF_RESOURCE_LIMITAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RESOURCE_LIMITResult>("EXEC @returnValue = [dbo].[Get_REF_RESOURCE_LIMIT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RESOURCE_TYPEResult>> Get_REF_RESOURCE_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RESOURCE_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_RESOURCE_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_RJCTN_DNL_TERMResult>> Get_REF_RJCTN_DNL_TERMAsync(string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 3,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_RJCTN_DNL_TERMResult>("EXEC @returnValue = [dbo].[Get_REF_RJCTN_DNL_TERM] @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SANCTION_REASONResult>> Get_REF_SANCTION_REASONAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SANCTION_REASONResult>("EXEC @returnValue = [dbo].[Get_REF_SANCTION_REASON]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SANCTION_REASON_ResourcesResult>> Get_REF_SANCTION_REASON_ResourcesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SANCTION_REASON_ResourcesResult>("EXEC @returnValue = [dbo].[Get_REF_SANCTION_REASON_Resources]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SECURITYResult>> Get_REF_SECURITYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SECURITYResult>("EXEC @returnValue = [dbo].[Get_REF_SECURITY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SHELTER_DWELLING_TYPEResult>> Get_REF_SHELTER_DWELLING_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SHELTER_DWELLING_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_SHELTER_DWELLING_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SHELTER_EXPENSE_TYPEResult>> Get_REF_SHELTER_EXPENSE_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SHELTER_EXPENSE_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_SHELTER_EXPENSE_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SHELTER_OWNERSHIPResult>> Get_REF_SHELTER_OWNERSHIPAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SHELTER_OWNERSHIPResult>("EXEC @returnValue = [dbo].[Get_REF_SHELTER_OWNERSHIP]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SHLTREXP_BYIDResult>> Get_REF_SHLTREXP_BYIDAsync(int? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SHLTREXP_BYIDResult>("EXEC @returnValue = [dbo].[Get_REF_SHLTREXP_BYID] @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_SPCL_REOPEN_RSNResult>> Get_REF_SPCL_REOPEN_RSNAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_SPCL_REOPEN_RSNResult>("EXEC @returnValue = [dbo].[Get_REF_SPCL_REOPEN_RSN]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_STATEResult>> Get_REF_STATEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_STATEResult>("EXEC @returnValue = [dbo].[Get_REF_STATE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_TFP_LIMITResult>> Get_REF_TFP_LIMITAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_TFP_LIMITResult>("EXEC @returnValue = [dbo].[Get_REF_TFP_LIMIT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_UNEARNED_PAYER_TYPEResult>> Get_REF_UNEARNED_PAYER_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_UNEARNED_PAYER_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_UNEARNED_PAYER_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_UTILITY_DESCRResult>> Get_REF_UTILITY_DESCRAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_UTILITY_DESCRResult>("EXEC @returnValue = [dbo].[Get_REF_UTILITY_DESCR]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_UTILITY_DESCR_BYIDResult>> Get_REF_UTILITY_DESCR_BYIDAsync(int? ID_UTLTY_DDCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_DDCTN",
                    Value = ID_UTLTY_DDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_UTILITY_DESCR_BYIDResult>("EXEC @returnValue = [dbo].[Get_REF_UTILITY_DESCR_BYID] @ID_UTLTY_DDCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_UTILITY_LIMITSResult>> Get_REF_UTILITY_LIMITSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_UTILITY_LIMITSResult>("EXEC @returnValue = [dbo].[Get_REF_UTILITY_LIMITS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_UTILITY_TYPEResult>> Get_REF_UTILITY_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_UTILITY_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_UTILITY_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_UTLTY_TYP_BYIDResult>> Get_REF_UTLTY_TYP_BYIDAsync(int? ID_UTLTY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_UTLTY_TYP_BYIDResult>("EXEC @returnValue = [dbo].[Get_REF_UTLTY_TYP_BYID] @ID_UTLTY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_VER_DETAILBYIDResult>> Get_REF_VER_DETAILBYIDAsync(int? ID_VRFCTN_DETAIL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DETAIL",
                    Value = ID_VRFCTN_DETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_VER_DETAILBYIDResult>("EXEC @returnValue = [dbo].[Get_REF_VER_DETAILBYID] @ID_VRFCTN_DETAIL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_VERIFICATION_DETAILResult>> Get_REF_VERIFICATION_DETAILAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_VERIFICATION_DETAILResult>("EXEC @returnValue = [dbo].[Get_REF_VERIFICATION_DETAIL]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_VERIFICATION_DETAIL_PENDINGResult>> Get_REF_VERIFICATION_DETAIL_PENDINGAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_VERIFICATION_DETAIL_PENDINGResult>("EXEC @returnValue = [dbo].[Get_REF_VERIFICATION_DETAIL_PENDING]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_VERIFICATION_SUBTYPEResult>> Get_REF_VERIFICATION_SUBTYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_VERIFICATION_SUBTYPEResult>("EXEC @returnValue = [dbo].[Get_REF_VERIFICATION_SUBTYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_VERIFICATION_SUBTYPE_resourcesResult>> Get_REF_VERIFICATION_SUBTYPE_resourcesAsync(string CD_REF_VRFCTN_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_VRFCTN_SUBTYPE",
                    Size = 30,
                    Value = CD_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_VERIFICATION_SUBTYPE_resourcesResult>("EXEC @returnValue = [dbo].[Get_REF_VERIFICATION_SUBTYPE_resources] @CD_REF_VRFCTN_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_VERIFICATION_TYPEResult>> Get_REF_VERIFICATION_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_VERIFICATION_TYPEResult>("EXEC @returnValue = [dbo].[Get_REF_VERIFICATION_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_VOTERANSbyTypeResult>> Get_REF_VOTERANSbyTypeAsync(string TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TYPE",
                    Size = 1,
                    Value = TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_VOTERANSbyTypeResult>("EXEC @returnValue = [dbo].[Get_REF_VOTERANSbyType] @TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_WAIVE_ADVERSE_ACTIONResult>> Get_REF_WAIVE_ADVERSE_ACTIONAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_WAIVE_ADVERSE_ACTIONResult>("EXEC @returnValue = [dbo].[Get_REF_WAIVE_ADVERSE_ACTION]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_WELCOME_MESSAGEResult>> Get_REF_WELCOME_MESSAGEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_WELCOME_MESSAGEResult>("EXEC @returnValue = [dbo].[Get_REF_WELCOME_MESSAGE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REF_WORK_REG_CODEResult>> Get_REF_WORK_REG_CODEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REF_WORK_REG_CODEResult>("EXEC @returnValue = [dbo].[Get_REF_WORK_REG_CODE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REG_CASEResult>> Get_REG_CASEAsync(string FL_OLD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FL_OLD",
                    Size = 1,
                    Value = FL_OLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REG_CASEResult>("EXEC @returnValue = [dbo].[Get_REG_CASE] @FL_OLD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_REG_CASE_APPTSResult>> GET_REG_CASE_APPTSAsync(string COUNTY_SUBMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_REG_CASE_APPTSResult>("EXEC @returnValue = [dbo].[GET_REG_CASE_APPTS] @COUNTY_SUBMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_REG_CASE_APPTS_BY_IDCASEResult>> GET_REG_CASE_APPTS_BY_IDCASEAsync(string ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Size = 9,
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_REG_CASE_APPTS_BY_IDCASEResult>("EXEC @returnValue = [dbo].[GET_REG_CASE_APPTS_BY_IDCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_REG_CASE_APPTS_BY_NAMEResult>> GET_REG_CASE_APPTS_BY_NAMEAsync(string DHR_MEMBER_FIRST_NAME, string DHR_MEMBER_LAST_NAME, string COUNTY_SUBMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_FIRST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_LAST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_REG_CASE_APPTS_BY_NAMEResult>("EXEC @returnValue = [dbo].[GET_REG_CASE_APPTS_BY_NAME] @DHR_MEMBER_FIRST_NAME, @DHR_MEMBER_LAST_NAME, @COUNTY_SUBMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_REG_CASE_APPTS_BY_NOCASEResult>> GET_REG_CASE_APPTS_BY_NOCASEAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_REG_CASE_APPTS_BY_NOCASEResult>("EXEC @returnValue = [dbo].[GET_REG_CASE_APPTS_BY_NOCASE] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_REG_CASE_APPTS_BY_OFFCDResult>> GET_REG_CASE_APPTS_BY_OFFCDAsync(string COUNTY_SUBMIT, string COUNTY_OFFICE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_OFFICE",
                    Size = 2,
                    Value = COUNTY_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_REG_CASE_APPTS_BY_OFFCDResult>("EXEC @returnValue = [dbo].[GET_REG_CASE_APPTS_BY_OFFCD] @COUNTY_SUBMIT, @COUNTY_OFFICE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_REG_CASE_APPTS_BY_SSNResult>> GET_REG_CASE_APPTS_BY_SSNAsync(string SCI_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SCI_SSN",
                    Size = 9,
                    Value = SCI_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_REG_CASE_APPTS_BY_SSNResult>("EXEC @returnValue = [dbo].[GET_REG_CASE_APPTS_BY_SSN] @SCI_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_REG_CASE_APPTS_DENIALResult>> GET_REG_CASE_APPTS_DENIALAsync(string COUNTY_SUBMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_REG_CASE_APPTS_DENIALResult>("EXEC @returnValue = [dbo].[GET_REG_CASE_APPTS_DENIAL] @COUNTY_SUBMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REG_CASE_DENIALResult>> Get_REG_CASE_DENIALAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REG_CASE_DENIALResult>("EXEC @returnValue = [dbo].[Get_REG_CASE_DENIAL] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REG_CASE_INTERNETResult>> Get_REG_CASE_INTERNETAsync(string FL_OLD, string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FL_OLD",
                    Size = 1,
                    Value = FL_OLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REG_CASE_INTERNETResult>("EXEC @returnValue = [dbo].[Get_REG_CASE_INTERNET] @FL_OLD, @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_ADDRESS_COMPAREResult>> Get_REGISTER_ADDRESS_COMPAREAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_ADDRESS_COMPAREResult>("EXEC @returnValue = [dbo].[Get_REGISTER_ADDRESS_COMPARE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_APP_TO_SCIIIResult>> get_REGISTER_APP_TO_SCIIIAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_APP_TO_SCIIIResult>("EXEC @returnValue = [dbo].[get_REGISTER_APP_TO_SCIII] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_APPLICATIONResult>> get_REGISTER_APPLICATIONAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_APPLICATIONResult>("EXEC @returnValue = [dbo].[get_REGISTER_APPLICATION] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_APPLICATION_ByID_NEWCASEResult>> get_REGISTER_APPLICATION_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_APPLICATION_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[get_REGISTER_APPLICATION_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_APPLICATION_ByNameResult>> get_REGISTER_APPLICATION_ByNameAsync(string LNAME, string FNAME, string CASEN, string SSNIS, string CNTIS, string SELTYP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LNAME",
                    Size = 20,
                    Value = LNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FNAME",
                    Size = 20,
                    Value = FNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASEN",
                    Size = 9,
                    Value = CASEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SSNIS",
                    Size = 9,
                    Value = SSNIS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CNTIS",
                    Size = 2,
                    Value = CNTIS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SELTYP",
                    Size = 1,
                    Value = SELTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_APPLICATION_ByNameResult>("EXEC @returnValue = [dbo].[get_REGISTER_APPLICATION_ByName] @LNAME, @FNAME, @CASEN, @SSNIS, @CNTIS, @SELTYP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_APPLICATION_NOCASEResult>> get_REGISTER_APPLICATION_NOCASEAsync(int? NO_CASE, string APP_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "APP_TYPE",
                    Size = 3,
                    Value = APP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_APPLICATION_NOCASEResult>("EXEC @returnValue = [dbo].[get_REGISTER_APPLICATION_NOCASE] @NO_CASE, @APP_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_CHILD_SUPPORT_ByID_NEWCASEResult>> Get_REGISTER_CHILD_SUPPORT_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_CHILD_SUPPORT_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_CHILD_SUPPORT_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_CHILD_SUPPORT_ByNOCASEResult>> Get_REGISTER_CHILD_SUPPORT_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_CHILD_SUPPORT_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_CHILD_SUPPORT_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_DEPENDENT_CARE_ByID_NEWCASEResult>> Get_REGISTER_DEPENDENT_CARE_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_DEPENDENT_CARE_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_DEPENDENT_CARE_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_DEPENDENT_CARE_ByNOCASEResult>> Get_REGISTER_DEPENDENT_CARE_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_DEPENDENT_CARE_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_DEPENDENT_CARE_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_EMPLOY_ByID_NEWCASEResult>> Get_REGISTER_EMPLOY_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_EMPLOY_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_EMPLOY_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_EMPLOY_ByNOCASEResult>> Get_REGISTER_EMPLOY_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_EMPLOY_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_EMPLOY_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_FELON_ByID_NEWCASEResult>> Get_REGISTER_FELON_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_FELON_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_FELON_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_FELON_ByNOCASEResult>> Get_REGISTER_FELON_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_FELON_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_FELON_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_LIQUIDRESOURCE_ByID_NEWCASEResult>> Get_REGISTER_LIQUIDRESOURCE_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_LIQUIDRESOURCE_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_LIQUIDRESOURCE_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_LIQUIDRESOURCE_ByNOCASEResult>> Get_REGISTER_LIQUIDRESOURCE_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_LIQUIDRESOURCE_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_LIQUIDRESOURCE_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_MEDICALEXPENSE_ByID_NEWCASEResult>> Get_REGISTER_MEDICALEXPENSE_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_MEDICALEXPENSE_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_MEDICALEXPENSE_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_MEDICALEXPENSE_ByNOCASEResult>> Get_REGISTER_MEDICALEXPENSE_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_MEDICALEXPENSE_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_MEDICALEXPENSE_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_MEMBER_By_NOCASEResult>> get_REGISTER_MEMBER_By_NOCASEAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_MEMBER_By_NOCASEResult>("EXEC @returnValue = [dbo].[get_REGISTER_MEMBER_By_NOCASE] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_MEMBER_ByCaseResult>> get_REGISTER_MEMBER_ByCaseAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_MEMBER_ByCaseResult>("EXEC @returnValue = [dbo].[get_REGISTER_MEMBER_ByCase] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_MEMBER_ByID_NEWCASEResult>> get_REGISTER_MEMBER_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_MEMBER_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[get_REGISTER_MEMBER_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_MEMBER_ByID_NEWCASE_SSNResult>> get_REGISTER_MEMBER_ByID_NEWCASE_SSNAsync(int? ID_NEWCASE, string DHR_MEMBER_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SSN",
                    Size = 9,
                    Value = DHR_MEMBER_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_MEMBER_ByID_NEWCASE_SSNResult>("EXEC @returnValue = [dbo].[get_REGISTER_MEMBER_ByID_NEWCASE_SSN] @ID_NEWCASE, @DHR_MEMBER_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_MEMBERSResult>> get_REGISTER_MEMBERSAsync(int? ID_NEWMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_MEMBERSResult>("EXEC @returnValue = [dbo].[get_REGISTER_MEMBERS] @ID_NEWMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<get_REGISTER_MEMBERS_ByCaseResult>> get_REGISTER_MEMBERS_ByCaseAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<get_REGISTER_MEMBERS_ByCaseResult>("EXEC @returnValue = [dbo].[get_REGISTER_MEMBERS_ByCase] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_MIGRANTWORKER_ByNOCASEResult>> Get_REGISTER_MIGRANTWORKER_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_MIGRANTWORKER_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_MIGRANTWORKER_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_MIGRANTWORKER_ID_NEWCASEResult>> Get_REGISTER_MIGRANTWORKER_ID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_MIGRANTWORKER_ID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_MIGRANTWORKER_ID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_MULTIPLEHH_ByID_NEWCASEResult>> Get_REGISTER_MULTIPLEHH_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_MULTIPLEHH_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_MULTIPLEHH_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_MULTIPLEHH_ByNOCASEResult>> Get_REGISTER_MULTIPLEHH_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_MULTIPLEHH_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_MULTIPLEHH_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_PAROLE_ByID_NEWCASEResult>> Get_REGISTER_PAROLE_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_PAROLE_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_PAROLE_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_PAROLE_ByNOCASEResult>> Get_REGISTER_PAROLE_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_PAROLE_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_PAROLE_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_ROOMERBOARDER_ByID_NEWCASEResult>> Get_REGISTER_ROOMERBOARDER_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_ROOMERBOARDER_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_ROOMERBOARDER_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_ROOMERBOARDER_ByNOCASEResult>> Get_REGISTER_ROOMERBOARDER_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_ROOMERBOARDER_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_ROOMERBOARDER_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_SELFEMPLOY_ByID_NEWCASEResult>> Get_REGISTER_SELFEMPLOY_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_SELFEMPLOY_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_SELFEMPLOY_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_SELFEMPLOY_ByNOCASEResult>> Get_REGISTER_SELFEMPLOY_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_SELFEMPLOY_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_SELFEMPLOY_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_SHELTEREXPENSE_ByID_NEWCASEResult>> Get_REGISTER_SHELTEREXPENSE_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_SHELTEREXPENSE_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_SHELTEREXPENSE_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_SHELTEREXPENSE_ByNOCASEResult>> Get_REGISTER_SHELTEREXPENSE_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_SHELTEREXPENSE_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_SHELTEREXPENSE_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_SOU_ByNOCASEResult>> Get_REGISTER_SOU_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_SOU_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_SOU_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_SOU_ID_NEWCASEResult>> Get_REGISTER_SOU_ID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_SOU_ID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_SOU_ID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STFRAUD_ByID_NEWCASEResult>> Get_REGISTER_STFRAUD_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STFRAUD_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STFRAUD_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STFRAUD_ByNOCASEResult>> Get_REGISTER_STFRAUD_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STFRAUD_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STFRAUD_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STRIKER_ByID_NEWCASEResult>> Get_REGISTER_STRIKER_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STRIKER_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STRIKER_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STRIKER_ByNOCASEResult>> Get_REGISTER_STRIKER_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STRIKER_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STRIKER_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STTRAFFIC_ByID_NEWCASEResult>> Get_REGISTER_STTRAFFIC_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STTRAFFIC_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STTRAFFIC_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STTRAFFIC_ByNOCASEResult>> Get_REGISTER_STTRAFFIC_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STTRAFFIC_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STTRAFFIC_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STUDENT_ByID_NEWCASEResult>> Get_REGISTER_STUDENT_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STUDENT_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STUDENT_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STUDENT_ByNOCASEResult>> Get_REGISTER_STUDENT_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STUDENT_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STUDENT_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STWEAPONS_ByID_NEWCASEResult>> Get_REGISTER_STWEAPONS_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STWEAPONS_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STWEAPONS_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_STWEAPONS_ByNOCASEResult>> Get_REGISTER_STWEAPONS_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_STWEAPONS_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_STWEAPONS_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_UNEARNEDINCOME_ByID_NEWCASEResult>> Get_REGISTER_UNEARNEDINCOME_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_UNEARNEDINCOME_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_UNEARNEDINCOME_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_UNEARNEDINCOME_ByNOCASEResult>> Get_REGISTER_UNEARNEDINCOME_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_UNEARNEDINCOME_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_UNEARNEDINCOME_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_UTILITYEXPENSE_ByID_NEWCASEResult>> Get_REGISTER_UTILITYEXPENSE_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_UTILITYEXPENSE_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_UTILITYEXPENSE_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_UTILITYEXPENSE_ByNOCASEResult>> Get_REGISTER_UTILITYEXPENSE_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_UTILITYEXPENSE_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_UTILITYEXPENSE_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_VOLUNTARYQUIT_ByID_NEWCASEResult>> Get_REGISTER_VOLUNTARYQUIT_ByID_NEWCASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_VOLUNTARYQUIT_ByID_NEWCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_VOLUNTARYQUIT_ByID_NEWCASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REGISTER_VOLUNTARYQUIT_ByNOCASEResult>> Get_REGISTER_VOLUNTARYQUIT_ByNOCASEAsync(int? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REGISTER_VOLUNTARYQUIT_ByNOCASEResult>("EXEC @returnValue = [dbo].[Get_REGISTER_VOLUNTARYQUIT_ByNOCASE] @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Registration_FormResult>> Get_Registration_FormAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Registration_FormResult>("EXEC @returnValue = [dbo].[Get_Registration_Form] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Registration_Form_MembersResult>> Get_Registration_Form_MembersAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Registration_Form_MembersResult>("EXEC @returnValue = [dbo].[Get_Registration_Form_Members] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REJ_CLOResult>> Get_REJ_CLOAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REJ_CLOResult>("EXEC @returnValue = [dbo].[Get_REJ_CLO]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_REPORTINGResult>> Get_REPORTINGAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_REPORTINGResult>("EXEC @returnValue = [dbo].[Get_REPORTING]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RESOURCEResult>> Get_RESOURCEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RESOURCEResult>("EXEC @returnValue = [dbo].[Get_RESOURCE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RESOURCE_LIMIT_ByDescriptionResult>> Get_RESOURCE_LIMIT_ByDescriptionAsync(string RESOURCE_DESC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RESOURCE_DESC",
                    Size = 20,
                    Value = RESOURCE_DESC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RESOURCE_LIMIT_ByDescriptionResult>("EXEC @returnValue = [dbo].[Get_RESOURCE_LIMIT_ByDescription] @RESOURCE_DESC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RESOURCE_TFPResult>> Get_RESOURCE_TFPAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RESOURCE_TFPResult>("EXEC @returnValue = [dbo].[Get_RESOURCE_TFP] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RESTORATIONResult>> Get_RESTORATIONAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RESTORATIONResult>("EXEC @returnValue = [dbo].[Get_RESTORATION]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RmMealFlag_CASEResult>> Get_RmMealFlag_CASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RmMealFlag_CASEResult>("EXEC @returnValue = [dbo].[Get_RmMealFlag_CASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_ROOMResult>> Get_ROOMAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_ROOMResult>("EXEC @returnValue = [dbo].[Get_ROOM]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RoomerBoarderSummaryResult>> Get_RoomerBoarderSummaryAsync(int? IDCASENMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RoomerBoarderSummaryResult>("EXEC @returnValue = [dbo].[Get_RoomerBoarderSummary] @IDCASENMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RX_AVG_MNTHLYResult>> Get_RX_AVG_MNTHLYAsync(int? ID_MDCL_EXPNSE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNSE",
                    Value = ID_MDCL_EXPNSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RX_AVG_MNTHLYResult>("EXEC @returnValue = [dbo].[Get_RX_AVG_MNTHLY] @ID_MDCL_EXPNSE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RX_MEDL_EXP_ONGOINGResult>> Get_RX_MEDL_EXP_ONGOINGAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RX_MEDL_EXP_ONGOINGResult>("EXEC @returnValue = [dbo].[Get_RX_MEDL_EXP_ONGOING] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_RX_MEDL_EXP_ONGOING_BY_IDResult>> Get_RX_MEDL_EXP_ONGOING_BY_IDAsync(int? ID_ME_ONGOING, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ME_ONGOING",
                    Value = ID_ME_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_RX_MEDL_EXP_ONGOING_BY_IDResult>("EXEC @returnValue = [dbo].[Get_RX_MEDL_EXP_ONGOING_BY_ID] @ID_ME_ONGOING", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SANCTIONResult>> Get_SANCTIONAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SANCTIONResult>("EXEC @returnValue = [dbo].[Get_SANCTION]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SANCTION_END_NXTMTH_FAWResult>> Get_SANCTION_END_NXTMTH_FAWAsync(string strRunBy, DateTime? dtStartDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SANCTION_END_NXTMTH_FAWResult>("EXEC @returnValue = [dbo].[Get_SANCTION_END_NXTMTH_FAW] @strRunBy, @dtStartDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SANCTION_TYPE_TransResResult>> Get_SANCTION_TYPE_TransResAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SANCTION_TYPE_TransResResult>("EXEC @returnValue = [dbo].[Get_SANCTION_TYPE_TransRes]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SCI2_CASE_DATAResult>> Get_SCI2_CASE_DATAAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SCI2_CASE_DATAResult>("EXEC @returnValue = [dbo].[Get_SCI2_CASE_DATA]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SCI2_MMBR_DATAResult>> Get_SCI2_MMBR_DATAAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SCI2_MMBR_DATAResult>("EXEC @returnValue = [dbo].[Get_SCI2_MMBR_DATA]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SECUREResult>> Get_SECUREAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SECUREResult>("EXEC @returnValue = [dbo].[Get_SECURE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SECURITYResult>> Get_SECURITYAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SECURITYResult>("EXEC @returnValue = [dbo].[Get_SECURITY]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SECURITY_MAINResult>> Get_SECURITY_MAINAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SECURITY_MAINResult>("EXEC @returnValue = [dbo].[Get_SECURITY_MAIN]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SECURITY_ONLYResult>> Get_SECURITY_ONLYAsync(string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SECURITY_ONLYResult>("EXEC @returnValue = [dbo].[Get_SECURITY_ONLY] @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SECURITYByPayroll_MAINResult>> Get_SECURITYByPayroll_MAINAsync(string ID_Payroll, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_Payroll",
                    Size = 9,
                    Value = ID_Payroll ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SECURITYByPayroll_MAINResult>("EXEC @returnValue = [dbo].[Get_SECURITYByPayroll_MAIN] @ID_Payroll", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SELF_EMP_INC_SUMResult>> Get_SELF_EMP_INC_SUMAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SELF_EMP_INC_SUMResult>("EXEC @returnValue = [dbo].[Get_SELF_EMP_INC_SUM] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHELTER_EXPENSEResult>> Get_SHELTER_EXPENSEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHELTER_EXPENSEResult>("EXEC @returnValue = [dbo].[Get_SHELTER_EXPENSE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHELTER_EXPENSE_OTHER_PAYERResult>> Get_SHELTER_EXPENSE_OTHER_PAYERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHELTER_EXPENSE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[Get_SHELTER_EXPENSE_OTHER_PAYER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Shelter_RECORDResult>> Get_Shelter_RECORDAsync(int? ID_MMBR1, int? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Shelter_RECORDResult>("EXEC @returnValue = [dbo].[Get_Shelter_RECORD] @ID_MMBR1, @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Shelter_RECORD_EXPTYP_BYMMBRResult>> Get_Shelter_RECORD_EXPTYP_BYMMBRAsync(int? ID_MMBR1, int? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Shelter_RECORD_EXPTYP_BYMMBRResult>("EXEC @returnValue = [dbo].[Get_Shelter_RECORD_EXPTYP_BYMMBR] @ID_MMBR1, @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Shelter_RECORD2Result>> Get_Shelter_RECORD2Async(int? ID_MMBR1, int? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Shelter_RECORD2Result>("EXEC @returnValue = [dbo].[Get_Shelter_RECORD2] @ID_MMBR1, @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Shelter_RECORDBResult>> Get_Shelter_RECORDBAsync(int? ID_MMBR1, int? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Shelter_RECORDBResult>("EXEC @returnValue = [dbo].[Get_Shelter_RECORDB] @ID_MMBR1, @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_Shelter_RECORDB_IDResult>> Get_Shelter_RECORDB_IDAsync(int? ID_MMBR1, int? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_Shelter_RECORDB_IDResult>("EXEC @returnValue = [dbo].[Get_Shelter_RECORDB_ID] @ID_MMBR1, @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_EXP_ALLResult>> Get_SHLTR_EXP_ALLAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_EXP_ALLResult>("EXEC @returnValue = [dbo].[Get_SHLTR_EXP_ALL] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_EXP_ALL_IDMMBRResult>> Get_SHLTR_EXP_ALL_IDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_EXP_ALL_IDMMBRResult>("EXEC @returnValue = [dbo].[Get_SHLTR_EXP_ALL_IDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_EXP_BYIDMMBRResult>> Get_SHLTR_EXP_BYIDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_EXP_BYIDMMBRResult>("EXEC @returnValue = [dbo].[Get_SHLTR_EXP_BYIDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_EXPBYIDCASENOResult>> Get_SHLTR_EXPBYIDCASENOAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_EXPBYIDCASENOResult>("EXEC @returnValue = [dbo].[Get_SHLTR_EXPBYIDCASENO] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_EXPCASEResult>> Get_SHLTR_EXPCASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_EXPCASEResult>("EXEC @returnValue = [dbo].[Get_SHLTR_EXPCASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_NOTESResult>> Get_SHLTR_NOTESAsync(int? ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_NOTESResult>("EXEC @returnValue = [dbo].[Get_SHLTR_NOTES] @ID_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_RCRD_UNEARNResult>> Get_SHLTR_RCRD_UNEARNAsync(int? ID_MMBR, int? ID_SHLTR_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_RCRD_UNEARNResult>("EXEC @returnValue = [dbo].[Get_SHLTR_RCRD_UNEARN] @ID_MMBR, @ID_SHLTR_EXPNS_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SHLTR_RECORD_OTHERResult>> Get_SHLTR_RECORD_OTHERAsync(int? ID_MMBR, int? ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SHLTR_RECORD_OTHERResult>("EXEC @returnValue = [dbo].[Get_SHLTR_RECORD_OTHER] @ID_MMBR, @ID_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Get_SP_BusinessDaysAsync(DateTime? dtStartDate, DateTime? dtEndDate, int? indDaysInWeek, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "indDaysInWeek",
                    Value = indDaysInWeek ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Get_SP_BusinessDays] @dtStartDate, @dtEndDate, @indDaysInWeek", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SPECL_REOPN_BYFAWResult>> Get_SPECL_REOPN_BYFAWAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 15,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SPECL_REOPN_BYFAWResult>("EXEC @returnValue = [dbo].[Get_SPECL_REOPN_BYFAW] @strRunBy, @dtStartDate, @dtEndDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_status_casesResult>> Get_status_casesAsync(short? CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_status_casesResult>("EXEC @returnValue = [dbo].[Get_status_cases] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STRIKEResult>> Get_STRIKEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STRIKEResult>("EXEC @returnValue = [dbo].[Get_STRIKE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STRIKE_CDMTHResult>> Get_STRIKE_CDMTHAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STRIKE_CDMTHResult>("EXEC @returnValue = [dbo].[Get_STRIKE_CDMTH] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STRIKE_CDMTH1Result>> Get_STRIKE_CDMTH1Async(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STRIKE_CDMTH1Result>("EXEC @returnValue = [dbo].[Get_STRIKE_CDMTH1] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STRIKE_CDMTH2Result>> Get_STRIKE_CDMTH2Async(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STRIKE_CDMTH2Result>("EXEC @returnValue = [dbo].[Get_STRIKE_CDMTH2] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STRKR_IDResult>> Get_STRKR_IDAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STRKR_IDResult>("EXEC @returnValue = [dbo].[Get_STRKR_ID] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STTS_RPTResult>> Get_STTS_RPTAsync(DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 3,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STTS_RPTResult>("EXEC @returnValue = [dbo].[Get_STTS_RPT] @dtStartDate, @dtEndDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STUDENTResult>> Get_STUDENTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STUDENTResult>("EXEC @returnValue = [dbo].[Get_STUDENT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STUDENT_CDMTHResult>> Get_STUDENT_CDMTHAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STUDENT_CDMTHResult>("EXEC @returnValue = [dbo].[Get_STUDENT_CDMTH] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STUDENT_CDMTH1Result>> Get_STUDENT_CDMTH1Async(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STUDENT_CDMTH1Result>("EXEC @returnValue = [dbo].[Get_STUDENT_CDMTH1] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STUDENT_CDMTH2Result>> Get_STUDENT_CDMTH2Async(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STUDENT_CDMTH2Result>("EXEC @returnValue = [dbo].[Get_STUDENT_CDMTH2] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_STUDENT_IDResult>> Get_STUDENT_IDAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_STUDENT_IDResult>("EXEC @returnValue = [dbo].[Get_STUDENT_ID] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumAwardDenyDataResult>> Get_SumAwardDenyDataAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumAwardDenyDataResult>("EXEC @returnValue = [dbo].[Get_SumAwardDenyData] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumChildSupportIncomeResult>> Get_SumChildSupportIncomeAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumChildSupportIncomeResult>("EXEC @returnValue = [dbo].[Get_SumChildSupportIncome] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumEarnedIncomeDataResult>> Get_SumEarnedIncomeDataAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumEarnedIncomeDataResult>("EXEC @returnValue = [dbo].[Get_SumEarnedIncomeData] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumPropertyExpenseResult>> Get_SumPropertyExpenseAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumPropertyExpenseResult>("EXEC @returnValue = [dbo].[Get_SumPropertyExpense] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUIdata_SSISSA_ColaResult>> Get_SumUIdata_SSISSA_ColaAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUIdata_SSISSA_ColaResult>("EXEC @returnValue = [dbo].[Get_SumUIdata_SSISSA_Cola] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUnearnedIncome_CountableMemsResult>> Get_SumUnearnedIncome_CountableMemsAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUnearnedIncome_CountableMemsResult>("EXEC @returnValue = [dbo].[Get_SumUnearnedIncome_CountableMems] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUnearnedIncomeDataResult>> Get_SumUnearnedIncomeDataAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUnearnedIncomeDataResult>("EXEC @returnValue = [dbo].[Get_SumUnearnedIncomeData] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUnearnedIncomeData_ALLResult>> Get_SumUnearnedIncomeData_ALLAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUnearnedIncomeData_ALLResult>("EXEC @returnValue = [dbo].[Get_SumUnearnedIncomeData_ALL] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUnearnedIncomeData_SSAResult>> Get_SumUnearnedIncomeData_SSAAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUnearnedIncomeData_SSAResult>("EXEC @returnValue = [dbo].[Get_SumUnearnedIncomeData_SSA] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUnearnedIncomeData_SSIResult>> Get_SumUnearnedIncomeData_SSIAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUnearnedIncomeData_SSIResult>("EXEC @returnValue = [dbo].[Get_SumUnearnedIncomeData_SSI] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUnearnedIncomeData_TANFResult>> Get_SumUnearnedIncomeData_TANFAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUnearnedIncomeData_TANFResult>("EXEC @returnValue = [dbo].[Get_SumUnearnedIncomeData_TANF] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUnearnedIncomeData_VAResult>> Get_SumUnearnedIncomeData_VAAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUnearnedIncomeData_VAResult>("EXEC @returnValue = [dbo].[Get_SumUnearnedIncomeData_VA] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SumUtilitiesResult>> Get_SumUtilitiesAsync(int? ID_CASE_NMBR, string SQLTYPE, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SumUtilitiesResult>("EXEC @returnValue = [dbo].[Get_SumUtilities] @ID_CASE_NMBR, @SQLTYPE, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SYNC_CASE_NOTESResult>> Get_SYNC_CASE_NOTESAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 3,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SYNC_CASE_NOTESResult>("EXEC @returnValue = [dbo].[Get_SYNC_CASE_NOTES] @strRunBy, @dtStartDate, @dtEndDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_SYNC_ERRORSResult>> Get_SYNC_ERRORSAsync(string strRunBy, DateTime? dtStartDate, DateTime? dtEndDate, string strCounty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strRunBy",
                    Value = strRunBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "dtStartDate",
                    Value = dtStartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dtEndDate",
                    Value = dtEndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "strCounty",
                    Size = 3,
                    Value = strCounty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_SYNC_ERRORSResult>("EXEC @returnValue = [dbo].[Get_SYNC_ERRORS] @strRunBy, @dtStartDate, @dtEndDate, @strCounty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_T_EligMembersResult>> Get_T_EligMembersAsync(int? IDCASENMBR, string ALLOT_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ALLOT_TYPE",
                    Size = 1,
                    Value = ALLOT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_T_EligMembersResult>("EXEC @returnValue = [dbo].[Get_T_EligMembers] @IDCASENMBR, @ALLOT_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_TANF_MMBR_INCLUDEDResult>> Get_TANF_MMBR_INCLUDEDAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_TANF_MMBR_INCLUDEDResult>("EXEC @returnValue = [dbo].[Get_TANF_MMBR_INCLUDED]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_TotIncAmt_EmpResult>> Get_TotIncAmt_EmpAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_TotIncAmt_EmpResult>("EXEC @returnValue = [dbo].[Get_TotIncAmt_Emp] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_TRIPResult>> Get_TRIPAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_TRIPResult>("EXEC @returnValue = [dbo].[Get_TRIP]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_TRIP_MED_EXPResult>> Get_TRIP_MED_EXPAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_TRIP_MED_EXPResult>("EXEC @returnValue = [dbo].[Get_TRIP_MED_EXP] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UNEARN_INC_INC_SUMResult>> Get_UNEARN_INC_INC_SUMAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UNEARN_INC_INC_SUMResult>("EXEC @returnValue = [dbo].[Get_UNEARN_INC_INC_SUM] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_UNEARNED_ID_STRIKEResult>> GET_UNEARNED_ID_STRIKEAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_UNEARNED_ID_STRIKEResult>("EXEC @returnValue = [dbo].[GET_UNEARNED_ID_STRIKE] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UNEARNED_INCOMEResult>> Get_UNEARNED_INCOMEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UNEARNED_INCOMEResult>("EXEC @returnValue = [dbo].[Get_UNEARNED_INCOME]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UNEARNED_INCOME_PAPenaltyResult>> Get_UNEARNED_INCOME_PAPenaltyAsync(int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UNEARNED_INCOME_PAPenaltyResult>("EXEC @returnValue = [dbo].[Get_UNEARNED_INCOME_PAPenalty] @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_UNEARNED_INCOME_STRIKEResult>> GET_UNEARNED_INCOME_STRIKEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_UNEARNED_INCOME_STRIKEResult>("EXEC @returnValue = [dbo].[GET_UNEARNED_INCOME_STRIKE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UNEARNED_PAYERResult>> Get_UNEARNED_PAYERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UNEARNED_PAYERResult>("EXEC @returnValue = [dbo].[Get_UNEARNED_PAYER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UNEARNED_PAYER_byID_UNERND_INCMResult>> Get_UNEARNED_PAYER_byID_UNERND_INCMAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UNEARNED_PAYER_byID_UNERND_INCMResult>("EXEC @returnValue = [dbo].[Get_UNEARNED_PAYER_byID_UNERND_INCM] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GET_UNEARNEDINCSUBTYPEResult>> GET_UNEARNEDINCSUBTYPEAsync(decimal? ID_REF_UNERND_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Precision = 2,
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GET_UNEARNEDINCSUBTYPEResult>("EXEC @returnValue = [dbo].[GET_UNEARNEDINCSUBTYPE] @ID_REF_UNERND_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UNEARNEDTYPEBYIDCASENOResult>> Get_UNEARNEDTYPEBYIDCASENOAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UNEARNEDTYPEBYIDCASENOResult>("EXEC @returnValue = [dbo].[Get_UNEARNEDTYPEBYIDCASENO] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UnearnedTypebyIDMmbrResult>> Get_UnearnedTypebyIDMmbrAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UnearnedTypebyIDMmbrResult>("EXEC @returnValue = [dbo].[Get_UnearnedTypebyIDMmbr] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UPDATE_NOTICE_TYPEResult>> Get_UPDATE_NOTICE_TYPEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UPDATE_NOTICE_TYPEResult>("EXEC @returnValue = [dbo].[Get_UPDATE_NOTICE_TYPE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTILITY_EXPENSEResult>> Get_UTILITY_EXPENSEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTILITY_EXPENSEResult>("EXEC @returnValue = [dbo].[Get_UTILITY_EXPENSE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTILITY_EXPENSE_OTHER_PAYERResult>> Get_UTILITY_EXPENSE_OTHER_PAYERAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTILITY_EXPENSE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[Get_UTILITY_EXPENSE_OTHER_PAYER]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_CDMTHResult>> Get_UTLTY_CDMTHAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_CDMTHResult>("EXEC @returnValue = [dbo].[Get_UTLTY_CDMTH] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_EXP_ALL_IDCASEResult>> Get_UTLTY_EXP_ALL_IDCASEAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_EXP_ALL_IDCASEResult>("EXEC @returnValue = [dbo].[Get_UTLTY_EXP_ALL_IDCASE] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_EXP_ALL_IDMMBRResult>> Get_UTLTY_EXP_ALL_IDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_EXP_ALL_IDMMBRResult>("EXEC @returnValue = [dbo].[Get_UTLTY_EXP_ALL_IDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_EXP_BYCDResult>> Get_UTLTY_EXP_BYCDAsync(string CD_UTLTY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_UTLTY_TYPE",
                    Value = CD_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_EXP_BYCDResult>("EXEC @returnValue = [dbo].[Get_UTLTY_EXP_BYCD] @CD_UTLTY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_EXP_BYIDResult>> Get_UTLTY_EXP_BYIDAsync(int? ID_UTLTY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_EXP_BYIDResult>("EXEC @returnValue = [dbo].[Get_UTLTY_EXP_BYID] @ID_UTLTY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_RECORDResult>> Get_UTLTY_RECORDAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_RECORDResult>("EXEC @returnValue = [dbo].[Get_UTLTY_RECORD] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_RECORD_OTHERResult>> Get_UTLTY_RECORD_OTHERAsync(int? ID_MMBR, int? ID_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_RECORD_OTHERResult>("EXEC @returnValue = [dbo].[Get_UTLTY_RECORD_OTHER] @ID_MMBR, @ID_UTLTY_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_RECORD2Result>> Get_UTLTY_RECORD2Async(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_RECORD2Result>("EXEC @returnValue = [dbo].[Get_UTLTY_RECORD2] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLTY_RECORDBResult>> Get_UTLTY_RECORDBAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLTY_RECORDBResult>("EXEC @returnValue = [dbo].[Get_UTLTY_RECORDB] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_UTLYT_EXPNS_UNEARN_RECORDResult>> Get_UTLYT_EXPNS_UNEARN_RECORDAsync(int? ID_MMBR, int? ID_UTLTY_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_UTLYT_EXPNS_UNEARN_RECORDResult>("EXEC @returnValue = [dbo].[Get_UTLYT_EXPNS_UNEARN_RECORD] @ID_MMBR, @ID_UTLTY_EXPNS_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERFCATON_MMBRSResult>> Get_VERFCATON_MMBRSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERFCATON_MMBRSResult>("EXEC @returnValue = [dbo].[Get_VERFCATON_MMBRS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_ALL_BYIDCASEResult>> Get_VERIFICATIONS_ALL_BYIDCASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_ALL_BYIDCASEResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_ALL_BYIDCASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_ALL_BYIDCASE_TESTResult>> Get_VERIFICATIONS_ALL_BYIDCASE_TESTAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_ALL_BYIDCASE_TESTResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_ALL_BYIDCASE_TEST] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_BY_IDCASEResult>> Get_VERIFICATIONS_BY_IDCASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_BY_IDCASEResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_BY_IDCASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_CASEResult>> Get_VERIFICATIONS_CASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_CASEResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_CASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_COURT_ORDResult>> Get_VERIFICATIONS_COURT_ORDAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_COURT_ORDResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_COURT_ORD] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_FASTATResult>> Get_VERIFICATIONS_FASTATAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_FASTATResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_FASTAT] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_INSRNCResult>> Get_VERIFICATIONS_INSRNCAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_INSRNCResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_INSRNC] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_RSCRResult>> Get_VERIFICATIONS_RSCRAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_RSCRResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_RSCR] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VERIFICATIONS_STRIKEResult>> Get_VERIFICATIONS_STRIKEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VERIFICATIONS_STRIKEResult>("EXEC @returnValue = [dbo].[Get_VERIFICATIONS_STRIKE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTM_CASE_CRYSTLRPRTResult>> Get_VRFCTM_CASE_CRYSTLRPRTAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTM_CASE_CRYSTLRPRTResult>("EXEC @returnValue = [dbo].[Get_VRFCTM_CASE_CRYSTLRPRT] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_BYIDResult>> Get_VRFCTNS_BYIDAsync(int? ID_VRFCTN_DETAIL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DETAIL",
                    Value = ID_VRFCTN_DETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_BYIDResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_BYID] @ID_VRFCTN_DETAIL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_CASEResult>> Get_VRFCTNS_CASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue", 
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_CASEResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_CASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_CASE_ALLResult>> Get_VRFCTNS_CASE_ALLAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_CASE_ALLResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_CASE_ALL] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_CASE_ALL_07_08_2009Result>> Get_VRFCTNS_CASE_ALL_07_08_2009Async(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_CASE_ALL_07_08_2009Result>("EXEC @returnValue = [dbo].[Get_VRFCTNS_CASE_ALL_07_08_2009] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_CASE_ALL_BWResult>> Get_VRFCTNS_CASE_ALL_BWAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_CASE_ALL_BWResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_CASE_ALL_BW] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_DATESResult>> Get_VRFCTNS_DATESAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_DATESResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_DATES] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_EXPENSESResult>> Get_VRFCTNS_EXPENSESAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_EXPENSESResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_EXPENSES] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_EXPENSES_07_08_2009Result>> Get_VRFCTNS_EXPENSES_07_08_2009Async(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_EXPENSES_07_08_2009Result>("EXEC @returnValue = [dbo].[Get_VRFCTNS_EXPENSES_07_08_2009] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_REF_RSRCResult>> Get_VRFCTNS_REF_RSRCAsync(int? ID_RSRC_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_REF_RSRCResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_REF_RSRC] @ID_RSRC_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_UNEARNResult>> Get_VRFCTNS_UNEARNAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_UNEARNResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_UNEARN] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_UNEARN_07_08_2009Result>> Get_VRFCTNS_UNEARN_07_08_2009Async(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_UNEARN_07_08_2009Result>("EXEC @returnValue = [dbo].[Get_VRFCTNS_UNEARN_07_08_2009] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_VRFCTNS_UNERN_BY_IDCASEResult>> Get_VRFCTNS_UNERN_BY_IDCASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_VRFCTNS_UNERN_BY_IDCASEResult>("EXEC @returnValue = [dbo].[Get_VRFCTNS_UNERN_BY_IDCASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WAIVE_ADVERSE_ACTIONResult>> Get_WAIVE_ADVERSE_ACTIONAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WAIVE_ADVERSE_ACTIONResult>("EXEC @returnValue = [dbo].[Get_WAIVE_ADVERSE_ACTION] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WELCOME_MESSAGE_ALLResult>> Get_WELCOME_MESSAGE_ALLAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WELCOME_MESSAGE_ALLResult>("EXEC @returnValue = [dbo].[Get_WELCOME_MESSAGE_ALL] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WELCOME_MESSAGE_BYCNTYResult>> Get_WELCOME_MESSAGE_BYCNTYAsync(string ID_MSSG_CNTY, DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MSSG_CNTY",
                    Size = 2,
                    Value = ID_MSSG_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WELCOME_MESSAGE_BYCNTYResult>("EXEC @returnValue = [dbo].[Get_WELCOME_MESSAGE_BYCNTY] @ID_MSSG_CNTY, @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WORKER_REMINDERSResult>> Get_WORKER_REMINDERSAsync(short? Cnty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Cnty",
                    Value = Cnty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WORKER_REMINDERSResult>("EXEC @returnValue = [dbo].[Get_WORKER_REMINDERS] @Cnty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WORKER_REMINDERS_BY_USERResult>> Get_WORKER_REMINDERS_BY_USERAsync(string ID_USER, short? Cnty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "Cnty",
                    Value = Cnty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WORKER_REMINDERS_BY_USERResult>("EXEC @returnValue = [dbo].[Get_WORKER_REMINDERS_BY_USER] @ID_USER, @Cnty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WORKER_REMINDERS_DATESResult>> Get_WORKER_REMINDERS_DATESAsync(DateTime? firstDate, DateTime? lastdate, int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "firstDate",
                    Value = firstDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "lastdate",
                    Value = lastdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WORKER_REMINDERS_DATESResult>("EXEC @returnValue = [dbo].[Get_WORKER_REMINDERS_DATES] @firstDate, @lastdate, @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Get_WorkflowCountAsync(int? nocase, OutputParameter<int?> countofcases, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametercountofcases = new SqlParameter
            {
                ParameterName = "countofcases",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = countofcases?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nocase",
                    Value = nocase ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametercountofcases,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Get_WorkflowCount] @nocase, @countofcases OUTPUT", sqlParameters, cancellationToken);

            countofcases.SetValue(parametercountofcases.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WORKREGCODE_MEMBERResult>> Get_WORKREGCODE_MEMBERAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WORKREGCODE_MEMBERResult>("EXEC @returnValue = [dbo].[Get_WORKREGCODE_MEMBER] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Get_WRKR_RMNDRSResult>> Get_WRKR_RMNDRSAsync(short? Cnty, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Cnty",
                    Value = Cnty ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_WRKR_RMNDRSResult>("EXEC @returnValue = [dbo].[Get_WRKR_RMNDRS] @Cnty", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetABAWDsResult>> GetABAWDsAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetABAWDsResult>("EXEC @returnValue = [dbo].[GetABAWDs] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllCases_ADVERSE_ACTION_REMINDERSResult>> GetAllCases_ADVERSE_ACTION_REMINDERSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllCases_ADVERSE_ACTION_REMINDERSResult>("EXEC @returnValue = [dbo].[GetAllCases_ADVERSE_ACTION_REMINDERS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllEmployersResult>> GetAllEmployersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllEmployersResult>("EXEC @returnValue = [dbo].[GetAllEmployers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllEmployersByCountyResult>> GetAllEmployersByCountyAsync(int? CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllEmployersByCountyResult>("EXEC @returnValue = [dbo].[GetAllEmployersByCounty] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetArByIDCaseNmbr_AR_RPRSNTTVResult>> GetArByIDCaseNmbr_AR_RPRSNTTVAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetArByIDCaseNmbr_AR_RPRSNTTVResult>("EXEC @returnValue = [dbo].[GetArByIDCaseNmbr_AR_RPRSNTTV] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBy_IdRefVrfctnType_SUBTYPEResult>> GetBy_IdRefVrfctnType_SUBTYPEAsync(decimal? ID_REF_VRFCTN_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_TYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBy_IdRefVrfctnType_SUBTYPEResult>("EXEC @returnValue = [dbo].[GetBy_IdRefVrfctnType_SUBTYPE] @ID_REF_VRFCTN_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCase_ADVERSE_ACTION_REMINDERResult>> GetByCase_ADVERSE_ACTION_REMINDERAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCase_ADVERSE_ACTION_REMINDERResult>("EXEC @returnValue = [dbo].[GetByCase_ADVERSE_ACTION_REMINDER] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getByCase_CASE_WORKFLOWResult>> getByCase_CASE_WORKFLOWAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getByCase_CASE_WORKFLOWResult>("EXEC @returnValue = [dbo].[getByCase_CASE_WORKFLOW] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getByCaseAndFlow_CASE_WORKFLOWResult>> getByCaseAndFlow_CASE_WORKFLOWAsync(int? NO_CASE, string CD_REF_MODULE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_MODULE",
                    Size = 5,
                    Value = CD_REF_MODULE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getByCaseAndFlow_CASE_WORKFLOWResult>("EXEC @returnValue = [dbo].[getByCaseAndFlow_CASE_WORKFLOW] @NO_CASE, @CD_REF_MODULE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCaseIDCrtOrdrAmntID_COURT_ORDERD_AMOUNTResult>> GetByCaseIDCrtOrdrAmntID_COURT_ORDERD_AMOUNTAsync(int? ID_CASE_NMBR, int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCaseIDCrtOrdrAmntID_COURT_ORDERD_AMOUNTResult>("EXEC @returnValue = [dbo].[GetByCaseIDCrtOrdrAmntID_COURT_ORDERD_AMOUNT] @ID_CASE_NMBR, @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCaseNbr_AR_RPRSNTTVResult>> GetByCaseNbr_AR_RPRSNTTVAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCaseNbr_AR_RPRSNTTVResult>("EXEC @returnValue = [dbo].[GetByCaseNbr_AR_RPRSNTTV] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCaseNo_MMBR_WORKREG_AND_CERTELIGResult>> GetByCaseNo_MMBR_WORKREG_AND_CERTELIGAsync(int? ID_CASE_NMBR, string CD_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 2,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCaseNo_MMBR_WORKREG_AND_CERTELIGResult>("EXEC @returnValue = [dbo].[GetByCaseNo_MMBR_WORKREG_AND_CERTELIG] @ID_CASE_NMBR, @CD_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbYCaseNo_WORKER_REMINDERSResult>> GetbYCaseNo_WORKER_REMINDERSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbYCaseNo_WORKER_REMINDERSResult>("EXEC @returnValue = [dbo].[GetbYCaseNo_WORKER_REMINDERS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCaseNumber_CASEResult>> GetByCaseNumber_CASEAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCaseNumber_CASEResult>("EXEC @returnValue = [dbo].[GetByCaseNumber_CASE] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCaseNumber_CASEOnlyResult>> GetByCaseNumber_CASEOnlyAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCaseNumber_CASEOnlyResult>("EXEC @returnValue = [dbo].[GetByCaseNumber_CASEOnly] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCaseNumber_ContactInfoResult>> GetByCaseNumber_ContactInfoAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCaseNumber_ContactInfoResult>("EXEC @returnValue = [dbo].[GetByCaseNumber_ContactInfo] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCd_REF_NOTICE_TYPEResult>> GetByCd_REF_NOTICE_TYPEAsync(string CD_REF_NTC_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_NTC_TYPE",
                    Size = 1,
                    Value = CD_REF_NTC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCd_REF_NOTICE_TYPEResult>("EXEC @returnValue = [dbo].[GetByCd_REF_NOTICE_TYPE] @CD_REF_NTC_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCdCaseSttsType_REF_CASE_STATUS_TYPEResult>> GetByCdCaseSttsType_REF_CASE_STATUS_TYPEAsync(string CD_CASE_STTS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CASE_STTS_TYPE",
                    Size = 2,
                    Value = CD_CASE_STTS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCdCaseSttsType_REF_CASE_STATUS_TYPEResult>("EXEC @returnValue = [dbo].[GetByCdCaseSttsType_REF_CASE_STATUS_TYPE] @CD_CASE_STTS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCDCnty_REF_CountyResult>> GetByCDCnty_REF_CountyAsync(string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCDCnty_REF_CountyResult>("EXEC @returnValue = [dbo].[GetByCDCnty_REF_County] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCdCnty_SECURITYResult>> GetByCdCnty_SECURITYAsync(string CD_CNTY, string CD_CNTY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_DSCR",
                    Size = 15,
                    Value = CD_CNTY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCdCnty_SECURITYResult>("EXEC @returnValue = [dbo].[GetByCdCnty_SECURITY] @CD_CNTY, @CD_CNTY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCDCntyDscrp_REF_CountyResult>> GetByCDCntyDscrp_REF_CountyAsync(string CD_CNTY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_DSCR",
                    Size = 15,
                    Value = CD_CNTY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCDCntyDscrp_REF_CountyResult>("EXEC @returnValue = [dbo].[GetByCDCntyDscrp_REF_County] @CD_CNTY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCdHomeCnty_SECURITYResult>> GetByCdHomeCnty_SECURITYAsync(string CD_CNTY, string CD_CNTY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_DSCR",
                    Size = 15,
                    Value = CD_CNTY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCdHomeCnty_SECURITYResult>("EXEC @returnValue = [dbo].[GetByCdHomeCnty_SECURITY] @CD_CNTY, @CD_CNTY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCDMssgType_REF_MESSAGEResult>> GetByCDMssgType_REF_MESSAGEAsync(string CD_MSSG_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_MSSG_TYPE",
                    Size = 2,
                    Value = CD_MSSG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCDMssgType_REF_MESSAGEResult>("EXEC @returnValue = [dbo].[GetByCDMssgType_REF_MESSAGE] @CD_MSSG_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCdRefAddrssType_REF_ADDRESS_TYPEResult>> GetByCdRefAddrssType_REF_ADDRESS_TYPEAsync(string CD_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_ADDRSS_TYPE",
                    Size = 15,
                    Value = CD_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCdRefAddrssType_REF_ADDRESS_TYPEResult>("EXEC @returnValue = [dbo].[GetByCdRefAddrssType_REF_ADDRESS_TYPE] @CD_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<getByCDREFMODULE_REF_OACIS_MODULEResult>> getByCDREFMODULE_REF_OACIS_MODULEAsync(string CD_REF_MODULE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_MODULE",
                    Size = 5,
                    Value = CD_REF_MODULE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<getByCDREFMODULE_REF_OACIS_MODULEResult>("EXEC @returnValue = [dbo].[getByCDREFMODULE_REF_OACIS_MODULE] @CD_REF_MODULE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyCdRjctnClsr_REF_RJCTN_DNL_TERMResult>> GetbyCdRjctnClsr_REF_RJCTN_DNL_TERMAsync(string CD_RJCTN_CLSR, string CD_DENIAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DENIAL",
                    Size = 2,
                    Value = CD_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyCdRjctnClsr_REF_RJCTN_DNL_TERMResult>("EXEC @returnValue = [dbo].[GetbyCdRjctnClsr_REF_RJCTN_DNL_TERM] @CD_RJCTN_CLSR, @CD_DENIAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyCdRjctnTerm_REF_RJCTN_DNL_TERMResult>> GetbyCdRjctnTerm_REF_RJCTN_DNL_TERMAsync(string CD_RJCTN_CLSR, string CD_TERM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TERM",
                    Size = 2,
                    Value = CD_TERM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyCdRjctnTerm_REF_RJCTN_DNL_TERMResult>("EXEC @returnValue = [dbo].[GetbyCdRjctnTerm_REF_RJCTN_DNL_TERM] @CD_RJCTN_CLSR, @CD_TERM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCDState_REF_STATEResult>> GetByCDState_REF_STATEAsync(string CD_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_STATE",
                    Size = 2,
                    Value = CD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCDState_REF_STATEResult>("EXEC @returnValue = [dbo].[GetByCDState_REF_STATE] @CD_STATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCdUnerndType_REF_UNEARNED_SUBTYPEResult>> GetByCdUnerndType_REF_UNEARNED_SUBTYPEAsync(string CD_UNERND_SUBTYPE, string INCOME_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_UNERND_SUBTYPE",
                    Size = 1,
                    Value = CD_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "INCOME_TYPE",
                    Size = 8,
                    Value = INCOME_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCdUnerndType_REF_UNEARNED_SUBTYPEResult>("EXEC @returnValue = [dbo].[GetByCdUnerndType_REF_UNEARNED_SUBTYPE] @CD_UNERND_SUBTYPE, @INCOME_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCertElig_REF_CERT_ELIGResult>> GetByCertElig_REF_CERT_ELIGAsync(string CERTELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CERTELIG",
                    Size = 1,
                    Value = CERTELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCertElig_REF_CERT_ELIGResult>("EXEC @returnValue = [dbo].[GetByCertElig_REF_CERT_ELIG] @CERTELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCode_REF_DENIAL_CODESResult>> GetByCode_REF_DENIAL_CODESAsync(decimal? CD_DENIAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_DENIAL",
                    Precision = 2,
                    Value = CD_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCode_REF_DENIAL_CODESResult>("EXEC @returnValue = [dbo].[GetByCode_REF_DENIAL_CODES] @CD_DENIAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCode_REF_PAST_DUE_RSNResult>> GetByCode_REF_PAST_DUE_RSNAsync(string CD_PAST_DUE_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCode_REF_PAST_DUE_RSNResult>("EXEC @returnValue = [dbo].[GetByCode_REF_PAST_DUE_RSN] @CD_PAST_DUE_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCode_REF_RESOURCE_TYPEResult>> GetByCode_REF_RESOURCE_TYPEAsync(string CD_RSRC_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE",
                    Size = 2,
                    Value = CD_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCode_REF_RESOURCE_TYPEResult>("EXEC @returnValue = [dbo].[GetByCode_REF_RESOURCE_TYPE] @CD_RSRC_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCode_REF_SPCL_REOPEN_RSNResult>> GetByCode_REF_SPCL_REOPEN_RSNAsync(string CD_SPCL_REOPEN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_SPCL_REOPEN_RSN",
                    Size = 2,
                    Value = CD_SPCL_REOPEN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCode_REF_SPCL_REOPEN_RSNResult>("EXEC @returnValue = [dbo].[GetByCode_REF_SPCL_REOPEN_RSN] @CD_SPCL_REOPEN_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCode_REF_UNEARNED_PAYER_TYPEResult>> GetByCode_REF_UNEARNED_PAYER_TYPEAsync(string CD_REF_UNERND_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_UNERND_PAYER",
                    Size = 2,
                    Value = CD_REF_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCode_REF_UNEARNED_PAYER_TYPEResult>("EXEC @returnValue = [dbo].[GetByCode_REF_UNEARNED_PAYER_TYPE] @CD_REF_UNERND_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCodeWork_REF_WORK_REG_CODEResult>> GetByCodeWork_REF_WORK_REG_CODEAsync(string CD_WORK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_WORK",
                    Size = 1,
                    Value = CD_WORK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCodeWork_REF_WORK_REG_CODEResult>("EXEC @returnValue = [dbo].[GetByCodeWork_REF_WORK_REG_CODE] @CD_WORK", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCounty_REF_WELCOME_MESSAGEResult>> GetByCounty_REF_WELCOME_MESSAGEAsync(short? ID_MSSG_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MSSG_CNTY",
                    Value = ID_MSSG_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCounty_REF_WELCOME_MESSAGEResult>("EXEC @returnValue = [dbo].[GetByCounty_REF_WELCOME_MESSAGE] @ID_MSSG_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByCountyID_REF_WELCOME_MESSAGEResult>> GetByCountyID_REF_WELCOME_MESSAGEAsync(string ID_MSSG_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MSSG_CNTY",
                    Size = 2,
                    Value = ID_MSSG_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByCountyID_REF_WELCOME_MESSAGEResult>("EXEC @returnValue = [dbo].[GetByCountyID_REF_WELCOME_MESSAGE] @ID_MSSG_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByHHSize_REF_TFP_LIMITResult>> GetByHHSize_REF_TFP_LIMITAsync(int? NO_HH_SIZE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_HH_SIZE",
                    Value = NO_HH_SIZE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByHHSize_REF_TFP_LIMITResult>("EXEC @returnValue = [dbo].[GetByHHSize_REF_TFP_LIMIT] @NO_HH_SIZE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByID_MMBR_ALIEN_STATUSResult>> GetByID_MMBR_ALIEN_STATUSAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByID_MMBR_ALIEN_STATUSResult>("EXEC @returnValue = [dbo].[GetByID_MMBR_ALIEN_STATUS] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_ADVRS_GUARD_CASE_STATUSResult>> GetByIdCaseNmbr_ADVRS_GUARD_CASE_STATUSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_ADVRS_GUARD_CASE_STATUSResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_ADVRS_GUARD_CASE_STATUS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_andAge_MEMBERResult>> GetByIdCaseNmbr_andAge_MEMBERAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_andAge_MEMBERResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_andAge_MEMBER] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_AR_RPRSNTTVResult>> GetbyIdCaseNmbr_AR_RPRSNTTVAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_AR_RPRSNTTVResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_AR_RPRSNTTV] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_AR_RPRSNTTV_AwardDenyResult>> GetbyIdCaseNmbr_AR_RPRSNTTV_AwardDenyAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_AR_RPRSNTTV_AwardDenyResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_AR_RPRSNTTV_AwardDeny] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_AR_RPRSNTTV_EBTResult>> GetbyIdCaseNmbr_AR_RPRSNTTV_EBTAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_AR_RPRSNTTV_EBTResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_AR_RPRSNTTV_EBT] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_AR_RPRSNTTV_INTRVWResult>> GetbyIdCaseNmbr_AR_RPRSNTTV_INTRVWAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_AR_RPRSNTTV_INTRVWResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_AR_RPRSNTTV_INTRVW] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_CASEResult>> GetbyIdCaseNmbr_CASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_CASEResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_CASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_CASE_AwardDenyResult>> GetbyIdCaseNmbr_CASE_AwardDenyAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_CASE_AwardDenyResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_CASE_AwardDeny] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_CASE_STATUSResult>> GetByIdCaseNmbr_CASE_STATUSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_CASE_STATUSResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_CASE_STATUS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_COURT_ORDERD_AMOUNTResult>> GetByIdCaseNmbr_COURT_ORDERD_AMOUNTAsync(int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_COURT_ORDERD_AMOUNTResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_COURT_ORDERD_AMOUNT] @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIDCaseNmbr_CS_DPNDNTSResult>> GetbyIDCaseNmbr_CS_DPNDNTSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIDCaseNmbr_CS_DPNDNTSResult>("EXEC @returnValue = [dbo].[GetbyIDCaseNmbr_CS_DPNDNTS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_DENIALResult>> GetByIdCaseNmbr_DENIALAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_DENIALResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_DENIAL] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIDCaseNmbr_DEPENDENTS_allResult>> GetbyIDCaseNmbr_DEPENDENTS_allAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIDCaseNmbr_DEPENDENTS_allResult>("EXEC @returnValue = [dbo].[GetbyIDCaseNmbr_DEPENDENTS_all] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_DISASTERResult>> GetbyIdCaseNmbr_DISASTERAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_DISASTERResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_DISASTER] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDCaseNmbr_EarnedIncomeTotalsResult>> GetByIDCaseNmbr_EarnedIncomeTotalsAsync(int? ID_CASE_NMBR, string CASE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDCaseNmbr_EarnedIncomeTotalsResult>("EXEC @returnValue = [dbo].[GetByIDCaseNmbr_EarnedIncomeTotals] @ID_CASE_NMBR, @CASE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_EmploymentResult>> GetByIdCaseNmbr_EmploymentAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_EmploymentResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_Employment] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_EmploymentEarnedTotalResult>> GetByIdCaseNmbr_EmploymentEarnedTotalAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_EmploymentEarnedTotalResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_EmploymentEarnedTotal] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_EmploymentGoodResult>> GetByIdCaseNmbr_EmploymentGoodAsync(int? IDCASENMBR, string CDINCMTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CDINCMTYPE",
                    Size = 2,
                    Value = CDINCMTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_EmploymentGoodResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_EmploymentGood] @IDCASENMBR, @CDINCMTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_EmploymentNotVQResult>> GetByIdCaseNmbr_EmploymentNotVQAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_EmploymentNotVQResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_EmploymentNotVQ] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_EmploymentSanctionsResult>> GetByIdCaseNmbr_EmploymentSanctionsAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_EmploymentSanctionsResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_EmploymentSanctions] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_EmploymentVQResult>> GetByIdCaseNmbr_EmploymentVQAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_EmploymentVQResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_EmploymentVQ] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_ExpensesTotalsResult>> GetByIdCaseNmbr_ExpensesTotalsAsync(int? ID_CASE_NMBR, string CASE_TYPE, string EXP_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXP_TYPE",
                    Size = 1,
                    Value = EXP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_ExpensesTotalsResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_ExpensesTotals] @ID_CASE_NMBR, @CASE_TYPE, @EXP_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_ExpensesTotalsNEWResult>> GetByIdCaseNmbr_ExpensesTotalsNEWAsync(int? ID_CASE_NMBR, string CASE_TYPE, string EXP_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXP_TYPE",
                    Size = 1,
                    Value = EXP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_ExpensesTotalsNEWResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_ExpensesTotalsNEW] @ID_CASE_NMBR, @CASE_TYPE, @EXP_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_ExpensesTotalsNEW2Result>> GetByIdCaseNmbr_ExpensesTotalsNEW2Async(int? ID_CASE_NMBR, string CASE_TYPE, string EXP_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXP_TYPE",
                    Size = 1,
                    Value = EXP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_ExpensesTotalsNEW2Result>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_ExpensesTotalsNEW2] @ID_CASE_NMBR, @CASE_TYPE, @EXP_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_HomeMailAddressResult>> GetByIdCaseNmbr_HomeMailAddressAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_HomeMailAddressResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_HomeMailAddress] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEALResult>> GetByIdCaseNmbr_MEALAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEALResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEAL] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEAL_OTHERResult>> GetByIdCaseNmbr_MEAL_OTHERAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEAL_OTHER] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEMBERResult>> GetByIdCaseNmbr_MEMBERAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEMBERResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEMBER] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEMBER_BudgetSumResult>> GetByIdCaseNmbr_MEMBER_BudgetSumAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEMBER_BudgetSumResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEMBER_BudgetSum] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEMBER_TRNSFR_RSRCResult>> GetByIdCaseNmbr_MEMBER_TRNSFR_RSRCAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEMBER_TRNSFR_RSRCResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M1Result>> GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M1Async(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M1Result>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M1] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M2Result>> GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M2Async(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M2Result>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEMBER_TRNSFR_RSRC_M2] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MemberEmployedResult>> GetByIdCaseNmbr_MemberEmployedAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MemberEmployedResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MemberEmployed] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MemberInfo_SummariesResult>> GetByIdCaseNmbr_MemberInfo_SummariesAsync(int? ID_CASE_NMBR, string CASE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MemberInfo_SummariesResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MemberInfo_Summaries] @ID_CASE_NMBR, @CASE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_MEMBERnotVQResult>> GetByIdCaseNmbr_MEMBERnotVQAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_MEMBERnotVQResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_MEMBERnotVQ] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDCaseNmbr_MEMBERS_DisasterResult>> GetByIDCaseNmbr_MEMBERS_DisasterAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDCaseNmbr_MEMBERS_DisasterResult>("EXEC @returnValue = [dbo].[GetByIDCaseNmbr_MEMBERS_Disaster] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_OUTSIDE_DEPENDENTResult>> GetByIdCaseNmbr_OUTSIDE_DEPENDENTAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_OUTSIDE_DEPENDENTResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_OUTSIDE_DEPENDENT] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_REPORTINGResult>> GetByIdCaseNmbr_REPORTINGAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_REPORTINGResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_REPORTING] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_RESOURCEResult>> GetByIdCaseNmbr_RESOURCEAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_RESOURCEResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_RESOURCE] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_RESOURCE_M1Result>> GetByIdCaseNmbr_RESOURCE_M1Async(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_RESOURCE_M1Result>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_RESOURCE_M1] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_RESOURCE_M2Result>> GetByIdCaseNmbr_RESOURCE_M2Async(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_RESOURCE_M2Result>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_RESOURCE_M2] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_RESOURCE_NoTransResult>> GetByIdCaseNmbr_RESOURCE_NoTransAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_RESOURCE_NoTransResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_RESOURCE_NoTrans] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_ResourceTotalsResult>> GetByIdCaseNmbr_ResourceTotalsAsync(int? ID_CASE_NMBR, string CASE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_ResourceTotalsResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_ResourceTotals] @ID_CASE_NMBR, @CASE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_RESTORATIONResult>> GetByIdCaseNmbr_RESTORATIONAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_RESTORATIONResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_RESTORATION] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_StrikerResult>> GetByIdCaseNmbr_StrikerAsync(int? IDCASENMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_StrikerResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_Striker] @IDCASENMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_StudentResult>> GetByIdCaseNmbr_StudentAsync(int? IDCASENMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_StudentResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_Student] @IDCASENMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_SumChildSupportExpenseResult>> GetByIdCaseNmbr_SumChildSupportExpenseAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_SumChildSupportExpenseResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_SumChildSupportExpense] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbr_TANF_MMBR_INCLUDEDResult>> GetbyIdCaseNmbr_TANF_MMBR_INCLUDEDAsync(int? ID_CASE_NMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbr_TANF_MMBR_INCLUDEDResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbr_TANF_MMBR_INCLUDED] @ID_CASE_NMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDCaseNmbr_UnearnedIncomeResult>> GetByIDCaseNmbr_UnearnedIncomeAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDCaseNmbr_UnearnedIncomeResult>("EXEC @returnValue = [dbo].[GetByIDCaseNmbr_UnearnedIncome] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDCaseNmbr_UnearnedIncome_2ndMonthResult>> GetByIDCaseNmbr_UnearnedIncome_2ndMonthAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDCaseNmbr_UnearnedIncome_2ndMonthResult>("EXEC @returnValue = [dbo].[GetByIDCaseNmbr_UnearnedIncome_2ndMonth] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDCaseNmbr_UnearnedIncomeTotalResult>> GetByIDCaseNmbr_UnearnedIncomeTotalAsync(int? ID_CASE_NMBR, string CASE_TYPE, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDCaseNmbr_UnearnedIncomeTotalResult>("EXEC @returnValue = [dbo].[GetByIDCaseNmbr_UnearnedIncomeTotal] @ID_CASE_NMBR, @CASE_TYPE, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNmbr_UPDATE_NOTICE_TYPEResult>> GetByIdCaseNmbr_UPDATE_NOTICE_TYPEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNmbr_UPDATE_NOTICE_TYPEResult>("EXEC @returnValue = [dbo].[GetByIdCaseNmbr_UPDATE_NOTICE_TYPE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCaseNmbrAndFlag_AR_RPRSNTTVResult>> GetbyIdCaseNmbrAndFlag_AR_RPRSNTTVAsync(int? ID_CASE_NMBR, string FL_EBT_RPRSNTTV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EBT_RPRSNTTV",
                    Size = 1,
                    Value = FL_EBT_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCaseNmbrAndFlag_AR_RPRSNTTVResult>("EXEC @returnValue = [dbo].[GetbyIdCaseNmbrAndFlag_AR_RPRSNTTV] @ID_CASE_NMBR, @FL_EBT_RPRSNTTV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNo_MDCL_INSURANCEResult>> GetByIdCaseNo_MDCL_INSURANCEAsync(int? ID_CASE_NMBR, int? ID_PROVIDER_TYPE, string CASE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PROVIDER_TYPE",
                    Value = ID_PROVIDER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 20,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNo_MDCL_INSURANCEResult>("EXEC @returnValue = [dbo].[GetByIdCaseNo_MDCL_INSURANCE] @ID_CASE_NMBR, @ID_PROVIDER_TYPE, @CASE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNo_MDCL_INSURANCE_BY_CDMNTHResult>> GetByIdCaseNo_MDCL_INSURANCE_BY_CDMNTHAsync(int? ID_CASE_NMBR, int? ID_PROVIDER_TYPE, string CD_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PROVIDER_TYPE",
                    Value = ID_PROVIDER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 1,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNo_MDCL_INSURANCE_BY_CDMNTHResult>("EXEC @returnValue = [dbo].[GetByIdCaseNo_MDCL_INSURANCE_BY_CDMNTH] @ID_CASE_NMBR, @ID_PROVIDER_TYPE, @CD_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNo_MED_EXP_TRIPResult>> GetByIdCaseNo_MED_EXP_TRIPAsync(int? ID_CASE_NMBR, int? ID_PROVIDER_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PROVIDER_TYPE",
                    Value = ID_PROVIDER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNo_MED_EXP_TRIPResult>("EXEC @returnValue = [dbo].[GetByIdCaseNo_MED_EXP_TRIP] @ID_CASE_NMBR, @ID_PROVIDER_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCaseNo_MedExpnsByTypeResult>> GetByIdCaseNo_MedExpnsByTypeAsync(int? ID_CASE_NMBR, int? ID_PROVIDER_TYPE, string CASE_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PROVIDER_TYPE",
                    Value = ID_PROVIDER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 16,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCaseNo_MedExpnsByTypeResult>("EXEC @returnValue = [dbo].[GetByIdCaseNo_MedExpnsByType] @ID_CASE_NMBR, @ID_PROVIDER_TYPE, @CASE_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDCaseNumber_CASE_STATUSResult>> GetByIDCaseNumber_CASE_STATUSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDCaseNumber_CASE_STATUSResult>("EXEC @returnValue = [dbo].[GetByIDCaseNumber_CASE_STATUS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDCntyST_REF_CountyResult>> GetByIDCntyST_REF_CountyAsync(int? ID_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CNTY",
                    Value = ID_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDCntyST_REF_CountyResult>("EXEC @returnValue = [dbo].[GetByIDCntyST_REF_County] @ID_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCrtOrdrdAmnt_ARREARS_CSResult>> GetByIdCrtOrdrdAmnt_ARREARS_CSAsync(int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCrtOrdrdAmnt_ARREARS_CSResult>("EXEC @returnValue = [dbo].[GetByIdCrtOrdrdAmnt_ARREARS_CS] @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdCrtOrdrdAmnt_OUTSIDE_DEPENDENTResult>> GetByIdCrtOrdrdAmnt_OUTSIDE_DEPENDENTAsync(int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdCrtOrdrdAmnt_OUTSIDE_DEPENDENTResult>("EXEC @returnValue = [dbo].[GetByIdCrtOrdrdAmnt_OUTSIDE_DEPENDENT] @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCsAmnt_CS_DPNDNTSResult>> GetbyIdCsAmnt_CS_DPNDNTSAsync(int? ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCsAmnt_CS_DPNDNTSResult>("EXEC @returnValue = [dbo].[GetbyIdCsAmnt_CS_DPNDNTS] @ID_CS_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdCsAmnt_CS_PAYMENTSResult>> GetbyIdCsAmnt_CS_PAYMENTSAsync(int? ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdCsAmnt_CS_PAYMENTSResult>("EXEC @returnValue = [dbo].[GetbyIdCsAmnt_CS_PAYMENTS] @ID_CS_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdDisaster_DISASTERResult>> GetByIdDisaster_DISASTERAsync(int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdDisaster_DISASTERResult>("EXEC @returnValue = [dbo].[GetByIdDisaster_DISASTER] @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdDisaster_DISASTER_COUNTIESResult>> GetByIdDisaster_DISASTER_COUNTIESAsync(int? ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdDisaster_DISASTER_COUNTIESResult>("EXEC @returnValue = [dbo].[GetByIdDisaster_DISASTER_COUNTIES] @ID_DISASTER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdEmplymnt_MEALResult>> GetByIdEmplymnt_MEALAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdEmplymnt_MEALResult>("EXEC @returnValue = [dbo].[GetByIdEmplymnt_MEAL] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdEmplymnt_MemberEmploymentResult>> GetbyIdEmplymnt_MemberEmploymentAsync(int? IDEMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDEMPLYMNT",
                    Value = IDEMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdEmplymnt_MemberEmploymentResult>("EXEC @returnValue = [dbo].[GetbyIdEmplymnt_MemberEmployment] @IDEMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdEmplymnt_ROOMResult>> GetByIdEmplymnt_ROOMAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdEmplymnt_ROOMResult>("EXEC @returnValue = [dbo].[GetByIdEmplymnt_ROOM] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdEmplymnt_STRIKERResult>> GetByIdEmplymnt_STRIKERAsync(int? IDEMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDEMPLYMNT",
                    Value = IDEMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdEmplymnt_STRIKERResult>("EXEC @returnValue = [dbo].[GetByIdEmplymnt_STRIKER] @IDEMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdEmplymnt_StrikerEmploymentResult>> GetbyIdEmplymnt_StrikerEmploymentAsync(int? IDEMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDEMPLYMNT",
                    Value = IDEMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdEmplymnt_StrikerEmploymentResult>("EXEC @returnValue = [dbo].[GetbyIdEmplymnt_StrikerEmployment] @IDEMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_EMPLOYMENTResult>> GetByIdMmbr_EMPLOYMENTAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_EMPLOYMENTResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_EMPLOYMENT] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_EMPLOYMENT_AwardDenyResult>> GetByIdMmbr_EMPLOYMENT_AwardDenyAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_EMPLOYMENT_AwardDenyResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_EMPLOYMENT_AwardDeny] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_EMPLOYMENT_VQResult>> GetByIdMmbr_EMPLOYMENT_VQAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_EMPLOYMENT_VQResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_EMPLOYMENT_VQ] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_EMPLOYMENT_VRFYTXTResult>> GetByIdMmbr_EMPLOYMENT_VRFYTXTAsync(int? ID_MMBR, int? ID_EMPLOYMENT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLOYMENT",
                    Value = ID_EMPLOYMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_EMPLOYMENT_VRFYTXTResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_EMPLOYMENT_VRFYTXT] @ID_MMBR, @ID_EMPLOYMENT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_EmploymentForMedicareResult>> GetByIdMmbr_EmploymentForMedicareAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_EmploymentForMedicareResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_EmploymentForMedicare] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDMmbr_EmploymentType6Result>> GetByIDMmbr_EmploymentType6Async(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDMmbr_EmploymentType6Result>("EXEC @returnValue = [dbo].[GetByIDMmbr_EmploymentType6] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDMmbr_INSURANCE_EXPResult>> GetByIDMmbr_INSURANCE_EXPAsync(int? ID_MMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDMmbr_INSURANCE_EXPResult>("EXEC @returnValue = [dbo].[GetByIDMmbr_INSURANCE_EXP] @ID_MMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_MEALResult>> GetByIdMmbr_MEALAsync(int? IDMMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_MEALResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_MEAL] @IDMMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_MEAL_RoomerBoarderResult>> GetByIdMmbr_MEAL_RoomerBoarderAsync(int? IDMMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_MEAL_RoomerBoarderResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_MEAL_RoomerBoarder] @IDMMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDMmbr_MEDICAL_EXPENSEResult>> GetByIDMmbr_MEDICAL_EXPENSEAsync(int? ID_MMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDMmbr_MEDICAL_EXPENSEResult>("EXEC @returnValue = [dbo].[GetByIDMmbr_MEDICAL_EXPENSE] @ID_MMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_MEMBER_AwardDenyResult>> GetByIdMmbr_MEMBER_AwardDenyAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_MEMBER_AwardDenyResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_MEMBER_AwardDeny] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_MEMBER_TRNSFR_RSRCResult>> GetByIdMmbr_MEMBER_TRNSFR_RSRCAsync(int? IDMMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_MEMBER_TRNSFR_RSRCResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_MEMBER_TRNSFR_RSRC] @IDMMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_MEMBERNAMEResult>> GetByIdMmbr_MEMBERNAMEAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_MEMBERNAMEResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_MEMBERNAME] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_OUTSIDE_DEPENDENTResult>> GetByIdMmbr_OUTSIDE_DEPENDENTAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_OUTSIDE_DEPENDENTResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_OUTSIDE_DEPENDENT] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_RESOURCEResult>> GetByIdMmbr_RESOURCEAsync(int? IDMMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_RESOURCEResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_RESOURCE] @IDMMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_ROOMResult>> GetByIdMmbr_ROOMAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_ROOMResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_ROOM] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIDMMBR_SANCTION_ResourcesResult>> GetbyIDMMBR_SANCTION_ResourcesAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIDMMBR_SANCTION_ResourcesResult>("EXEC @returnValue = [dbo].[GetbyIDMMBR_SANCTION_Resources] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_STRIKERResult>> GetByIdMmbr_STRIKERAsync(int? IDMMBR, int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_STRIKERResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_STRIKER] @IDMMBR, @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_STRIKER_EMPLOYMENTResult>> GetByIdMmbr_STRIKER_EMPLOYMENTAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_STRIKER_EMPLOYMENTResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_STRIKER_EMPLOYMENT] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_STUDENTResult>> GetByIdMmbr_STUDENTAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_STUDENTResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_STUDENT] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumChildSupportExpenseResult>> GetByIdMmbr_SumChildSupportExpenseAsync(int? ID_MMBR, int? ID_CASE_NMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumChildSupportExpenseResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumChildSupportExpense] @ID_MMBR, @ID_CASE_NMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumChildSupportIncomeResult>> GetByIdMmbr_SumChildSupportIncomeAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumChildSupportIncomeResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumChildSupportIncome] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdMmbr_SumEarnedIncomeDataResult>> GetbyIdMmbr_SumEarnedIncomeDataAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdMmbr_SumEarnedIncomeDataResult>("EXEC @returnValue = [dbo].[GetbyIdMmbr_SumEarnedIncomeData] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumUnearnedIncomeDataResult>> GetByIdMmbr_SumUnearnedIncomeDataAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumUnearnedIncomeDataResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumUnearnedIncomeData] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumUnearnedIncomeData_SSAResult>> GetByIdMmbr_SumUnearnedIncomeData_SSAAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumUnearnedIncomeData_SSAResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumUnearnedIncomeData_SSA] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumUnearnedIncomeData_SSIResult>> GetByIdMmbr_SumUnearnedIncomeData_SSIAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumUnearnedIncomeData_SSIResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumUnearnedIncomeData_SSI] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumUnearnedIncomeData_SSISSAResult>> GetByIdMmbr_SumUnearnedIncomeData_SSISSAAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumUnearnedIncomeData_SSISSAResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumUnearnedIncomeData_SSISSA] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumUnearnedIncomeData_TANFResult>> GetByIdMmbr_SumUnearnedIncomeData_TANFAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumUnearnedIncomeData_TANFResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumUnearnedIncomeData_TANF] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumUnearnedIncomeData_VAResult>> GetByIdMmbr_SumUnearnedIncomeData_VAAsync(int? ID_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumUnearnedIncomeData_VAResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumUnearnedIncomeData_VA] @ID_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_SumUnearnedIncomeDataOtherResult>> GetByIdMmbr_SumUnearnedIncomeDataOtherAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_SumUnearnedIncomeDataOtherResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_SumUnearnedIncomeDataOther] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdMmbr_TANF_MMBR_INCLUDEDResult>> GetbyIdMmbr_TANF_MMBR_INCLUDEDAsync(int? ID_MMBR, int? ID_CASE_NMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdMmbr_TANF_MMBR_INCLUDEDResult>("EXEC @returnValue = [dbo].[GetbyIdMmbr_TANF_MMBR_INCLUDED] @ID_MMBR, @ID_CASE_NMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_UnearendIncome_SSI_SSAResult>> GetByIdMmbr_UnearendIncome_SSI_SSAAsync(int? ID_MMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_UnearendIncome_SSI_SSAResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_UnearendIncome_SSI_SSA] @ID_MMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbr_UnearendIncome_SSI_SSA_VAResult>> GetByIdMmbr_UnearendIncome_SSI_SSA_VAAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbr_UnearendIncome_SSI_SSA_VAResult>("EXEC @returnValue = [dbo].[GetByIdMmbr_UnearendIncome_SSI_SSA_VA] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbrAndMonth_REF_CERT_ELIGResult>> GetByIdMmbrAndMonth_REF_CERT_ELIGAsync(int? ID_MMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbrAndMonth_REF_CERT_ELIGResult>("EXEC @returnValue = [dbo].[GetByIdMmbrAndMonth_REF_CERT_ELIG] @ID_MMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdMmbrAndType_ADDRESSResult>> GetByIdMmbrAndType_ADDRESSAsync(int? ID_MMBR, int? ID_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdMmbrAndType_ADDRESSResult>("EXEC @returnValue = [dbo].[GetByIdMmbrAndType_ADDRESS] @ID_MMBR, @ID_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdMmbrandType_SumEarnedIncomeDataResult>> GetbyIdMmbrandType_SumEarnedIncomeDataAsync(int? ID_MMBR, string INC_TYPE, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "INC_TYPE",
                    Value = INC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdMmbrandType_SumEarnedIncomeDataResult>("EXEC @returnValue = [dbo].[GetbyIdMmbrandType_SumEarnedIncomeData] @ID_MMBR, @INC_TYPE, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdMmbrAndType_UNEARNED_INCOMEResult>> GetbyIdMmbrAndType_UNEARNED_INCOMEAsync(int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdMmbrAndType_UNEARNED_INCOMEResult>("EXEC @returnValue = [dbo].[GetbyIdMmbrAndType_UNEARNED_INCOME] @ID_MMBR, @ID_REF_UNERND_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdMmbrDpndnt_DEPENDENTS_allResult>> GetbyIdMmbrDpndnt_DEPENDENTS_allAsync(int? ID_MMBR_DPNDNT, int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR_DPNDNT",
                    Value = ID_MMBR_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdMmbrDpndnt_DEPENDENTS_allResult>("EXEC @returnValue = [dbo].[GetbyIdMmbrDpndnt_DEPENDENTS_all] @ID_MMBR_DPNDNT, @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDNEWCASE_REG_CASEResult>> GetByIDNEWCASE_REG_CASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDNEWCASE_REG_CASEResult>("EXEC @returnValue = [dbo].[GetByIDNEWCASE_REG_CASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBYIDNEWMBR_REG_CASEMBRSResult>> GetBYIDNEWMBR_REG_CASEMBRSAsync(int? ID_NEWMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBYIDNEWMBR_REG_CASEMBRSResult>("EXEC @returnValue = [dbo].[GetBYIDNEWMBR_REG_CASEMBRS] @ID_NEWMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBYIDNEWMBR_REGISTER_CHILD_SUPPORTResult>> GetBYIDNEWMBR_REGISTER_CHILD_SUPPORTAsync(int? ID_NEWMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBYIDNEWMBR_REGISTER_CHILD_SUPPORTResult>("EXEC @returnValue = [dbo].[GetBYIDNEWMBR_REGISTER_CHILD_SUPPORT] @ID_NEWMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDPayroll_SECURITYResult>> GetByIDPayroll_SECURITYAsync(string ID_PAYROLL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAYROLL",
                    Size = 10,
                    Value = ID_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDPayroll_SECURITYResult>("EXEC @returnValue = [dbo].[GetByIDPayroll_SECURITY] @ID_PAYROLL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDPyrll_REF_SECURITYResult>> GetByIDPyrll_REF_SECURITYAsync(string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDPyrll_REF_SECURITYResult>("EXEC @returnValue = [dbo].[GetByIDPyrll_REF_SECURITY] @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyIdSci2CaseData_SCI2_MMBR_DATAResult>> GetbyIdSci2CaseData_SCI2_MMBR_DATAAsync(int? ID_SCI2_CASE_DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SCI2_CASE_DATA",
                    Value = ID_SCI2_CASE_DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyIdSci2CaseData_SCI2_MMBR_DATAResult>("EXEC @returnValue = [dbo].[GetbyIdSci2CaseData_SCI2_MMBR_DATA] @ID_SCI2_CASE_DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdUnerndIncm_REF_PAY_DATESResult>> GetByIdUnerndIncm_REF_PAY_DATESAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdUnerndIncm_REF_PAY_DATESResult>("EXEC @returnValue = [dbo].[GetByIdUnerndIncm_REF_PAY_DATES] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdUnerndIncm_TANF_MMBR_INCLUDEDResult>> GetByIdUnerndIncm_TANF_MMBR_INCLUDEDAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdUnerndIncm_TANF_MMBR_INCLUDEDResult>("EXEC @returnValue = [dbo].[GetByIdUnerndIncm_TANF_MMBR_INCLUDED] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIdUser_AU_CASEACTIONResult>> GetByIdUser_AU_CASEACTIONAsync(string ID_USER, DateTime? ACTION_DATE_START, DateTime? ACTION_DATE_END, string PARAMFLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ACTION_DATE_START",
                    Value = ACTION_DATE_START ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ACTION_DATE_END",
                    Value = ACTION_DATE_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PARAMFLAG",
                    Size = 2,
                    Value = PARAMFLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIdUser_AU_CASEACTIONResult>("EXEC @returnValue = [dbo].[GetByIdUser_AU_CASEACTION] @ID_USER, @ACTION_DATE_START, @ACTION_DATE_END, @PARAMFLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIDUser_SECURITYResult>> GetByIDUser_SECURITYAsync(string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIDUser_SECURITYResult>("EXEC @returnValue = [dbo].[GetByIDUser_SECURITY] @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByIncmType_REF_EARNED_INCOME_TYPEResult>> GetByIncmType_REF_EARNED_INCOME_TYPEAsync(short? ID_INCM_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByIncmType_REF_EARNED_INCOME_TYPEResult>("EXEC @returnValue = [dbo].[GetByIncmType_REF_EARNED_INCOME_TYPE] @ID_INCM_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByMemberId_SANCTIONResult>> GetByMemberId_SANCTIONAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByMemberId_SANCTIONResult>("EXEC @returnValue = [dbo].[GetByMemberId_SANCTION] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByMmbrs_EmployVQPlusResult>> GetByMmbrs_EmployVQPlusAsync(string selMembers, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "selMembers",
                    Size = 2000,
                    Value = selMembers ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByMmbrs_EmployVQPlusResult>("EXEC @returnValue = [dbo].[GetByMmbrs_EmployVQPlus] @selMembers", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByName_MEMBERResult>> GetByName_MEMBERAsync(string NM_MMBR_LST, string NM_MMBR_FRST, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByName_MEMBERResult>("EXEC @returnValue = [dbo].[GetByName_MEMBER] @NM_MMBR_LST, @NM_MMBR_FRST", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByNamePhone_EMPLOYMENTResult>> GetByNamePhone_EMPLOYMENTAsync(string NM_EMPLYR, string NO_EMPLYR_PHONE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByNamePhone_EMPLOYMENTResult>("EXEC @returnValue = [dbo].[GetByNamePhone_EMPLOYMENT] @NM_EMPLYR, @NO_EMPLYR_PHONE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByNoCase_AU_CASELOGResult>> GetByNoCase_AU_CASELOGAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByNoCase_AU_CASELOGResult>("EXEC @returnValue = [dbo].[GetByNoCase_AU_CASELOG] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByNoCase_AU_VOTER_POPUPResult>> GetByNoCase_AU_VOTER_POPUPAsync(string NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByNoCase_AU_VOTER_POPUPResult>("EXEC @returnValue = [dbo].[GetByNoCase_AU_VOTER_POPUP] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByNOCASE_REG_CASEResult>> GetByNOCASE_REG_CASEAsync(string NO_CASE, string FL_OLD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OLD",
                    Size = 1,
                    Value = FL_OLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByNOCASE_REG_CASEResult>("EXEC @returnValue = [dbo].[GetByNOCASE_REG_CASE] @NO_CASE, @FL_OLD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByNOCASE_REG_CASEMBRSResult>> GetByNOCASE_REG_CASEMBRSAsync(string ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Size = 9,
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByNOCASE_REG_CASEMBRSResult>("EXEC @returnValue = [dbo].[GetByNOCASE_REG_CASEMBRS] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyNoCase_SCI2_CASE_DATAResult>> GetbyNoCase_SCI2_CASE_DATAAsync(int? NO_CASE, string CD_REC_TYPE, string CD_RETRIEVAL_TYPE, int? ID_AUDIT_CASEACTION, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REC_TYPE",
                    Size = 1,
                    Value = CD_REC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RETRIEVAL_TYPE",
                    Size = 1,
                    Value = CD_RETRIEVAL_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_AUDIT_CASEACTION",
                    Value = ID_AUDIT_CASEACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyNoCase_SCI2_CASE_DATAResult>("EXEC @returnValue = [dbo].[GetbyNoCase_SCI2_CASE_DATA] @NO_CASE, @CD_REC_TYPE, @CD_RETRIEVAL_TYPE, @ID_AUDIT_CASEACTION", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByNoSSN_MEMBERResult>> GetByNoSSN_MEMBERAsync(string NO_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByNoSSN_MEMBERResult>("EXEC @returnValue = [dbo].[GetByNoSSN_MEMBER] @NO_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByNoSSN_REF_UNEARNED_SUBTYPEResult>> GetByNoSSN_REF_UNEARNED_SUBTYPEAsync(string NO_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByNoSSN_REF_UNEARNED_SUBTYPEResult>("EXEC @returnValue = [dbo].[GetByNoSSN_REF_UNEARNED_SUBTYPE] @NO_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_ADDRESSResult>> GetByPrimaryKey_ADDRESSAsync(int? ID_ADDRSS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_ADDRESSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_ADDRESS] @ID_ADDRSS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_ALIEN_STATUSResult>> GetByPrimaryKey_ALIEN_STATUSAsync(short? ID_ALIEN_STATUS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ALIEN_STATUS",
                    Value = ID_ALIEN_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_ALIEN_STATUSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_ALIEN_STATUS] @ID_ALIEN_STATUS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_AR_RPRSNTTVResult>> GetByPrimaryKey_AR_RPRSNTTVAsync(int? ID_AR_RPRSNTTV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_AR_RPRSNTTV",
                    Value = ID_AR_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_AR_RPRSNTTVResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_AR_RPRSNTTV] @ID_AR_RPRSNTTV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_ARREARS_CSResult>> GetByPrimaryKey_ARREARS_CSAsync(int? ID_ARRRS_CS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ARRRS_CS",
                    Value = ID_ARRRS_CS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_ARREARS_CSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_ARREARS_CS] @ID_ARRRS_CS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_aspnet_ApplicationsResult>> GetByPrimaryKey_aspnet_ApplicationsAsync(Guid? ApplicationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_aspnet_ApplicationsResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_aspnet_Applications] @ApplicationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_aspnet_MembershipResult>> GetByPrimaryKey_aspnet_MembershipAsync(Guid? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_aspnet_MembershipResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_aspnet_Membership] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_aspnet_SchemaVersionsResult>> GetByPrimaryKey_aspnet_SchemaVersionsAsync(string Feature, string CompatibleSchemaVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Feature",
                    Size = 256,
                    Value = Feature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompatibleSchemaVersion",
                    Size = 256,
                    Value = CompatibleSchemaVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_aspnet_SchemaVersionsResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_aspnet_SchemaVersions] @Feature, @CompatibleSchemaVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_aspnet_UsersResult>> GetByPrimaryKey_aspnet_UsersAsync(Guid? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_aspnet_UsersResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_aspnet_Users] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_AU_CASEACTIONResult>> GetByPrimaryKey_AU_CASEACTIONAsync(long? ID_AUDIT_CASEACTION, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_AUDIT_CASEACTION",
                    Value = ID_AUDIT_CASEACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_AU_CASEACTIONResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_AU_CASEACTION] @ID_AUDIT_CASEACTION", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_AU_VOTER_POPUPResult>> GetByPrimaryKey_AU_VOTER_POPUPAsync(int? ID_AU_VOTER_POPUP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_AU_VOTER_POPUP",
                    Value = ID_AU_VOTER_POPUP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_AU_VOTER_POPUPResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_AU_VOTER_POPUP] @ID_AU_VOTER_POPUP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_CASEResult>> GetByPrimaryKey_CASEAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_CASEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_CASE] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_CASE_BudgetSumResult>> GetByPrimaryKey_CASE_BudgetSumAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_CASE_BudgetSumResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_CASE_BudgetSum] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_CASE_NOTESResult>> GetByPrimaryKey_CASE_NOTESAsync(int? ID_CASE_NOTE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NOTE",
                    Value = ID_CASE_NOTE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_CASE_NOTESResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_CASE_NOTES] @ID_CASE_NOTE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_CASE_STATUSResult>> GetByPrimaryKey_CASE_STATUSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_CASE_STATUSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_CASE_STATUS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_CERT_ELIGResult>> GetByPrimaryKey_CERT_ELIGAsync(decimal? ID_CERT_ELGBLTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CERT_ELGBLTY",
                    Precision = 2,
                    Value = ID_CERT_ELGBLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_CERT_ELIGResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_CERT_ELIG] @ID_CERT_ELGBLTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_COURT_ORDERD_AMOUNTResult>> GetByPrimaryKey_COURT_ORDERD_AMOUNTAsync(int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_COURT_ORDERD_AMOUNTResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_COURT_ORDERD_AMOUNT] @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_COVERED_ITEMSResult>> GetByPrimaryKey_COVERED_ITEMSAsync(decimal? ID_CVRD_ITEMS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CVRD_ITEMS",
                    Precision = 2,
                    Value = ID_CVRD_ITEMS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_COVERED_ITEMSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_COVERED_ITEMS] @ID_CVRD_ITEMS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_CS_AMOUNTResult>> GetByPrimaryKey_CS_AMOUNTAsync(int? ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_CS_AMOUNTResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_CS_AMOUNT] @ID_CS_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_CS_PAYER_RECIPIENTResult>> GetByPrimaryKey_CS_PAYER_RECIPIENTAsync(int? ID_CS_PAYER_RCPNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_PAYER_RCPNT",
                    Value = ID_CS_PAYER_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_CS_PAYER_RECIPIENTResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_CS_PAYER_RECIPIENT] @ID_CS_PAYER_RCPNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyPrimaryKey_CS_PAYMENTSResult>> GetbyPrimaryKey_CS_PAYMENTSAsync(int? ID_CS_PYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_PYMNT",
                    Value = ID_CS_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyPrimaryKey_CS_PAYMENTSResult>("EXEC @returnValue = [dbo].[GetbyPrimaryKey_CS_PAYMENTS] @ID_CS_PYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_DENIALResult>> GetByPrimaryKey_DENIALAsync(int? ID_DENIAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL",
                    Value = ID_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_DENIALResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_DENIAL] @ID_DENIAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_DEPENDENTResult>> GetByPrimaryKey_DEPENDENTAsync(int? ID_DPNDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_DEPENDENTResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_DEPENDENT] @ID_DPNDNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_DEPENDENT_CAREResult>> GetByPrimaryKey_DEPENDENT_CAREAsync(int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_DEPENDENT_CAREResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_DEPENDENT_CARE] @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_DEPENDENT_CARE_OTHER_PAYERResult>> GetByPrimaryKey_DEPENDENT_CARE_OTHER_PAYERAsync(short? ID_DC_OTHR_PAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_DEPENDENT_CARE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_DEPENDENT_CARE_OTHER_PAYER] @ID_DC_OTHR_PAY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_EMPLOYMENTResult>> GetByPrimaryKey_EMPLOYMENTAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_EMPLOYMENTResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_EMPLOYMENT] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_EMPLOYMENT_RBResult>> GetByPrimaryKey_EMPLOYMENT_RBAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_EMPLOYMENT_RBResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_EMPLOYMENT_RB] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_EMPLOYMENT2Result>> GetByPrimaryKey_EMPLOYMENT2Async(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_EMPLOYMENT2Result>("EXEC @returnValue = [dbo].[GetByPrimaryKey_EMPLOYMENT2] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_FA_STATUSResult>> GetByPrimaryKey_FA_STATUSAsync(int? ID_FA_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_STTS",
                    Value = ID_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_FA_STATUSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_FA_STATUS] @ID_FA_STTS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_INSURANCEResult>> GetByPrimaryKey_INSURANCEAsync(int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_INSURANCEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_INSURANCE] @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_LOGINResult>> GetByPrimaryKey_LOGINAsync(string ID_FA_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_SSN",
                    Size = 9,
                    Value = ID_FA_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_LOGINResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_LOGIN] @ID_FA_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEALResult>> GetByPrimaryKey_MEALAsync(int? IDMEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMEAL",
                    Value = IDMEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEALResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEAL] @IDMEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEAL_OTHERResult>> GetByPrimaryKey_MEAL_OTHERAsync(short? ID_MEAL_OTHER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL_OTHER",
                    Value = ID_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEAL_OTHER] @ID_MEAL_OTHER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEDICAL_EXPENSEResult>> GetByPrimaryKey_MEDICAL_EXPENSEAsync(int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEDICAL_EXPENSEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEDICAL_EXPENSE] @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEDICAL_EXPENSE_OTHER_PAYERResult>> GetByPrimaryKey_MEDICAL_EXPENSE_OTHER_PAYERAsync(short? ID_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEDICAL_EXPENSE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEDICAL_EXPENSE_OTHER_PAYER] @ID_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEDICAL_NOTESResult>> GetByPrimaryKey_MEDICAL_NOTESAsync(int? ID_MDCL_NOTES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_NOTES",
                    Value = ID_MDCL_NOTES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEDICAL_NOTESResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEDICAL_NOTES] @ID_MDCL_NOTES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEMBERResult>> GetByPrimaryKey_MEMBERAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEMBERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEMBER] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEMBER_AwardDenyResult>> GetByPrimaryKey_MEMBER_AwardDenyAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEMBER_AwardDenyResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEMBER_AwardDeny] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEMBER_RoomerBoarderResult>> GetByPrimaryKey_MEMBER_RoomerBoarderAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEMBER_RoomerBoarderResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEMBER_RoomerBoarder] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_MEMBER_TRNSFR_RSRCResult>> GetByPrimaryKey_MEMBER_TRNSFR_RSRCAsync(int? ID_MMBR_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR_RSRC",
                    Value = ID_MMBR_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_MEMBER_TRNSFR_RSRCResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_MEMBER_TRNSFR_RSRC] @ID_MMBR_RSRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_CS_PAYER_RCPNTResult>> GetByPrimaryKey_PIV_CS_PAYER_RCPNTAsync(int? ID_PAYER, int? ID_RCPNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAYER",
                    Value = ID_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RCPNT",
                    Value = ID_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_CS_PAYER_RCPNTResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_CS_PAYER_RCPNT] @ID_PAYER, @ID_RCPNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_DPDNT_COURT_ORDERResult>> GetByPrimaryKey_PIV_DPDNT_COURT_ORDERAsync(int? ID_DPNDNT, int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_DPDNT_COURT_ORDERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_DPDNT_COURT_ORDER] @ID_DPNDNT, @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_MMBR_INSRNCResult>> GetByPrimaryKey_PIV_MMBR_INSRNCAsync(int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_MMBR_INSRNCResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_MMBR_INSRNC] @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_MMBR_RLTNResult>> GetByPrimaryKey_PIV_MMBR_RLTNAsync(decimal? ID_RLTN, int? ID_MMBR1, int? ID_MMBR2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_MMBR_RLTNResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_MMBR_RLTN] @ID_RLTN, @ID_MMBR1, @ID_MMBR2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_PRVDR_DCResult>> GetByPrimaryKey_PIV_PRVDR_DCAsync(int? ID_PRVDR_NAME, int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_PRVDR_DCResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_PRVDR_DC] @ID_PRVDR_NAME, @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_PRVDR_INSRNCResult>> GetByPrimaryKey_PIV_PRVDR_INSRNCAsync(int? ID_PRVDR_NAME, int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_PRVDR_INSRNCResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_PRVDR_INSRNC] @ID_PRVDR_NAME, @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_RMED_MEDEXResult>> GetByPrimaryKey_PIV_RMED_MEDEXAsync(int? ID_MDCTN, int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCTN",
                    Value = ID_MDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_RMED_MEDEXResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_RMED_MEDEX] @ID_MDCTN, @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_PIV_RPRVDR_RAPPLIANCE_TYPEResult>> GetByPrimaryKey_PIV_RPRVDR_RAPPLIANCE_TYPEAsync(int? ID_PRVDR_NAME, short? ID_APPLNC_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_APPLNC_TYPE",
                    Value = ID_APPLNC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_PIV_RPRVDR_RAPPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_PIV_RPRVDR_RAPPLIANCE_TYPE] @ID_PRVDR_NAME, @ID_APPLNC_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_RB_MEALResult>> GetByPrimaryKey_RB_MEALAsync(int? ID_RB_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL",
                    Value = ID_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_RB_MEALResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_RB_MEAL] @ID_RB_MEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_RB_MEAL_OTHERResult>> GetByPrimaryKey_RB_MEAL_OTHERAsync(short? ID_RB_MEAL_OTHER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL_OTHER",
                    Value = ID_RB_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_RB_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_RB_MEAL_OTHER] @ID_RB_MEAL_OTHER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_RBMEALResult>> GetByPrimaryKey_RBMEALAsync(int? IDMEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDMEAL",
                    Value = IDMEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_RBMEALResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_RBMEAL] @IDMEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_ADDRESS_TYPEResult>> GetByPrimaryKey_REF_ADDRESS_TYPEAsync(decimal? ID_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_ADDRESS_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_ADDRESS_TYPE] @ID_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_APPLIANCE_TYPEResult>> GetByPrimaryKey_REF_APPLIANCE_TYPEAsync(short? ID_APPLNC_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_APPLNC_TYPE",
                    Value = ID_APPLNC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_APPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_APPLIANCE_TYPE] @ID_APPLNC_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_CASE_CTGRYResult>> GetByPrimaryKey_REF_CASE_CTGRYAsync(short? ID_CASE_CTGRY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_CASE_CTGRYResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_CASE_CTGRY] @ID_CASE_CTGRY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_CASE_STATUS_TYPEResult>> GetByPrimaryKey_REF_CASE_STATUS_TYPEAsync(short? ID_REF_CASE_STATUS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS_TYPE",
                    Value = ID_REF_CASE_STATUS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_CASE_STATUS_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_CASE_STATUS_TYPE] @ID_REF_CASE_STATUS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_CASE_SUB_CTGRYResult>> GetByPrimaryKey_REF_CASE_SUB_CTGRYAsync(short? ID_CASE_SUB_CTGRY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_SUB_CTGRY",
                    Value = ID_CASE_SUB_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_CASE_SUB_CTGRYResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_CASE_SUB_CTGRY] @ID_CASE_SUB_CTGRY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_CERT_ELIGResult>> GetByPrimaryKey_REF_CERT_ELIGAsync(decimal? ID_REF_CERT_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Precision = 2,
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_CERT_ELIGResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_CERT_ELIG] @ID_REF_CERT_ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_DENIAL_CODESResult>> GetByPrimaryKey_REF_DENIAL_CODESAsync(decimal? ID_DENIAL_CODES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL_CODES",
                    Precision = 2,
                    Value = ID_DENIAL_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_DENIAL_CODESResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_DENIAL_CODES] @ID_DENIAL_CODES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_DEPENDENT_CARE_LIMITResult>> GetByPrimaryKey_REF_DEPENDENT_CARE_LIMITAsync(decimal? ID_DPNDNT_CARE_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE_LIMIT",
                    Precision = 1,
                    Value = ID_DPNDNT_CARE_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_DEPENDENT_CARE_LIMITResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_DEPENDENT_CARE_LIMIT] @ID_DPNDNT_CARE_LIMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_DHR_EMPLOYEEResult>> GetByPrimaryKey_REF_DHR_EMPLOYEEAsync(string ID_SSN_DHREMP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_DHREMP",
                    Size = 9,
                    Value = ID_SSN_DHREMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_DHR_EMPLOYEEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_DHR_EMPLOYEE] @ID_SSN_DHREMP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_EBT_CHCKResult>> GetByPrimaryKey_REF_EBT_CHCKAsync(string ID_SSN_EBT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_EBT",
                    Size = 9,
                    Value = ID_SSN_EBT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_EBT_CHCKResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_EBT_CHCK] @ID_SSN_EBT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_FA_STATUSResult>> GetByPrimaryKey_REF_FA_STATUSAsync(short? ID_REF_FA_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_FA_STTS",
                    Value = ID_REF_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_FA_STATUSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_FA_STATUS] @ID_REF_FA_STTS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_FREQUENCYResult>> GetByPrimaryKey_REF_FREQUENCYAsync(decimal? ID_FRQNCY_REF, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_REF",
                    Precision = 2,
                    Value = ID_FRQNCY_REF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_FREQUENCYResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_FREQUENCY] @ID_FRQNCY_REF", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_IEVS_TRAKResult>> GetByPrimaryKey_REF_IEVS_TRAKAsync(string ID_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN",
                    Size = 9,
                    Value = ID_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_IEVS_TRAKResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_IEVS_TRAK] @ID_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_INACTIVE_SCIIIResult>> GetByPrimaryKey_REF_INACTIVE_SCIIIAsync(string ID_SSN, decimal? CD_CNTY_SCIII, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN",
                    Size = 9,
                    Value = ID_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_SCIII",
                    Precision = 3,
                    Value = CD_CNTY_SCIII ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_INACTIVE_SCIIIResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_INACTIVE_SCIII] @ID_SSN, @CD_CNTY_SCIII", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_INCOME_LIMITResult>> GetByPrimaryKey_REF_INCOME_LIMITAsync(decimal? ID_REF_INCM_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_INCM_LIMIT",
                    Precision = 2,
                    Value = ID_REF_INCM_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_INCOME_LIMITResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_INCOME_LIMIT] @ID_REF_INCM_LIMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_INSTRUCTIONSResult>> GetByPrimaryKey_REF_INSTRUCTIONSAsync(short? ID_INSTRCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSTRCTN",
                    Value = ID_INSTRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_INSTRUCTIONSResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_INSTRUCTIONS] @ID_INSTRCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_MEDICAL_LIMITResult>> GetByPrimaryKey_REF_MEDICAL_LIMITAsync(decimal? ID_MDCL_LMT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_LMT",
                    Precision = 1,
                    Value = ID_MDCL_LMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_MEDICAL_LIMITResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_MEDICAL_LIMIT] @ID_MDCL_LMT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_MEDICATIONResult>> GetByPrimaryKey_REF_MEDICATIONAsync(int? ID_MDCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCTN",
                    Value = ID_MDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_MEDICATIONResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_MEDICATION] @ID_MDCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_MESSAGEResult>> GetByPrimaryKey_REF_MESSAGEAsync(short? ID_MESSAGES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MESSAGES",
                    Value = ID_MESSAGES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_MESSAGEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_MESSAGE] @ID_MESSAGES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_PAST_DUE_RSNResult>> GetByPrimaryKey_REF_PAST_DUE_RSNAsync(string CD_PAST_DUE_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_PAST_DUE_RSNResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_PAST_DUE_RSN] @CD_PAST_DUE_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_PAY_DATESResult>> GetByPrimaryKey_REF_PAY_DATESAsync(int? ID_PAY_DATES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAY_DATES",
                    Value = ID_PAY_DATES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_PAY_DATESResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_PAY_DATES] @ID_PAY_DATES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_PAY_TYPEResult>> GetByPrimaryKey_REF_PAY_TYPEAsync(int? ID_PAY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAY_TYPE",
                    Value = ID_PAY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_PAY_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_PAY_TYPE] @ID_PAY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_PROVIDER_NAMEResult>> GetByPrimaryKey_REF_PROVIDER_NAMEAsync(int? ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_PROVIDER_NAMEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_PROVIDER_NAME] @ID_PRVDR_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_RACEResult>> GetByPrimaryKey_REF_RACEAsync(short? ID_RACE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_RACEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_RACE] @ID_RACE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_RB_MEALResult>> GetByPrimaryKey_REF_RB_MEALAsync(short? ID_REF_RB_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_RB_MEAL",
                    Value = ID_REF_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_RB_MEALResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_RB_MEAL] @ID_REF_RB_MEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_REJ_CLO_CODEResult>> GetByPrimaryKey_REF_REJ_CLO_CODEAsync(decimal? ID_RJCTN_CLSR_CODES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR_CODES",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_REJ_CLO_CODEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_REJ_CLO_CODE] @ID_RJCTN_CLSR_CODES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_RELATIONResult>> GetByPrimaryKey_REF_RELATIONAsync(decimal? ID_RLTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_RELATIONResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_RELATION] @ID_RLTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_RESOURCE_LIMITResult>> GetByPrimaryKey_REF_RESOURCE_LIMITAsync(short? ID_RSRC_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_LIMIT",
                    Value = ID_RSRC_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_RESOURCE_LIMITResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_RESOURCE_LIMIT] @ID_RSRC_LIMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_RESOURCE_TYPEResult>> GetByPrimaryKey_REF_RESOURCE_TYPEAsync(int? ID_RSRC_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_RESOURCE_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_RESOURCE_TYPE] @ID_RSRC_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_SANCTION_REASONResult>> GetByPrimaryKey_REF_SANCTION_REASONAsync(decimal? ID_REF_SNCTN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_SNCTN_RSN",
                    Precision = 2,
                    Value = ID_REF_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_SANCTION_REASONResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_SANCTION_REASON] @ID_REF_SNCTN_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_SHELTER_DWELLING_TYPEResult>> GetByPrimaryKey_REF_SHELTER_DWELLING_TYPEAsync(short? ID_SHLTR_DWELLNG_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_SHELTER_DWELLING_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_SHELTER_DWELLING_TYPE] @ID_SHLTR_DWELLNG_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_SHELTER_EXPENSE_TYPEResult>> GetByPrimaryKey_REF_SHELTER_EXPENSE_TYPEAsync(short? ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_SHELTER_EXPENSE_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_SHELTER_EXPENSE_TYPE] @ID_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_SHELTER_OWNERSHIPResult>> GetByPrimaryKey_REF_SHELTER_OWNERSHIPAsync(short? ID_OWNRSHP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_SHELTER_OWNERSHIPResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_SHELTER_OWNERSHIP] @ID_OWNRSHP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_UTILITY_TYPEResult>> GetByPrimaryKey_REF_UTILITY_TYPEAsync(int? ID_UTLTY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_UTILITY_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_UTILITY_TYPE] @ID_UTLTY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_VERIFICATION_DETAILResult>> GetByPrimaryKey_REF_VERIFICATION_DETAILAsync(int? ID_VRFCTN_DETAIL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DETAIL",
                    Value = ID_VRFCTN_DETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_VERIFICATION_DETAILResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_VERIFICATION_DETAIL] @ID_VRFCTN_DETAIL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_VERIFICATION_SUBTYPEResult>> GetByPrimaryKey_REF_VERIFICATION_SUBTYPEAsync(decimal? ID_REF_VRFCTN_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_SUBTYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_VERIFICATION_SUBTYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_VERIFICATION_SUBTYPE] @ID_REF_VRFCTN_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_VERIFICATION_TYPEResult>> GetByPrimaryKey_REF_VERIFICATION_TYPEAsync(decimal? ID_REF_VRFCTN_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_TYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_VERIFICATION_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_VERIFICATION_TYPE] @ID_REF_VRFCTN_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_WELCOME_MESSAGEResult>> GetByPrimaryKey_REF_WELCOME_MESSAGEAsync(short? ID_WLCM_MSSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WLCM_MSSG",
                    Value = ID_WLCM_MSSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_WELCOME_MESSAGEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_WELCOME_MESSAGE] @ID_WLCM_MSSG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REF_WORK_REG_CODEResult>> GetByPrimaryKey_REF_WORK_REG_CODEAsync(short? ID_WORK_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REF_WORK_REG_CODEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REF_WORK_REG_CODE] @ID_WORK_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REJ_CLOResult>> GetByPrimaryKey_REJ_CLOAsync(decimal? ID_RJCTN_CLSR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REJ_CLOResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REJ_CLO] @ID_RJCTN_CLSR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_REPORTINGResult>> GetByPrimaryKey_REPORTINGAsync(int? ID_RPRTNG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RPRTNG",
                    Value = ID_RPRTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_REPORTINGResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_REPORTING] @ID_RPRTNG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_RESOURCEResult>> GetByPrimaryKey_RESOURCEAsync(short? ID_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC",
                    Value = ID_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_RESOURCEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_RESOURCE] @ID_RSRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_RESTORATIONResult>> GetByPrimaryKey_RESTORATIONAsync(short? ID_RSTRTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN",
                    Value = ID_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_RESTORATIONResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_RESTORATION] @ID_RSTRTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_ROOMResult>> GetByPrimaryKey_ROOMAsync(int? IDROOM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDROOM",
                    Value = IDROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_ROOMResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_ROOM] @IDROOM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_SANCTIONResult>> GetByPrimaryKey_SANCTIONAsync(int? ID_SNCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SNCTN",
                    Value = ID_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_SANCTIONResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_SANCTION] @ID_SNCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_SHELTER_EXPENSEResult>> GetByPrimaryKey_SHELTER_EXPENSEAsync(int? ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_SHELTER_EXPENSEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_SHELTER_EXPENSE] @ID_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_SHELTER_EXPENSE_OTHER_PAYERResult>> GetByPrimaryKey_SHELTER_EXPENSE_OTHER_PAYERAsync(short? ID_SHLTR_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_SHELTER_EXPENSE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_SHELTER_EXPENSE_OTHER_PAYER] @ID_SHLTR_EXPNS_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_STRIKEResult>> GetByPrimaryKey_STRIKEAsync(int? ID_STRKR, int? IDMMBR, int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STRKR",
                    Value = ID_STRKR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDMMBR",
                    Value = IDMMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_STRIKEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_STRIKE] @ID_STRKR, @IDMMBR, @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_STUDENTResult>> GetByPrimaryKey_STUDENTAsync(int? ID_STDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STDNT",
                    Value = ID_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_STUDENTResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_STUDENT] @ID_STDNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_TRIPResult>> GetByPrimaryKey_TRIPAsync(int? ID_TRIPS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_TRIPS",
                    Value = ID_TRIPS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_TRIPResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_TRIP] @ID_TRIPS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_UNEARNED_INCOMEResult>> GetByPrimaryKey_UNEARNED_INCOMEAsync(int? ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_UNEARNED_INCOMEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_UNEARNED_INCOME] @ID_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_UNEARNED_PAYERResult>> GetByPrimaryKey_UNEARNED_PAYERAsync(int? ID_UNERND_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_PAYER",
                    Value = ID_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_UNEARNED_PAYERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_UNEARNED_PAYER] @ID_UNERND_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_UPDATE_NOTICE_TYPEResult>> GetByPrimaryKey_UPDATE_NOTICE_TYPEAsync(int? ID_UPDT_NTC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UPDT_NTC",
                    Value = ID_UPDT_NTC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_UPDATE_NOTICE_TYPEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_UPDATE_NOTICE_TYPE] @ID_UPDT_NTC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_UTILITY_EXPENSEResult>> GetByPrimaryKey_UTILITY_EXPENSEAsync(int? ID_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_UTILITY_EXPENSEResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_UTILITY_EXPENSE] @ID_UTLTY_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_UTILITY_EXPENSE_OTHER_PAYERResult>> GetByPrimaryKey_UTILITY_EXPENSE_OTHER_PAYERAsync(short? ID_UTLTY_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_UTILITY_EXPENSE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_UTILITY_EXPENSE_OTHER_PAYER] @ID_UTLTY_EXPNS_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByPrimaryKey_WAIVE_ADVERSE_ACTIONResult>> GetByPrimaryKey_WAIVE_ADVERSE_ACTIONAsync(int? ID_WAIVE_ADVRS_ACTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WAIVE_ADVRS_ACTN",
                    Value = ID_WAIVE_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByPrimaryKey_WAIVE_ADVERSE_ACTIONResult>("EXEC @returnValue = [dbo].[GetByPrimaryKey_WAIVE_ADVERSE_ACTION] @ID_WAIVE_ADVRS_ACTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByRaceCD_REF_RACEResult>> GetByRaceCD_REF_RACEAsync(short? CD_RACE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByRaceCD_REF_RACEResult>("EXEC @returnValue = [dbo].[GetByRaceCD_REF_RACE] @CD_RACE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByRaceCode_REF_RACEResult>> GetByRaceCode_REF_RACEAsync(short? ID_RACE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByRaceCode_REF_RACEResult>("EXEC @returnValue = [dbo].[GetByRaceCode_REF_RACE] @ID_RACE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByRaceDescResult>> GetByRaceDescAsync(string TX_RACE_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TX_RACE_DSCR",
                    Value = TX_RACE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByRaceDescResult>("EXEC @returnValue = [dbo].[GetByRaceDesc] @TX_RACE_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByRaceTypeResult>> GetByRaceTypeAsync(string RACETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RACETYPE",
                    Size = 1,
                    Value = RACETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByRaceTypeResult>("EXEC @returnValue = [dbo].[GetByRaceType] @RACETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetbyResCD_REF_RESOURCE_TYPEResult>> GetbyResCD_REF_RESOURCE_TYPEAsync(string CD_RSRC_CODE1, string CD_RSRC_CODE2, string CD_RSRC_CODE3, string CD_RSRC_CODE4, string CD_RSRC_CODE5, string CD_RSRC_CODE6, string CD_RSRC_CODE7, string CD_RSRC_CODE8, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE1",
                    Size = 2,
                    Value = CD_RSRC_CODE1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE2",
                    Size = 2,
                    Value = CD_RSRC_CODE2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE3",
                    Size = 2,
                    Value = CD_RSRC_CODE3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE4",
                    Size = 2,
                    Value = CD_RSRC_CODE4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE5",
                    Size = 2,
                    Value = CD_RSRC_CODE5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE6",
                    Size = 2,
                    Value = CD_RSRC_CODE6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE7",
                    Size = 2,
                    Value = CD_RSRC_CODE7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE8",
                    Size = 2,
                    Value = CD_RSRC_CODE8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetbyResCD_REF_RESOURCE_TYPEResult>("EXEC @returnValue = [dbo].[GetbyResCD_REF_RESOURCE_TYPE] @CD_RSRC_CODE1, @CD_RSRC_CODE2, @CD_RSRC_CODE3, @CD_RSRC_CODE4, @CD_RSRC_CODE5, @CD_RSRC_CODE6, @CD_RSRC_CODE7, @CD_RSRC_CODE8", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySearchADDRESSResult>> GetBySearchADDRESSAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySearchADDRESSResult>("EXEC @returnValue = [dbo].[GetBySearchADDRESS] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySearchADDRESSUnknownResult>> GetBySearchADDRESSUnknownAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySearchADDRESSUnknownResult>("EXEC @returnValue = [dbo].[GetBySearchADDRESSUnknown]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySearchARResult>> GetBySearchARAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySearchARResult>("EXEC @returnValue = [dbo].[GetBySearchAR] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySearchCaseResult>> GetBySearchCaseAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySearchCaseResult>("EXEC @returnValue = [dbo].[GetBySearchCase] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySearchCaseIDResult>> GetBySearchCaseIDAsync(int? IDCASENBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENBR",
                    Value = IDCASENBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySearchCaseIDResult>("EXEC @returnValue = [dbo].[GetBySearchCaseID] @IDCASENBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySearchMemberResult>> GetBySearchMemberAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySearchMemberResult>("EXEC @returnValue = [dbo].[GetBySearchMember] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySourceActive_RegisteredApplicationsResult>> GetBySourceActive_RegisteredApplicationsAsync(string CD_SOURCE, string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_SOURCE",
                    Size = 1,
                    Value = CD_SOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySourceActive_RegisteredApplicationsResult>("EXEC @returnValue = [dbo].[GetBySourceActive_RegisteredApplications] @CD_SOURCE, @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySourceActiveCompletedRegisteredResult>> GetBySourceActiveCompletedRegisteredAsync(string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySourceActiveCompletedRegisteredResult>("EXEC @returnValue = [dbo].[GetBySourceActiveCompletedRegistered] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySourceActiveCompletedRegistered_DSNAPResult>> GetBySourceActiveCompletedRegistered_DSNAPAsync(string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySourceActiveCompletedRegistered_DSNAPResult>("EXEC @returnValue = [dbo].[GetBySourceActiveCompletedRegistered_DSNAP] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySourceActiveCompletedRegistered1Result>> GetBySourceActiveCompletedRegistered1Async(string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySourceActiveCompletedRegistered1Result>("EXEC @returnValue = [dbo].[GetBySourceActiveCompletedRegistered1] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySourceActiveCompletedRegisteredSmallResult>> GetBySourceActiveCompletedRegisteredSmallAsync(string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySourceActiveCompletedRegisteredSmallResult>("EXEC @returnValue = [dbo].[GetBySourceActiveCompletedRegisteredSmall] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySSN_MEMBERResult>> GetBySSN_MEMBERAsync(string SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySSN_MEMBERResult>("EXEC @returnValue = [dbo].[GetBySSN_MEMBER] @SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySSN_MEMBER_IDMBRResult>> GetBySSN_MEMBER_IDMBRAsync(string SSN, decimal? NOCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Precision = 9,
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySSN_MEMBER_IDMBRResult>("EXEC @returnValue = [dbo].[GetBySSN_MEMBER_IDMBR] @SSN, @NOCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBySSNMemberMedResult>> GetBySSNMemberMedAsync(string NO_SSN, string LNAMEPart, string DTBRTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "LNAMEPart",
                    Size = 20,
                    Value = LNAMEPart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DTBRTH",
                    Size = 10,
                    Value = DTBRTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBySSNMemberMedResult>("EXEC @returnValue = [dbo].[GetBySSNMemberMed] @NO_SSN, @LNAMEPart, @DTBRTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByState_REF_STATEResult>> GetByState_REF_STATEAsync(string STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STATE",
                    Size = 20,
                    Value = STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByState_REF_STATEResult>("EXEC @returnValue = [dbo].[GetByState_REF_STATE] @STATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByText_UnearnedIncTypeResult>> GetByText_UnearnedIncTypeAsync(string TX_UNERND_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TX_UNERND_SUBTYPE",
                    Value = TX_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByText_UnearnedIncTypeResult>("EXEC @returnValue = [dbo].[GetByText_UnearnedIncType] @TX_UNERND_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByTxIncmDscr_REF_EARNED_INCOME_TYPEResult>> GetByTxIncmDscr_REF_EARNED_INCOME_TYPEAsync(string TX_INCM_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TX_INCM_DSCR",
                    Value = TX_INCM_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByTxIncmDscr_REF_EARNED_INCOME_TYPEResult>("EXEC @returnValue = [dbo].[GetByTxIncmDscr_REF_EARNED_INCOME_TYPE] @TX_INCM_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByUserCnty_CASEResult>> GetByUserCnty_CASEAsync(int? CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByUserCnty_CASEResult>("EXEC @returnValue = [dbo].[GetByUserCnty_CASE] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByVrfctnSubtype_REF_VERIFICATION_DETAILResult>> GetByVrfctnSubtype_REF_VERIFICATION_DETAILAsync(decimal? REF_VRFCTN_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "REF_VRFCTN_SUBTYPE",
                    Precision = 2,
                    Value = REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByVrfctnSubtype_REF_VERIFICATION_DETAILResult>("EXEC @returnValue = [dbo].[GetByVrfctnSubtype_REF_VERIFICATION_DETAIL] @REF_VRFCTN_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetByVrfctnSubtypeTx_REF_VERIFICATION_DETAILResult>> GetByVrfctnSubtypeTx_REF_VERIFICATION_DETAILAsync(string REF_VRFCTN_SUBTYPE_TX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "REF_VRFCTN_SUBTYPE_TX",
                    Size = 2,
                    Value = REF_VRFCTN_SUBTYPE_TX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetByVrfctnSubtypeTx_REF_VERIFICATION_DETAILResult>("EXEC @returnValue = [dbo].[GetByVrfctnSubtypeTx_REF_VERIFICATION_DETAIL] @REF_VRFCTN_SUBTYPE_TX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCASESTATUS_DescResult>> GetCASESTATUS_DescAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCASESTATUS_DescResult>("EXEC @returnValue = [dbo].[GetCASESTATUS_Desc] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCASESTATUS_IDResult>> GetCASESTATUS_IDAsync(string CD_CASE_STTS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CASE_STTS_TYPE",
                    Size = 2,
                    Value = CD_CASE_STTS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCASESTATUS_IDResult>("EXEC @returnValue = [dbo].[GetCASESTATUS_ID] @CD_CASE_STTS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountableHHMembersListResult>> GetCountableHHMembersListAsync(int? ID_CASE_NMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountableHHMembersListResult>("EXEC @returnValue = [dbo].[GetCountableHHMembersList] @ID_CASE_NMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountOf_T_EligMemsExpensesResult>> GetCountOf_T_EligMemsExpensesAsync(int? IDCASENMBR, int? ID_MMBR, string RECTYPE, string MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RECTYPE",
                    Size = 2,
                    Value = RECTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MONTH",
                    Size = 1,
                    Value = MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountOf_T_EligMemsExpensesResult>("EXEC @returnValue = [dbo].[GetCountOf_T_EligMemsExpenses] @IDCASENMBR, @ID_MMBR, @RECTYPE, @MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountofCountableHouseholdMembersResult>> GetCountofCountableHouseholdMembersAsync(int? ID_CASE_NMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountofCountableHouseholdMembersResult>("EXEC @returnValue = [dbo].[GetCountofCountableHouseholdMembers] @ID_CASE_NMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountofEligibleHHMembersResult>> GetCountofEligibleHHMembersAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountofEligibleHHMembersResult>("EXEC @returnValue = [dbo].[GetCountofEligibleHHMembers] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountofHouseholdMembersResult>> GetCountofHouseholdMembersAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountofHouseholdMembersResult>("EXEC @returnValue = [dbo].[GetCountofHouseholdMembers] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountOfSRCasesSixMonthCertsResult>> GetCountOfSRCasesSixMonthCertsAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountOfSRCasesSixMonthCertsResult>("EXEC @returnValue = [dbo].[GetCountOfSRCasesSixMonthCerts] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountOfSRCasesSixMonthCerts_CrosstabResult>> GetCountOfSRCasesSixMonthCerts_CrosstabAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountOfSRCasesSixMonthCerts_CrosstabResult>("EXEC @returnValue = [dbo].[GetCountOfSRCasesSixMonthCerts_Crosstab] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCSExpensesSummaryByCaseIDResult>> GetCSExpensesSummaryByCaseIDAsync(int? ID_CASE_NMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCSExpensesSummaryByCaseIDResult>("EXEC @returnValue = [dbo].[GetCSExpensesSummaryByCaseID] @ID_CASE_NMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCSExpensesSummaryByIDMmbrResult>> GetCSExpensesSummaryByIDMmbrAsync(int? ID_CASE_NMBR, int? ID_MMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCSExpensesSummaryByIDMmbrResult>("EXEC @returnValue = [dbo].[GetCSExpensesSummaryByIDMmbr] @ID_CASE_NMBR, @ID_MMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDepCareOtherResult>> GetDepCareOtherAsync(int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDepCareOtherResult>("EXEC @returnValue = [dbo].[GetDepCareOther] @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDisqualifiedMmbrByIDCaseNmbrResult>> GetDisqualifiedMmbrByIDCaseNmbrAsync(int? ID_CASE_NMBR, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 2,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDisqualifiedMmbrByIDCaseNmbrResult>("EXEC @returnValue = [dbo].[GetDisqualifiedMmbrByIDCaseNmbr] @ID_CASE_NMBR, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEbtByIDCaseNmbr_AR_RPRSNTTVResult>> GetEbtByIDCaseNmbr_AR_RPRSNTTVAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEbtByIDCaseNmbr_AR_RPRSNTTVResult>("EXEC @returnValue = [dbo].[GetEbtByIDCaseNmbr_AR_RPRSNTTV] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployersAddressVQResult>> GetEmployersAddressVQAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployersAddressVQResult>("EXEC @returnValue = [dbo].[GetEmployersAddressVQ] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployersSanctionVQResult>> GetEmployersSanctionVQAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployersSanctionVQResult>("EXEC @returnValue = [dbo].[GetEmployersSanctionVQ] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEmployersVQResult>> GetEmployersVQAsync(int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEmployersVQResult>("EXEC @returnValue = [dbo].[GetEmployersVQ] @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFAStatusByIDMMBRResult>> GetFAStatusByIDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFAStatusByIDMMBRResult>("EXEC @returnValue = [dbo].[GetFAStatusByIDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFAStatusLastMonthByIDMMBRResult>> GetFAStatusLastMonthByIDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFAStatusLastMonthByIDMMBRResult>("EXEC @returnValue = [dbo].[GetFAStatusLastMonthByIDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFAStatusThisMonthByIDMMBRResult>> GetFAStatusThisMonthByIDMMBRAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFAStatusThisMonthByIDMMBRResult>("EXEC @returnValue = [dbo].[GetFAStatusThisMonthByIDMMBR] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetHashCodeAsync(string input, OutputParameter<int?> hash, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterhash = new SqlParameter
            {
                ParameterName = "hash",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = hash?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "input",
                    Size = 280,
                    Value = input ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterhash,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetHashCode] @input, @hash OUTPUT", sqlParameters, cancellationToken);

            hash.SetValue(parameterhash.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetHHExpensesResult>> GetHHExpensesAsync(int? ID_CASE_NMBR, int? ID_MMBR, string EXPNS_TYPE, string CD_MONTH, int? ID_PRVDR_NAME, string EXPNS_SUBTYPE, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EXPNS_TYPE",
                    Size = 2,
                    Value = EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EXPNS_SUBTYPE",
                    Size = 2,
                    Value = EXPNS_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetHHExpensesResult>("EXEC @returnValue = [dbo].[GetHHExpenses] @ID_CASE_NMBR, @ID_MMBR, @EXPNS_TYPE, @CD_MONTH, @ID_PRVDR_NAME, @EXPNS_SUBTYPE, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIndividualCSAmountsResult>> GetIndividualCSAmountsAsync(int? ID_CASE_NMBR, string CASE_TYPE, string EXPEDITE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_CODE",
                    Size = 1,
                    Value = EXPEDITE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIndividualCSAmountsResult>("EXEC @returnValue = [dbo].[GetIndividualCSAmounts] @ID_CASE_NMBR, @CASE_TYPE, @EXPEDITE_CODE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIntervieweeMmbrResult>> GetIntervieweeMmbrAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIntervieweeMmbrResult>("EXEC @returnValue = [dbo].[GetIntervieweeMmbr] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLifeline_CASESResult>> GetLifeline_CASESAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLifeline_CASESResult>("EXEC @returnValue = [dbo].[GetLifeline_CASES]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        //public virtual async Task<int> GetMajorVersionAsync(OutputParameter<int?> @ver, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        //{
        //    var parameter@ver = new SqlParameter
        //    {
        //        ParameterName = "@ver",
        //        Direction = System.Data.ParameterDirection.InputOutput,
        //        Value = @ver?._value ?? Convert.DBNull,
        //        SqlDbType = System.Data.SqlDbType.Int,
        //    };
        //    var parameterreturnValue = new SqlParameter
        //    {
        //        ParameterName = "returnValue",
        //        Direction = System.Data.ParameterDirection.Output,
        //        SqlDbType = System.Data.SqlDbType.Int,
        //    };

        //    var sqlParameters = new []
        //    {
        //        parameter@ver,
        //        parameterreturnValue,
        //    };
        //    var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetMajorVersion] @@ver OUTPUT", sqlParameters, cancellationToken);

        //    @ver.SetValue(parameter@ver.Value);
        //    returnValue?.SetValue(parameterreturnValue.Value);

        //    return _;
        //}

        public virtual async Task<List<GetMemberDisqualifiedResult>> GetMemberDisqualifiedAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetMemberDisqualifiedResult>("EXEC @returnValue = [dbo].[GetMemberDisqualified] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetMemTotalArrearsResult>> GetMemTotalArrearsAsync(int? ID_CASE_NMBR, int? ID_MMBR, string CD_MONTH, string EXPEDITE_FLAG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPEDITE_FLAG",
                    Size = 1,
                    Value = EXPEDITE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetMemTotalArrearsResult>("EXEC @returnValue = [dbo].[GetMemTotalArrears] @ID_CASE_NMBR, @ID_MMBR, @CD_MONTH, @EXPEDITE_FLAG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetMmbrsBilledforDepCareResult>> GetMmbrsBilledforDepCareAsync(int? ID_CASE_NMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetMmbrsBilledforDepCareResult>("EXEC @returnValue = [dbo].[GetMmbrsBilledforDepCare] @ID_CASE_NMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetNVRA_AddressChangePopupResult>> GetNVRA_AddressChangePopupAsync(DateTime? STARTDT, DateTime? ENDDT, string CD_CNTY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_DSCR",
                    Size = 15,
                    Value = CD_CNTY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetNVRA_AddressChangePopupResult>("EXEC @returnValue = [dbo].[GetNVRA_AddressChangePopup] @STARTDT, @ENDDT, @CD_CNTY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetNVRAActions_InterviewResult>> GetNVRAActions_InterviewAsync(DateTime? STARTDT, DateTime? ENDDT, string CD_CNTY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_DSCR",
                    Size = 15,
                    Value = CD_CNTY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetNVRAActions_InterviewResult>("EXEC @returnValue = [dbo].[GetNVRAActions_Interview] @STARTDT, @ENDDT, @CD_CNTY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPendingVerificationsResult>> GetPendingVerificationsAsync(int? ID_CASE_NMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPendingVerificationsResult>("EXEC @returnValue = [dbo].[GetPendingVerifications] @ID_CASE_NMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetReinstatedAESAPCasesTerm14Result>> GetReinstatedAESAPCasesTerm14Async(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetReinstatedAESAPCasesTerm14Result>("EXEC @returnValue = [dbo].[GetReinstatedAESAPCasesTerm14] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetReinstatedAESAPCasesTerm14_TotalsOnlyResult>> GetReinstatedAESAPCasesTerm14_TotalsOnlyAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetReinstatedAESAPCasesTerm14_TotalsOnlyResult>("EXEC @returnValue = [dbo].[GetReinstatedAESAPCasesTerm14_TotalsOnly] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetReinstatedAESAPCasesTerm41Result>> GetReinstatedAESAPCasesTerm41Async(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetReinstatedAESAPCasesTerm41Result>("EXEC @returnValue = [dbo].[GetReinstatedAESAPCasesTerm41] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetReinstatedAESAPCasesTerm41_TotalsOnlyResult>> GetReinstatedAESAPCasesTerm41_TotalsOnlyAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetReinstatedAESAPCasesTerm41_TotalsOnlyResult>("EXEC @returnValue = [dbo].[GetReinstatedAESAPCasesTerm41_TotalsOnly] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetReopenVfcnCasesLessTwelveMonthCertResult>> GetReopenVfcnCasesLessTwelveMonthCertAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetReopenVfcnCasesLessTwelveMonthCertResult>("EXEC @returnValue = [dbo].[GetReopenVfcnCasesLessTwelveMonthCert] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetReopenVfcnCasesLessTwelveMonthCert_TotalsOnlyResult>> GetReopenVfcnCasesLessTwelveMonthCert_TotalsOnlyAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetReopenVfcnCasesLessTwelveMonthCert_TotalsOnlyResult>("EXEC @returnValue = [dbo].[GetReopenVfcnCasesLessTwelveMonthCert_TotalsOnly] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetResourceSummaryResult>> GetResourceSummaryAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetResourceSummaryResult>("EXEC @returnValue = [dbo].[GetResourceSummary] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetResourceSummary_M1Result>> GetResourceSummary_M1Async(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetResourceSummary_M1Result>("EXEC @returnValue = [dbo].[GetResourceSummary_M1] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetResourceSummary_M2Result>> GetResourceSummary_M2Async(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetResourceSummary_M2Result>("EXEC @returnValue = [dbo].[GetResourceSummary_M2] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetResponsibleMemberResult>> GetResponsibleMemberAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetResponsibleMemberResult>("EXEC @returnValue = [dbo].[GetResponsibleMember] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetRetroRestoreRsn_AwardDenyResult>> GetRetroRestoreRsn_AwardDenyAsync(string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetRetroRestoreRsn_AwardDenyResult>("EXEC @returnValue = [dbo].[GetRetroRestoreRsn_AwardDeny] @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetShelterExpOtherResult>> GetShelterExpOtherAsync(int? ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetShelterExpOtherResult>("EXEC @returnValue = [dbo].[GetShelterExpOther] @ID_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSRCasesSixMonthCertsResult>> GetSRCasesSixMonthCertsAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSRCasesSixMonthCertsResult>("EXEC @returnValue = [dbo].[GetSRCasesSixMonthCerts] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSRCasesSixMonthCerts_TotalsOnlyResult>> GetSRCasesSixMonthCerts_TotalsOnlyAsync(DateTime? STARTDT, DateTime? ENDDT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STARTDT",
                    Value = STARTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ENDDT",
                    Value = ENDDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSRCasesSixMonthCerts_TotalsOnlyResult>("EXEC @returnValue = [dbo].[GetSRCasesSixMonthCerts_TotalsOnly] @STARTDT, @ENDDT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetSumBrdrHHNo_MemberAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetSumBrdrHHNo_Member] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTheEmployersResult>> GetTheEmployersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTheEmployersResult>("EXEC @returnValue = [dbo].[GetTheEmployers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTheEmployersByCntyCdResult>> GetTheEmployersByCntyCdAsync(int? CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTheEmployersByCntyCdResult>("EXEC @returnValue = [dbo].[GetTheEmployersByCntyCd] @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTheEmployersByIDResult>> GetTheEmployersByIDAsync(int? ID_EMPLOLYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLOLYER",
                    Value = ID_EMPLOLYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTheEmployersByIDResult>("EXEC @returnValue = [dbo].[GetTheEmployersByID] @ID_EMPLOLYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTotalMembersResult>> GetTotalMembersAsync(int? ID_CASE_NMBR, string SQLTYPE, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 2,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTotalMembersResult>("EXEC @returnValue = [dbo].[GetTotalMembers] @ID_CASE_NMBR, @SQLTYPE, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTransferResourceSummaryResult>> GetTransferResourceSummaryAsync(int? IDCASENMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTransferResourceSummaryResult>("EXEC @returnValue = [dbo].[GetTransferResourceSummary] @IDCASENMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUnearnedIncSSIResult>> GetUnearnedIncSSIAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUnearnedIncSSIResult>("EXEC @returnValue = [dbo].[GetUnearnedIncSSI] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUnearnedIncTypeResult>> GetUnearnedIncTypeAsync(string UNEARNED_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UNEARNED_TYPE",
                    Size = 2,
                    Value = UNEARNED_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUnearnedIncTypeResult>("EXEC @returnValue = [dbo].[GetUnearnedIncType] @UNEARNED_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVQSanctionsResult>> GetVQSanctionsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVQSanctionsResult>("EXEC @returnValue = [dbo].[GetVQSanctions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVrfctnforRoomMealsResult>> GetVrfctnforRoomMealsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVrfctnforRoomMealsResult>("EXEC @returnValue = [dbo].[GetVrfctnforRoomMeals]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetyPayrollNbr_SECURITYResult>> GetyPayrollNbr_SECURITYAsync(string CD_PAYROLL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_PAYROLL",
                    Size = 9,
                    Value = CD_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetyPayrollNbr_SECURITYResult>("EXEC @returnValue = [dbo].[GetyPayrollNbr_SECURITY] @CD_PAYROLL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMP_Util_ExpAsync(int? ID_NEWCASE, string CD_DEDUCTION, int? ID_HAC_MEMBER, string FL_HEAT_AC, string FL_LIHEAP, string FL_PHONE, string FL_ELECTRICITY, string FL_GAS, string FL_OIL, string FL_WATER, string FL_GARBAGE, string FL_OTHER_UTILITY, string FL_OUTSIDE_PAY, string OUTSIDE_PAY_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DEDUCTION",
                    Size = 1,
                    Value = CD_DEDUCTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_HAC_MEMBER",
                    Value = ID_HAC_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HEAT_AC",
                    Size = 1,
                    Value = FL_HEAT_AC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LIHEAP",
                    Size = 1,
                    Value = FL_LIHEAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PHONE",
                    Size = 1,
                    Value = FL_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELECTRICITY",
                    Size = 1,
                    Value = FL_ELECTRICITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GAS",
                    Size = 1,
                    Value = FL_GAS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OIL",
                    Size = 1,
                    Value = FL_OIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WATER",
                    Size = 1,
                    Value = FL_WATER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GARBAGE",
                    Size = 1,
                    Value = FL_GARBAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OTHER_UTILITY",
                    Size = 1,
                    Value = FL_OTHER_UTILITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_PAY",
                    Size = 1,
                    Value = FL_OUTSIDE_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OUTSIDE_PAY_NAME",
                    Size = 50,
                    Value = OUTSIDE_PAY_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMP_Util_Exp] @ID_NEWCASE, @CD_DEDUCTION, @ID_HAC_MEMBER, @FL_HEAT_AC, @FL_LIHEAP, @FL_PHONE, @FL_ELECTRICITY, @FL_GAS, @FL_OIL, @FL_WATER, @FL_GARBAGE, @FL_OTHER_UTILITY, @FL_OUTSIDE_PAY, @OUTSIDE_PAY_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
        
        public virtual async Task<int> IMPORT_ApplicationEntryAsync(string START_DT, string SIGNED_DT, string APP_ID, string USER_ID, string APP_TYPE, string CASENO, string CNTY_SUB, string CNTY_OFF, string MAIL_ADD1, string MAIL_ADD2, string MAIL_CITY, string MAIL_STATE, string MAIL_ZIP, string MAIL_COUNTY, string RSDNC_ADD1, string RSDNC_ADD2, string RSDNC_CITY, string RSDNC_STATE, string RSDNC_ZIP, string RSDNC_CNTY, string RSDNC_OFFC, string HOME_PHONE, string WORK_PHONE, string MSSG_PHONE, string CELL_PHONE, string EMAIL, string AUREP_FRST_NM, string AUREP_MIDD_NM, string AUREP_LAST_NM, string AUREP_PHONE, string EBTREP_FRST_NM, string EBTREP_MIDD_NM, string EBTREP_LAST_NM, string EBTREP_PHONE, int? HOH_ID, int? APPLCNT_ID, string EXPDTD, string ORGNL_MAIL_ADD, string PHNINTRVW, string MYDHR_APPL_NM, string MYDHR_APPL_ADDR, string MYDHR_APPL_PHN, string MYDHR_FL_APPL, string MYDHR_MIGRANT_EXPEDITE_FL, string MYDHR_INC_EXP_EXPEDITE_FL, bool? MYDHR_LN_POTENTIALLY_FRAUDULENT, bool? MYDHR_LN_OptOut, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "START_DT",
                    Size = 8,
                    Value = START_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SIGNED_DT",
                    Size = 8,
                    Value = SIGNED_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "APP_ID",
                    Size = 36,
                    Value = APP_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "USER_ID",
                    Size = 36,
                    Value = USER_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "APP_TYPE",
                    Size = 10,
                    Value = APP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CASENO",
                    Size = 18,
                    Value = CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNTY_SUB",
                    Size = 4,
                    Value = CNTY_SUB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "CNTY_OFF",
                    Size = 4,
                    Value = CNTY_OFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAIL_ADD1",
                    Size = 25,
                    Value = MAIL_ADD1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAIL_ADD2",
                    Size = 25,
                    Value = MAIL_ADD2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAIL_CITY",
                    Size = 25,
                    Value = MAIL_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MAIL_STATE",
                    Size = 2,
                    Value = MAIL_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MAIL_ZIP",
                    Size = 5,
                    Value = MAIL_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MAIL_COUNTY",
                    Size = 2,
                    Value = MAIL_COUNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RSDNC_ADD1",
                    Size = 25,
                    Value = RSDNC_ADD1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RSDNC_ADD2",
                    Size = 25,
                    Value = RSDNC_ADD2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RSDNC_CITY",
                    Size = 25,
                    Value = RSDNC_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RSDNC_STATE",
                    Size = 2,
                    Value = RSDNC_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RSDNC_ZIP",
                    Size = 5,
                    Value = RSDNC_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RSDNC_CNTY",
                    Size = 2,
                    Value = RSDNC_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RSDNC_OFFC",
                    Size = 2,
                    Value = RSDNC_OFFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HOME_PHONE",
                    Size = 12,
                    Value = HOME_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WORK_PHONE",
                    Size = 12,
                    Value = WORK_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MSSG_PHONE",
                    Size = 12,
                    Value = MSSG_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CELL_PHONE",
                    Size = 12,
                    Value = CELL_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EMAIL",
                    Size = 30,
                    Value = EMAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AUREP_FRST_NM",
                    Size = 20,
                    Value = AUREP_FRST_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AUREP_MIDD_NM",
                    Size = 20,
                    Value = AUREP_MIDD_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AUREP_LAST_NM",
                    Size = 20,
                    Value = AUREP_LAST_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AUREP_PHONE",
                    Size = 12,
                    Value = AUREP_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EBTREP_FRST_NM",
                    Size = 20,
                    Value = EBTREP_FRST_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EBTREP_MIDD_NM",
                    Size = 20,
                    Value = EBTREP_MIDD_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EBTREP_LAST_NM",
                    Size = 20,
                    Value = EBTREP_LAST_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EBTREP_PHONE",
                    Size = 12,
                    Value = EBTREP_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HOH_ID",
                    Value = HOH_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "APPLCNT_ID",
                    Value = APPLCNT_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EXPDTD",
                    Size = 1,
                    Value = EXPDTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ORGNL_MAIL_ADD",
                    Size = 200,
                    Value = ORGNL_MAIL_ADD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PHNINTRVW",
                    Size = 1,
                    Value = PHNINTRVW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_APPL_NM",
                    Size = 60,
                    Value = MYDHR_APPL_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_APPL_ADDR",
                    Size = 100,
                    Value = MYDHR_APPL_ADDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_APPL_PHN",
                    Size = 10,
                    Value = MYDHR_APPL_PHN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_FL_APPL",
                    Size = 1,
                    Value = MYDHR_FL_APPL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_MIGRANT_EXPEDITE_FL",
                    Size = 1,
                    Value = MYDHR_MIGRANT_EXPEDITE_FL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_INC_EXP_EXPEDITE_FL",
                    Size = 1,
                    Value = MYDHR_INC_EXP_EXPEDITE_FL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_LN_POTENTIALLY_FRAUDULENT",
                    Value = MYDHR_LN_POTENTIALLY_FRAUDULENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_LN_OptOut",
                    Value = MYDHR_LN_OptOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_ApplicationEntry] @START_DT, @SIGNED_DT, @APP_ID, @USER_ID, @APP_TYPE, @CASENO, @CNTY_SUB, @CNTY_OFF, @MAIL_ADD1, @MAIL_ADD2, @MAIL_CITY, @MAIL_STATE, @MAIL_ZIP, @MAIL_COUNTY, @RSDNC_ADD1, @RSDNC_ADD2, @RSDNC_CITY, @RSDNC_STATE, @RSDNC_ZIP, @RSDNC_CNTY, @RSDNC_OFFC, @HOME_PHONE, @WORK_PHONE, @MSSG_PHONE, @CELL_PHONE, @EMAIL, @AUREP_FRST_NM, @AUREP_MIDD_NM, @AUREP_LAST_NM, @AUREP_PHONE, @EBTREP_FRST_NM, @EBTREP_MIDD_NM, @EBTREP_LAST_NM, @EBTREP_PHONE, @HOH_ID, @APPLCNT_ID, @EXPDTD, @ORGNL_MAIL_ADD, @PHNINTRVW, @MYDHR_APPL_NM, @MYDHR_APPL_ADDR, @MYDHR_APPL_PHN, @MYDHR_FL_APPL, @MYDHR_MIGRANT_EXPEDITE_FL, @MYDHR_INC_EXP_EXPEDITE_FL, @MYDHR_LN_POTENTIALLY_FRAUDULENT, @MYDHR_LN_OptOut", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
        
        public virtual async Task<int> IMPORT_CheckHolidayAsync(DateTime? MYDATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MYDATE",
                    Value = MYDATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_CheckHoliday] @MYDATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_ChildSupportAsync(int? MMBR_ID, string PAID_TO, decimal? AMOUNT, string FREQUENCY, string CHILDREN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PAID_TO",
                    Size = 50,
                    Value = PAID_TO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AMOUNT",
                    Precision = 8,
                    Scale = 2,
                    Value = AMOUNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FREQUENCY",
                    Size = 2,
                    Value = FREQUENCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CHILDREN",
                    Size = 50,
                    Value = CHILDREN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_ChildSupport] @MMBR_ID, @PAID_TO, @AMOUNT, @FREQUENCY, @CHILDREN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_DeleteApplicationAsync(int? CASEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASEID",
                    Value = CASEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_DeleteApplication] @CASEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_DependentCareAsync(int? MMBR_ID, decimal? AMOUNT, string FREQUENCY, string NM_STTR, string PHN_STTR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AMOUNT",
                    Precision = 8,
                    Scale = 2,
                    Value = AMOUNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FREQUENCY",
                    Size = 2,
                    Value = FREQUENCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_STTR",
                    Size = 50,
                    Value = NM_STTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PHN_STTR",
                    Size = 10,
                    Value = PHN_STTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_DependentCare] @MMBR_ID, @AMOUNT, @FREQUENCY, @NM_STTR, @PHN_STTR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_DuplicateBenefitsAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_DuplicateBenefits] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_EmploymentAsync(int? MMBR_ID, string CMPNY_NM, string CMPNY_PHN, decimal? PAY_AMNT, string PAY_FRQCY, int? HOURS_WORKED, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CMPNY_NM",
                    Size = 16,
                    Value = CMPNY_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CMPNY_PHN",
                    Size = 12,
                    Value = CMPNY_PHN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PAY_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = PAY_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "PAY_FRQCY",
                    Size = 2,
                    Value = PAY_FRQCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HOURS_WORKED",
                    Value = HOURS_WORKED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_Employment] @MMBR_ID, @CMPNY_NM, @CMPNY_PHN, @PAY_AMNT, @PAY_FRQCY, @HOURS_WORKED", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_FelonAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_Felon] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
        
        public virtual async Task<List<IMPORT_GetAppStatusResult>> IMPORT_GetAppStatusAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IMPORT_GetAppStatusResult>("EXEC @returnValue = [dbo].[IMPORT_GetAppStatus]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_LiquidResourceAsync(int? MMBR_ID, string LR_TYPE, decimal? AMOUNT, string INFO_1, string INFO_2, string INFO_3, string INFO_4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LR_TYPE",
                    Size = 20,
                    Value = LR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AMOUNT",
                    Precision = 8,
                    Scale = 2,
                    Value = AMOUNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "INFO_1",
                    Size = 30,
                    Value = INFO_1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "INFO_2",
                    Size = 31,
                    Value = INFO_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "INFO_3",
                    Size = 32,
                    Value = INFO_3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "INFO_4",
                    Size = 33,
                    Value = INFO_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_LiquidResource] @MMBR_ID, @LR_TYPE, @AMOUNT, @INFO_1, @INFO_2, @INFO_3, @INFO_4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_MedicalExpenseAsync(int? MMBR_ID, string TYPE, decimal? AMOUNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TYPE",
                    Size = 20,
                    Value = TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AMOUNT",
                    Precision = 8,
                    Scale = 2,
                    Value = AMOUNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_MedicalExpense] @MMBR_ID, @TYPE, @AMOUNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_MemberEntryAsync(int? CASEID, int? DPNDNT_NO, string HOH, string APPID, int? PRSN_ID, string RELATION, string ETHNCTY, string USCTZN, string SSN, string FIRST_NM, string MID_NM, string LAST_NM, string SUFFIX, string DOB, string SEX, string RACE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASEID",
                    Value = CASEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DPNDNT_NO",
                    Value = DPNDNT_NO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HOH",
                    Size = 1,
                    Value = HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "APPID",
                    Size = 36,
                    Value = APPID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PRSN_ID",
                    Value = PRSN_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RELATION",
                    Size = 2,
                    Value = RELATION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ETHNCTY",
                    Size = 1,
                    Value = ETHNCTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "USCTZN",
                    Size = 1,
                    Value = USCTZN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FIRST_NM",
                    Size = 20,
                    Value = FIRST_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MID_NM",
                    Size = 20,
                    Value = MID_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LAST_NM",
                    Size = 20,
                    Value = LAST_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SUFFIX",
                    Size = 3,
                    Value = SUFFIX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Size = 8,
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SEX",
                    Size = 1,
                    Value = SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RACE",
                    Size = 2,
                    Value = RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_MemberEntry] @CASEID, @DPNDNT_NO, @HOH, @APPID, @PRSN_ID, @RELATION, @ETHNCTY, @USCTZN, @SSN, @FIRST_NM, @MID_NM, @LAST_NM, @SUFFIX, @DOB, @SEX, @RACE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_MigrantWorkerAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_MigrantWorker] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_MultipleHHAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_MultipleHH] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_ParoleAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_Parole] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_RoomerBoarderAsync(int? MMBR_ID, decimal? AMOUNT, string FREQUENCY, short? MEALS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AMOUNT",
                    Precision = 8,
                    Scale = 2,
                    Value = AMOUNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FREQUENCY",
                    Size = 2,
                    Value = FREQUENCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MEALS",
                    Value = MEALS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_RoomerBoarder] @MMBR_ID, @AMOUNT, @FREQUENCY, @MEALS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_SelfEmploymentAsync(int? MMBR_ID, string CMPNY_NM, string CMPNY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CMPNY_NM",
                    Size = 16,
                    Value = CMPNY_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CMPNY_TYPE",
                    Size = 50,
                    Value = CMPNY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_SelfEmployment] @MMBR_ID, @CMPNY_NM, @CMPNY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_ShelterExpenseAsync(int? MMBR_ID, string PAY_TYPE, string SHLTR_TYPE, decimal? PAY_AMNT, decimal? LOT_AMNT, string LOT_FRQNCY, decimal? PROP_TAX, decimal? INSRNC, string INSRNC_FRQNCY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PAY_TYPE",
                    Size = 20,
                    Value = PAY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SHLTR_TYPE",
                    Size = 20,
                    Value = SHLTR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PAY_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = PAY_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "LOT_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = LOT_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "LOT_FRQNCY",
                    Size = 2,
                    Value = LOT_FRQNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PROP_TAX",
                    Precision = 8,
                    Scale = 2,
                    Value = PROP_TAX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "INSRNC",
                    Precision = 8,
                    Scale = 2,
                    Value = INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "INSRNC_FRQNCY",
                    Size = 2,
                    Value = INSRNC_FRQNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_ShelterExpense] @MMBR_ID, @PAY_TYPE, @SHLTR_TYPE, @PAY_AMNT, @LOT_AMNT, @LOT_FRQNCY, @PROP_TAX, @INSRNC, @INSRNC_FRQNCY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_StampFraudAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_StampFraud] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_StampsForWeaponsAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_StampsForWeapons] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_StampTraffickingAsync(int? MMBR_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_StampTrafficking] @MMBR_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_StrikerAsync(int? MMBR_ID, string CMPNY_NM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CMPNY_NM",
                    Size = 30,
                    Value = CMPNY_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_Striker] @MMBR_ID, @CMPNY_NM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_StudentAsync(int? MMBR_ID, string SCHL_NM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCHL_NM",
                    Size = 32,
                    Value = SCHL_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_Student] @MMBR_ID, @SCHL_NM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_UnearnedIncomeAsync(int? MMBR_ID, string TYPE, decimal? AMOUNT, string FREQUENCY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TYPE",
                    Size = 30,
                    Value = TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AMOUNT",
                    Precision = 8,
                    Scale = 2,
                    Value = AMOUNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FREQUENCY",
                    Size = 2,
                    Value = FREQUENCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_UnearnedIncome] @MMBR_ID, @TYPE, @AMOUNT, @FREQUENCY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
        
        public virtual async Task<int> IMPORT_UpdateApplicationAsync(int? CASEID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CASEID",
                    Value = CASEID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_UpdateApplication] @CASEID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_UpdateAppStatusTblAsync(string APP_ID, bool? START_BT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "APP_ID",
                    Size = 36,
                    Value = APP_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "START_BT",
                    Value = START_BT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_UpdateAppStatusTbl] @APP_ID, @START_BT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_UtilityExpenseAsync(int? MMBR_ID, decimal? PHN_AMNT, decimal? ELCTRC_AMNT, decimal? GAS_AMNT, decimal? OIL_AMNT, decimal? WATER_AMNT, decimal? GRBG_AMNT, string AIR_CNDTNG, string LHEAP_PAY, string LHEAP_ANTCPTD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PHN_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = PHN_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ELCTRC_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = ELCTRC_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "GAS_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = GAS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "OIL_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = OIL_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "WATER_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = WATER_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "GRBG_AMNT",
                    Precision = 8,
                    Scale = 2,
                    Value = GRBG_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AIR_CNDTNG",
                    Size = 1,
                    Value = AIR_CNDTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "LHEAP_PAY",
                    Size = 1,
                    Value = LHEAP_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "LHEAP_ANTCPTD",
                    Size = 1,
                    Value = LHEAP_ANTCPTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_UtilityExpense] @MMBR_ID, @PHN_AMNT, @ELCTRC_AMNT, @GAS_AMNT, @OIL_AMNT, @WATER_AMNT, @GRBG_AMNT, @AIR_CNDTNG, @LHEAP_PAY, @LHEAP_ANTCPTD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IMPORT_VoluntaryQuitAsync(int? MMBR_ID, string CMPNY_NM, string CMPNY_PHN, string REASON, string DATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MMBR_ID",
                    Value = MMBR_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CMPNY_NM",
                    Size = 30,
                    Value = CMPNY_NM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CMPNY_PHN",
                    Size = 12,
                    Value = CMPNY_PHN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "REASON",
                    Size = 50,
                    Value = REASON ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE",
                    Size = 8,
                    Value = DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IMPORT_VoluntaryQuit] @MMBR_ID, @CMPNY_NM, @CMPNY_PHN, @REASON, @DATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_ADDRESSAsync(short? ID_CNTY_STATE, int? ID_MMBR, int? ID_EMPLYMNT, int? ID_PRVDR_NAME, decimal? ID_REF_ADDRSS_TYPE, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, OutputParameter<int?> ID_ADDRSS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ADDRSS = new SqlParameter
            {
                ParameterName = "ID_ADDRSS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ADDRSS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ADDRSS,
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_ADDRESS] @ID_ADDRSS OUTPUT, @ID_CNTY_STATE, @ID_MMBR, @ID_EMPLYMNT, @ID_PRVDR_NAME, @ID_REF_ADDRSS_TYPE, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4", sqlParameters, cancellationToken);

            ID_ADDRSS.SetValue(parameterID_ADDRSS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_ADDRESS_StrikerAsync(short? ID_CNTY_STATE, int? ID_MMBR, int? ID_EMPLYMNT, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, OutputParameter<int?> ID_ADDRSS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ADDRSS = new SqlParameter
            {
                ParameterName = "ID_ADDRSS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ADDRSS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ADDRSS,
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_ADDRESS_Striker] @ID_ADDRSS OUTPUT, @ID_CNTY_STATE, @ID_MMBR, @ID_EMPLYMNT, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4", sqlParameters, cancellationToken);

            ID_ADDRSS.SetValue(parameterID_ADDRSS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_ADVERSE_ACTION_REMINDERAsync(int? ID_CASE_NMBR, string ID_USER, DateTime? DT_RMNDR, string TX_RMNDR_SBJCT, string TX_RMNDR_DSCR, string FL_ADVRS_ACTN_RMNDR, OutputParameter<int?> ID_WRKR_RMNDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_WRKR_RMNDR = new SqlParameter
            {
                ParameterName = "ID_WRKR_RMNDR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_WRKR_RMNDR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_WRKR_RMNDR,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RMNDR",
                    Value = DT_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RMNDR_SBJCT",
                    Value = TX_RMNDR_SBJCT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RMNDR_DSCR",
                    Value = TX_RMNDR_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADVRS_ACTN_RMNDR",
                    Size = 1,
                    Value = FL_ADVRS_ACTN_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_ADVERSE_ACTION_REMINDER] @ID_WRKR_RMNDR OUTPUT, @ID_CASE_NMBR, @ID_USER, @DT_RMNDR, @TX_RMNDR_SBJCT, @TX_RMNDR_DSCR, @FL_ADVRS_ACTN_RMNDR", sqlParameters, cancellationToken);

            ID_WRKR_RMNDR.SetValue(parameterID_WRKR_RMNDR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_ALIEN_STATUSAsync(int? ID_MMBR, string CD_ALIEN_RGSTRTN, string FL_QA_LPR, string FL_QA_SCTN_208, string FL_QA_SCTN_207, string FL_QA_SCTN_212, string FL_QA_SCTN_241, string FL_QA_SCTN_203, string FL_QA_SCTN_501, string FL_QA_SCTN_204, string FL_FS_SCTN_207, string FL_FS_SCTN_208, string FL_FS_SCTN_241, string FL_FS_SCTN_501, string FL_FS_SCTN_584, string FL_QAIND_LPR, string FL_QAIND_MLTRY_CNNCTN, string FL_QAIND_US__18, string FL_QAIND_US_BNFTS, string FL_QAIND_US___65, string FL_QAIND_US_QA__5, string FL_NONQAIND_HMONG, string FL_NONQAIND_LAO, string FL_NONQAIND_AMRCN_INDIAN, string FL_NONQAIND_ACT25_USC450, string FL_NONQAIND_ST_REGIS, string FL_NONQAIND_MICMAC, string FL_NONQAIND_ABENAKI, string FL_NONQAIND_KICKAPOO, OutputParameter<int?> ID_ALIEN_STATUS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ALIEN_STATUS = new SqlParameter
            {
                ParameterName = "ID_ALIEN_STATUS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ALIEN_STATUS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ALIEN_STATUS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ALIEN_RGSTRTN",
                    Size = 9,
                    Value = CD_ALIEN_RGSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_LPR",
                    Size = 1,
                    Value = FL_QA_LPR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_208",
                    Size = 1,
                    Value = FL_QA_SCTN_208 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_207",
                    Size = 1,
                    Value = FL_QA_SCTN_207 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_212",
                    Size = 1,
                    Value = FL_QA_SCTN_212 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_241",
                    Size = 1,
                    Value = FL_QA_SCTN_241 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_203",
                    Size = 1,
                    Value = FL_QA_SCTN_203 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_501",
                    Size = 1,
                    Value = FL_QA_SCTN_501 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_204",
                    Size = 1,
                    Value = FL_QA_SCTN_204 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_207",
                    Size = 1,
                    Value = FL_FS_SCTN_207 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_208",
                    Size = 1,
                    Value = FL_FS_SCTN_208 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_241",
                    Size = 1,
                    Value = FL_FS_SCTN_241 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_501",
                    Size = 1,
                    Value = FL_FS_SCTN_501 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_584",
                    Size = 1,
                    Value = FL_FS_SCTN_584 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_LPR",
                    Size = 1,
                    Value = FL_QAIND_LPR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_MLTRY_CNNCTN",
                    Size = 1,
                    Value = FL_QAIND_MLTRY_CNNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US__18",
                    Size = 1,
                    Value = FL_QAIND_US__18 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US_BNFTS",
                    Size = 1,
                    Value = FL_QAIND_US_BNFTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US___65",
                    Size = 1,
                    Value = FL_QAIND_US___65 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US_QA__5",
                    Size = 1,
                    Value = FL_QAIND_US_QA__5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_HMONG",
                    Size = 1,
                    Value = FL_NONQAIND_HMONG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_LAO",
                    Size = 1,
                    Value = FL_NONQAIND_LAO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_AMRCN_INDIAN",
                    Size = 1,
                    Value = FL_NONQAIND_AMRCN_INDIAN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ACT25_USC450",
                    Size = 1,
                    Value = FL_NONQAIND_ACT25_USC450 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ST_REGIS",
                    Size = 1,
                    Value = FL_NONQAIND_ST_REGIS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_MICMAC",
                    Size = 1,
                    Value = FL_NONQAIND_MICMAC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ABENAKI",
                    Size = 1,
                    Value = FL_NONQAIND_ABENAKI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_KICKAPOO",
                    Size = 1,
                    Value = FL_NONQAIND_KICKAPOO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_ALIEN_STATUS] @ID_ALIEN_STATUS OUTPUT, @ID_MMBR, @CD_ALIEN_RGSTRTN, @FL_QA_LPR, @FL_QA_SCTN_208, @FL_QA_SCTN_207, @FL_QA_SCTN_212, @FL_QA_SCTN_241, @FL_QA_SCTN_203, @FL_QA_SCTN_501, @FL_QA_SCTN_204, @FL_FS_SCTN_207, @FL_FS_SCTN_208, @FL_FS_SCTN_241, @FL_FS_SCTN_501, @FL_FS_SCTN_584, @FL_QAIND_LPR, @FL_QAIND_MLTRY_CNNCTN, @FL_QAIND_US__18, @FL_QAIND_US_BNFTS, @FL_QAIND_US___65, @FL_QAIND_US_QA__5, @FL_NONQAIND_HMONG, @FL_NONQAIND_LAO, @FL_NONQAIND_AMRCN_INDIAN, @FL_NONQAIND_ACT25_USC450, @FL_NONQAIND_ST_REGIS, @FL_NONQAIND_MICMAC, @FL_NONQAIND_ABENAKI, @FL_NONQAIND_KICKAPOO", sqlParameters, cancellationToken);

            ID_ALIEN_STATUS.SetValue(parameterID_ALIEN_STATUS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AR_RPRSNTTVAsync(int? ID_CASE_NMBR, string FL_EBT_RPRSNTTV, string NM_RPRSNTTV_FRST, string NM_RPRSNTTV_LAST, string NM_RPRSNTTV_MDL, string NM_RPRSNTTV_SFX, OutputParameter<int?> ID_AR_RPRSNTTV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_AR_RPRSNTTV = new SqlParameter
            {
                ParameterName = "ID_AR_RPRSNTTV",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_AR_RPRSNTTV?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_AR_RPRSNTTV,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EBT_RPRSNTTV",
                    Size = 1,
                    Value = FL_EBT_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_FRST",
                    Size = 15,
                    Value = NM_RPRSNTTV_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_LAST",
                    Size = 15,
                    Value = NM_RPRSNTTV_LAST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_MDL",
                    Size = 15,
                    Value = NM_RPRSNTTV_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_SFX",
                    Size = 3,
                    Value = NM_RPRSNTTV_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AR_RPRSNTTV] @ID_AR_RPRSNTTV OUTPUT, @ID_CASE_NMBR, @FL_EBT_RPRSNTTV, @NM_RPRSNTTV_FRST, @NM_RPRSNTTV_LAST, @NM_RPRSNTTV_MDL, @NM_RPRSNTTV_SFX", sqlParameters, cancellationToken);

            ID_AR_RPRSNTTV.SetValue(parameterID_AR_RPRSNTTV.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_ARREARS_CSAsync(int? ID_CRT_ORDRD_AMNT, decimal? AM_OWED_ARRRS, decimal? AM_PAID_ARRRS, decimal? ID_FRQNCY_ARRRS, OutputParameter<int?> ID_ARRRS_CS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ARRRS_CS = new SqlParameter
            {
                ParameterName = "ID_ARRRS_CS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ARRRS_CS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ARRRS_CS,
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_OWED_ARRRS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_OWED_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID_ARRRS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_ARRRS",
                    Precision = 1,
                    Value = ID_FRQNCY_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_ARREARS_CS] @ID_ARRRS_CS OUTPUT, @ID_CRT_ORDRD_AMNT, @AM_OWED_ARRRS, @AM_PAID_ARRRS, @ID_FRQNCY_ARRRS", sqlParameters, cancellationToken);

            ID_ARRRS_CS.SetValue(parameterID_ARRRS_CS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_aspnet_ApplicationsAsync(string ApplicationName, string LoweredApplicationName, Guid? ApplicationId, string Description, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoweredApplicationName",
                    Size = 512,
                    Value = LoweredApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 512,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_aspnet_Applications] @ApplicationName, @LoweredApplicationName, @ApplicationId, @Description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_aspnet_MembershipAsync(Guid? ApplicationId, Guid? UserId, string Password, int? PasswordFormat, string PasswordSalt, string MobilePIN, string Email, string LoweredEmail, string PasswordQuestion, string PasswordAnswer, bool? IsApproved, bool? IsLockedOut, DateTime? CreateDate, DateTime? LastLoginDate, DateTime? LastPasswordChangedDate, DateTime? LastLockoutDate, int? FailedPasswordAttemptCount, DateTime? FailedPasswordAttemptWindowStart, int? FailedPasswordAnswerAttemptCount, DateTime? FailedPasswordAnswerAttemptWindowStart, string Comment, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 256,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordFormat",
                    Value = PasswordFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordSalt",
                    Size = 256,
                    Value = PasswordSalt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobilePIN",
                    Size = 32,
                    Value = MobilePIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 512,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoweredEmail",
                    Size = 512,
                    Value = LoweredEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordQuestion",
                    Size = 512,
                    Value = PasswordQuestion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAnswer",
                    Size = 256,
                    Value = PasswordAnswer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsApproved",
                    Value = IsApproved ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsLockedOut",
                    Value = IsLockedOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreateDate",
                    Value = CreateDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastLoginDate",
                    Value = LastLoginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastPasswordChangedDate",
                    Value = LastPasswordChangedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastLockoutDate",
                    Value = LastLockoutDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAttemptCount",
                    Value = FailedPasswordAttemptCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAttemptWindowStart",
                    Value = FailedPasswordAttemptWindowStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAnswerAttemptCount",
                    Value = FailedPasswordAnswerAttemptCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAnswerAttemptWindowStart",
                    Value = FailedPasswordAnswerAttemptWindowStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_aspnet_Membership] @ApplicationId, @UserId, @Password, @PasswordFormat, @PasswordSalt, @MobilePIN, @Email, @LoweredEmail, @PasswordQuestion, @PasswordAnswer, @IsApproved, @IsLockedOut, @CreateDate, @LastLoginDate, @LastPasswordChangedDate, @LastLockoutDate, @FailedPasswordAttemptCount, @FailedPasswordAttemptWindowStart, @FailedPasswordAnswerAttemptCount, @FailedPasswordAnswerAttemptWindowStart, @Comment", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_aspnet_SchemaVersionsResult>> Ins_aspnet_SchemaVersionsAsync(string Feature, string CompatibleSchemaVersion, bool? IsCurrentVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Feature",
                    Size = 256,
                    Value = Feature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompatibleSchemaVersion",
                    Size = 256,
                    Value = CompatibleSchemaVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrentVersion",
                    Value = IsCurrentVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_aspnet_SchemaVersionsResult>("EXEC @returnValue = [dbo].[Ins_aspnet_SchemaVersions] @Feature, @CompatibleSchemaVersion, @IsCurrentVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_aspnet_UsersAsync(Guid? ApplicationId, Guid? UserId, string UserName, string LoweredUserName, string MobileAlias, bool? IsAnonymous, DateTime? LastActivityDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoweredUserName",
                    Size = 512,
                    Value = LoweredUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileAlias",
                    Size = 32,
                    Value = MobileAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsAnonymous",
                    Value = IsAnonymous ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LastActivityDate",
                    Value = LastActivityDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_aspnet_Users] @ApplicationId, @UserId, @UserName, @LoweredUserName, @MobileAlias, @IsAnonymous, @LastActivityDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_CASEACTIONAsync(int? ID_CASE_NUMBER, string NO_CASE, string ID_WRKR_SSN, string ID_USER, string NO_WRKR_NMBR, string CD_RJCTN_CLSR, string CASE_ACTION, DateTime? DT_CASE_STTS, string ACTION_STATUS, string UPDATE_NOTICE_TYPE, string SCI_MSG, string CD_CASE_STTS_TYPE, int? ID_NMBR_CASELOG, decimal? CD_PRCSSN_STNDRD, decimal? NO_CASE_CHCKDGT, string CD_SPCL_REOPEN_RSN, string CD_PAST_DUE_RSN, decimal? AM_ALLTMNT, decimal? AM_AWARD_ALLTMNT, decimal? AM_PEND_ALLTMNT, string CD_ADVRS_GUARD, string CD_ALLTMNT_TYPE, decimal? AM_RSTRTN, decimal? AM_RCPMNT, string CD_RETRO_RESTORE_RSN, DateTime? DT_CERT_END, DateTime? DT_CERT_STRT, DateTime? DT_STRT_ISSNC, DateTime? DT_ADVRS_ACTN, DateTime? DT_APPLD, DateTime? DT_APPNTMNT, DateTime? DT_APPRVL, OutputParameter<int?> ID_AUDIT_CASEACTION, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_AUDIT_CASEACTION = new SqlParameter
            {
                ParameterName = "ID_AUDIT_CASEACTION",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_AUDIT_CASEACTION?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_AUDIT_CASEACTION,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NUMBER",
                    Value = ID_CASE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_SSN",
                    Size = 9,
                    Value = ID_WRKR_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_ACTION",
                    Size = 15,
                    Value = CASE_ACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_STTS",
                    Value = DT_CASE_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ACTION_STATUS",
                    Size = 15,
                    Value = ACTION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UPDATE_NOTICE_TYPE",
                    Size = 2,
                    Value = UPDATE_NOTICE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_MSG",
                    Size = -1,
                    Value = SCI_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_STTS_TYPE",
                    Size = 2,
                    Value = CD_CASE_STTS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_CASELOG",
                    Value = ID_NMBR_CASELOG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PRCSSN_STNDRD",
                    Precision = 1,
                    Value = CD_PRCSSN_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Precision = 1,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SPCL_REOPEN_RSN",
                    Size = 2,
                    Value = CD_SPCL_REOPEN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AWARD_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AWARD_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PEND_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PEND_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ADVRS_GUARD",
                    Size = 1,
                    Value = CD_ADVRS_GUARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ALLTMNT_TYPE",
                    Size = 1,
                    Value = CD_ALLTMNT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSTRTN",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RCPMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RCPMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RETRO_RESTORE_RSN",
                    Size = 2,
                    Value = CD_RETRO_RESTORE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ADVRS_ACTN",
                    Value = DT_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPLD",
                    Value = DT_APPLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPNTMNT",
                    Value = DT_APPNTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPRVL",
                    Value = DT_APPRVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_CASEACTION] @ID_AUDIT_CASEACTION OUTPUT, @ID_CASE_NUMBER, @NO_CASE, @ID_WRKR_SSN, @ID_USER, @NO_WRKR_NMBR, @CD_RJCTN_CLSR, @CASE_ACTION, @DT_CASE_STTS, @ACTION_STATUS, @UPDATE_NOTICE_TYPE, @SCI_MSG, @CD_CASE_STTS_TYPE, @ID_NMBR_CASELOG, @CD_PRCSSN_STNDRD, @NO_CASE_CHCKDGT, @CD_SPCL_REOPEN_RSN, @CD_PAST_DUE_RSN, @AM_ALLTMNT, @AM_AWARD_ALLTMNT, @AM_PEND_ALLTMNT, @CD_ADVRS_GUARD, @CD_ALLTMNT_TYPE, @AM_RSTRTN, @AM_RCPMNT, @CD_RETRO_RESTORE_RSN, @DT_CERT_END, @DT_CERT_STRT, @DT_STRT_ISSNC, @DT_ADVRS_ACTN, @DT_APPLD, @DT_APPNTMNT, @DT_APPRVL", sqlParameters, cancellationToken);

            ID_AUDIT_CASEACTION.SetValue(parameterID_AUDIT_CASEACTION.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_CASEACTUINAsync(int? ID_CASE_NUMBER, string NO_CASE, string ID_WRKR_SSN, string ID_USER, string NO_WRKR_NMBR, string CD_RJCTN_CLSR, string CASE_ACTION, DateTime? DT_CASE_STTS, string UPDATE_NOTICE_TYPE, string SCI_MSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NUMBER",
                    Value = ID_CASE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_SSN",
                    Size = 9,
                    Value = ID_WRKR_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_ACTION",
                    Size = 15,
                    Value = CASE_ACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_STTS",
                    Value = DT_CASE_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UPDATE_NOTICE_TYPE",
                    Size = 1,
                    Value = UPDATE_NOTICE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_MSG",
                    Size = 80,
                    Value = SCI_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_CASEACTUIN] @ID_CASE_NUMBER, @NO_CASE, @ID_WRKR_SSN, @ID_USER, @NO_WRKR_NMBR, @CD_RJCTN_CLSR, @CASE_ACTION, @DT_CASE_STTS, @UPDATE_NOTICE_TYPE, @SCI_MSG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_CASELOGAsync(string ID_USER, string NOCASE, int? ID_NMBR_LOGIN, OutputParameter<int?> ID_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_NMBR = new SqlParameter
            {
                ParameterName = "ID_NMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_NMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_NMBR,
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Size = 9,
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_LOGIN",
                    Value = ID_NMBR_LOGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_CASELOG] @ID_NMBR OUTPUT, @ID_USER, @NOCASE, @ID_NMBR_LOGIN", sqlParameters, cancellationToken);

            ID_NMBR.SetValue(parameterID_NMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_LOGINRCDAsync(string ID_USER, OutputParameter<int?> ID_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_NMBR = new SqlParameter
            {
                ParameterName = "ID_NMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_NMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_NMBR,
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_LOGINRCD] @ID_NMBR OUTPUT, @ID_USER", sqlParameters, cancellationToken);

            ID_NMBR.SetValue(parameterID_NMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_PUBLIC_HEALTHAsync(string PH_QueryStatus, string PH_FullName, string PH_DateofBirth, string PH_ELEIndicator, string PH_EarnedIncome, string PH_Employment, string PH_Unearned_Income, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PH_QueryStatus",
                    Size = 12,
                    Value = PH_QueryStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PH_FullName",
                    Size = 25,
                    Value = PH_FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PH_DateofBirth",
                    Size = 8,
                    Value = PH_DateofBirth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PH_ELEIndicator",
                    Size = 1,
                    Value = PH_ELEIndicator ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PH_EarnedIncome",
                    Value = PH_EarnedIncome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "PH_Employment",
                    Value = PH_Employment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "PH_Unearned_Income",
                    Value = PH_Unearned_Income ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_PUBLIC_HEALTH] @PH_QueryStatus, @PH_FullName, @PH_DateofBirth, @PH_ELEIndicator, @PH_EarnedIncome, @PH_Employment, @PH_Unearned_Income", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_SECURITYAsync(string CD_PAYROLL, string CD_CNTY, string CD_PSSWRD, string CD_ROLE, string FL_ACTIVE, string FL_SUPERVISOR, string NM_FULL_NAME, string FL_NEWUSER, string TX_COMMENT, string CD_WRKR_NMBR, string FL_TEST, DateTime? DT_PSSWRD, string FL_WF, string FL_ADDI, string CD_HOME_CNTY, string FL_DSNAP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_PAYROLL",
                    Size = 20,
                    Value = CD_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 9,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PSSWRD",
                    Size = 30,
                    Value = CD_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ROLE",
                    Size = 15,
                    Value = CD_ROLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUPERVISOR",
                    Size = 1,
                    Value = FL_SUPERVISOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_FULL_NAME",
                    Size = 50,
                    Value = NM_FULL_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NEWUSER",
                    Size = 1,
                    Value = FL_NEWUSER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_COMMENT",
                    Size = 256,
                    Value = TX_COMMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WRKR_NMBR",
                    Size = 3,
                    Value = CD_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TEST",
                    Size = 1,
                    Value = FL_TEST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PSSWRD",
                    Value = DT_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WF",
                    Size = 1,
                    Value = FL_WF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADDI",
                    Size = 1,
                    Value = FL_ADDI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_HOME_CNTY",
                    Size = 2,
                    Value = CD_HOME_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSNAP",
                    Size = 1,
                    Value = FL_DSNAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_SECURITY] @CD_PAYROLL, @CD_CNTY, @CD_PSSWRD, @CD_ROLE, @FL_ACTIVE, @FL_SUPERVISOR, @NM_FULL_NAME, @FL_NEWUSER, @TX_COMMENT, @CD_WRKR_NMBR, @FL_TEST, @DT_PSSWRD, @FL_WF, @FL_ADDI, @CD_HOME_CNTY, @FL_DSNAP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_SPECIAL_REOPENAsync(int? ID_CASE_NUMBER, string NOCASE, string ID_USER, int? ID_NMBR_LOGIN, string APPLICATION_DATE, string CERT_FROM, string CERT_TO, string START_ISS, string TRANSACTION_CD, string CLOSRUE_CD, string SPECIAL_REOPEN_TYPE, string SCI_MSG, string FL_SUCCESS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NUMBER",
                    Value = ID_CASE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Size = 9,
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_LOGIN",
                    Value = ID_NMBR_LOGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "APPLICATION_DATE",
                    Size = 8,
                    Value = APPLICATION_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CERT_FROM",
                    Size = 6,
                    Value = CERT_FROM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CERT_TO",
                    Size = 6,
                    Value = CERT_TO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "START_ISS",
                    Size = 6,
                    Value = START_ISS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TRANSACTION_CD",
                    Size = 2,
                    Value = TRANSACTION_CD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CLOSRUE_CD",
                    Size = 2,
                    Value = CLOSRUE_CD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SPECIAL_REOPEN_TYPE",
                    Size = 1,
                    Value = SPECIAL_REOPEN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_MSG",
                    Size = -1,
                    Value = SCI_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUCCESS",
                    Size = 1,
                    Value = FL_SUCCESS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_SPECIAL_REOPEN] @ID_CASE_NUMBER, @NOCASE, @ID_USER, @ID_NMBR_LOGIN, @APPLICATION_DATE, @CERT_FROM, @CERT_TO, @START_ISS, @TRANSACTION_CD, @CLOSRUE_CD, @SPECIAL_REOPEN_TYPE, @SCI_MSG, @FL_SUCCESS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_AU_VOTER_POPUPAsync(string NO_CASE, string ID_USER, int? ID_NMBR_LOGIN, OutputParameter<int?> ID_AU_VOTER_POPUP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_AU_VOTER_POPUP = new SqlParameter
            {
                ParameterName = "ID_AU_VOTER_POPUP",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_AU_VOTER_POPUP?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_AU_VOTER_POPUP,
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 8,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_LOGIN",
                    Value = ID_NMBR_LOGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_AU_VOTER_POPUP] @ID_AU_VOTER_POPUP OUTPUT, @NO_CASE, @ID_USER, @ID_NMBR_LOGIN", sqlParameters, cancellationToken);

            ID_AU_VOTER_POPUP.SetValue(parameterID_AU_VOTER_POPUP.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CASEAsync(short? ID_CNTY_STATE, string CD_INTRVWEE_DSGNTN, decimal? CD_HH_TYPE, string CD_MTHD_INTRVW, decimal? CD_PRCSSN_STNDRD, decimal? CD_TRCKNG_OFFC, DateTime? DT_ADVRS_ACTN, DateTime? DT_APPLD, DateTime? DT_APPNTMNT, DateTime? DT_APPRVL, DateTime? DT_EXPRTN, DateTime? DT_RQRD_VRCTN, DateTime? DT_SPCL_DUE, string EM_HOH, string FL_ADVRS_WV, string FL_AR_FORM_SGND, string FL_CNTNUE_FA_SCRN, string FL_CNTNUE_VOLQUIT_SCRN, string FL_EMPLYD, string FL_EXPCT_STRT_WRK, string FL_EXPCT_VAC_HOL_BNUS_PAY, string FL_HH_CMPSTN_QSTNBL, string FL_HH_HMLS, string FL_JOBS_CHILD_SNCTN, string FL_NEW_EBT_CARD, string FL_ON_STRK, string FL_ONE_PRSN_HH, string FL_PAY_CS_NON_RSDNT, string FL_PAY_DC_BABYSIT, string FL_PAY_DC_BILL_NONHH, string FL_PAY_ROOM_MEAL, string FL_RSDNCY_QSTNBL, string FL_WRK_TRMNTD, string ID_WRKR_SSN, int? ID_VRFCTN_ATHRZD_RPRSNTTV, int? ID_VRFCTN_HH, int? ID_VRFCTN_HH_CMPSTN, int? ID_VRFCTN_HH_RSDNCY, int? ID_VRFCTN_INTRVWEE, int? ID_VRFCTN_RSDNCY, decimal? NO_CASE, string NO_HOME_TEL, string NO_WRKR_NMBR, string TX_HOME_DRCTNS, decimal? NO_CASE_CHCKDGT, decimal? CTYRSDN, string BTWD, int? ID_DISASTER, OutputParameter<int?> ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CASE_NMBR = new SqlParameter
            {
                ParameterName = "ID_CASE_NMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CASE_NMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CASE_NMBR,
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INTRVWEE_DSGNTN",
                    Size = 2,
                    Value = CD_INTRVWEE_DSGNTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_HH_TYPE",
                    Precision = 1,
                    Value = CD_HH_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MTHD_INTRVW",
                    Size = 6,
                    Value = CD_MTHD_INTRVW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PRCSSN_STNDRD",
                    Precision = 1,
                    Value = CD_PRCSSN_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRCKNG_OFFC",
                    Precision = 2,
                    Value = CD_TRCKNG_OFFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ADVRS_ACTN",
                    Value = DT_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPLD",
                    Value = DT_APPLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPNTMNT",
                    Value = DT_APPNTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPRVL",
                    Value = DT_APPRVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EXPRTN",
                    Value = DT_EXPRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RQRD_VRCTN",
                    Value = DT_RQRD_VRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SPCL_DUE",
                    Value = DT_SPCL_DUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EM_HOH",
                    Value = EM_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADVRS_WV",
                    Size = 1,
                    Value = FL_ADVRS_WV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AR_FORM_SGND",
                    Size = 1,
                    Value = FL_AR_FORM_SGND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CNTNUE_FA_SCRN",
                    Size = 1,
                    Value = FL_CNTNUE_FA_SCRN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CNTNUE_VOLQUIT_SCRN",
                    Size = 1,
                    Value = FL_CNTNUE_VOLQUIT_SCRN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EMPLYD",
                    Size = 1,
                    Value = FL_EMPLYD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPCT_STRT_WRK",
                    Size = 1,
                    Value = FL_EXPCT_STRT_WRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPCT_VAC_HOL_BNUS_PAY",
                    Size = 1,
                    Value = FL_EXPCT_VAC_HOL_BNUS_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HH_CMPSTN_QSTNBL",
                    Size = 1,
                    Value = FL_HH_CMPSTN_QSTNBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HH_HMLS",
                    Size = 1,
                    Value = FL_HH_HMLS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_JOBS_CHILD_SNCTN",
                    Size = 1,
                    Value = FL_JOBS_CHILD_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NEW_EBT_CARD",
                    Size = 1,
                    Value = FL_NEW_EBT_CARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ON_STRK",
                    Size = 1,
                    Value = FL_ON_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONE_PRSN_HH",
                    Size = 1,
                    Value = FL_ONE_PRSN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_CS_NON_RSDNT",
                    Size = 1,
                    Value = FL_PAY_CS_NON_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_DC_BABYSIT",
                    Size = 1,
                    Value = FL_PAY_DC_BABYSIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_DC_BILL_NONHH",
                    Size = 1,
                    Value = FL_PAY_DC_BILL_NONHH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_ROOM_MEAL",
                    Size = 1,
                    Value = FL_PAY_ROOM_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RSDNCY_QSTNBL",
                    Size = 1,
                    Value = FL_RSDNCY_QSTNBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRK_TRMNTD",
                    Size = 1,
                    Value = FL_WRK_TRMNTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_SSN",
                    Size = 9,
                    Value = ID_WRKR_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ATHRZD_RPRSNTTV",
                    Value = ID_VRFCTN_ATHRZD_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH",
                    Value = ID_VRFCTN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH_CMPSTN",
                    Value = ID_VRFCTN_HH_CMPSTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH_RSDNCY",
                    Value = ID_VRFCTN_HH_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INTRVWEE",
                    Value = ID_VRFCTN_INTRVWEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RSDNCY",
                    Value = ID_VRFCTN_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOME_TEL",
                    Size = 10,
                    Value = NO_HOME_TEL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_HOME_DRCTNS",
                    Value = TX_HOME_DRCTNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Precision = 1,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CTYRSDN",
                    Precision = 3,
                    Value = CTYRSDN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "BTWD",
                    Size = 1,
                    Value = BTWD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CASE] @ID_CASE_NMBR OUTPUT, @ID_CNTY_STATE, @CD_INTRVWEE_DSGNTN, @CD_HH_TYPE, @CD_MTHD_INTRVW, @CD_PRCSSN_STNDRD, @CD_TRCKNG_OFFC, @DT_ADVRS_ACTN, @DT_APPLD, @DT_APPNTMNT, @DT_APPRVL, @DT_EXPRTN, @DT_RQRD_VRCTN, @DT_SPCL_DUE, @EM_HOH, @FL_ADVRS_WV, @FL_AR_FORM_SGND, @FL_CNTNUE_FA_SCRN, @FL_CNTNUE_VOLQUIT_SCRN, @FL_EMPLYD, @FL_EXPCT_STRT_WRK, @FL_EXPCT_VAC_HOL_BNUS_PAY, @FL_HH_CMPSTN_QSTNBL, @FL_HH_HMLS, @FL_JOBS_CHILD_SNCTN, @FL_NEW_EBT_CARD, @FL_ON_STRK, @FL_ONE_PRSN_HH, @FL_PAY_CS_NON_RSDNT, @FL_PAY_DC_BABYSIT, @FL_PAY_DC_BILL_NONHH, @FL_PAY_ROOM_MEAL, @FL_RSDNCY_QSTNBL, @FL_WRK_TRMNTD, @ID_WRKR_SSN, @ID_VRFCTN_ATHRZD_RPRSNTTV, @ID_VRFCTN_HH, @ID_VRFCTN_HH_CMPSTN, @ID_VRFCTN_HH_RSDNCY, @ID_VRFCTN_INTRVWEE, @ID_VRFCTN_RSDNCY, @NO_CASE, @NO_HOME_TEL, @NO_WRKR_NMBR, @TX_HOME_DRCTNS, @NO_CASE_CHCKDGT, @CTYRSDN, @BTWD, @ID_DISASTER", sqlParameters, cancellationToken);

            ID_CASE_NMBR.SetValue(parameterID_CASE_NMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CASE_NOTESAsync(int? ID_MMBR, short? ID_CASE_CTGRY, string NM_CRTD, string TX_CASE_NOTE_DSCR, OutputParameter<int?> ID_CASE_NOTE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CASE_NOTE = new SqlParameter
            {
                ParameterName = "ID_CASE_NOTE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CASE_NOTE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CASE_NOTE,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "NM_CRTD",
                    Size = 50,
                    Value = NM_CRTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CASE_NOTE_DSCR",
                    Value = TX_CASE_NOTE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CASE_NOTES] @ID_CASE_NOTE OUTPUT, @ID_MMBR, @ID_CASE_CTGRY, @NM_CRTD, @TX_CASE_NOTE_DSCR", sqlParameters, cancellationToken);

            ID_CASE_NOTE.SetValue(parameterID_CASE_NOTE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CASE_STATUSAsync(int? ID_CASE_NMBR, decimal? ID_REF_CASE_STATUS_TYPE, int? ID_SPCL_REOPEN_RSN, string CD_PAST_DUE_RSN, string CD_RJCTN_CLSR, string CD_DENIAL, string CD_TRMNTN, decimal? AM_ALLTMNT, decimal? AM_AWRD_ALLTMNT, decimal? AM_PEND_ALLTMNT, string CD_ADVRS_GUARD, string CD_ALLTMNT_TYPE, DateTime? DT_CASE_STTS, DateTime? DT_CERT_END, DateTime? DT_CERT_STRT, DateTime? DT_STRT_ISSNC, decimal? AM_RCPMNT, string CD_ISS_TYPE, string CD_EXPEDITE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS_TYPE",
                    Precision = 18,
                    Value = ID_REF_CASE_STATUS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SPCL_REOPEN_RSN",
                    Value = ID_SPCL_REOPEN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DENIAL",
                    Size = 2,
                    Value = CD_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRMNTN",
                    Size = 2,
                    Value = CD_TRMNTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AWRD_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AWRD_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PEND_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PEND_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ADVRS_GUARD",
                    Size = 1,
                    Value = CD_ADVRS_GUARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ALLTMNT_TYPE",
                    Size = 1,
                    Value = CD_ALLTMNT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_STTS",
                    Value = DT_CASE_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RCPMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RCPMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ISS_TYPE",
                    Size = 1,
                    Value = CD_ISS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EXPEDITE",
                    Size = 1,
                    Value = CD_EXPEDITE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CASE_STATUS] @ID_CASE_NMBR, @ID_REF_CASE_STATUS_TYPE, @ID_SPCL_REOPEN_RSN, @CD_PAST_DUE_RSN, @CD_RJCTN_CLSR, @CD_DENIAL, @CD_TRMNTN, @AM_ALLTMNT, @AM_AWRD_ALLTMNT, @AM_PEND_ALLTMNT, @CD_ADVRS_GUARD, @CD_ALLTMNT_TYPE, @DT_CASE_STTS, @DT_CERT_END, @DT_CERT_STRT, @DT_STRT_ISSNC, @AM_RCPMNT, @CD_ISS_TYPE, @CD_EXPEDITE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CASE_STATUS_InitialAsync(int? ID_CASE_NMBR, decimal? ID_REF_CASE_STATUS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS_TYPE",
                    Precision = 18,
                    Value = ID_REF_CASE_STATUS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CASE_STATUS_Initial] @ID_CASE_NMBR, @ID_REF_CASE_STATUS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CASE_WORKFLOWAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CASE_WORKFLOW] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CASE_WORKFLOWSRAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CASE_WORKFLOWSR] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_CERT_ELIGResult>> Ins_CERT_ELIGAsync(int? ID_MMBR, decimal? ID_REF_CERT_ELIG, string CD_SPCL_REOPEN_RSN, DateTime? DT_CERT_END, DateTime? DT_CERT_STRT, DateTime? DT_STRT_ISSNC, OutputParameter<decimal?> ID_CERT_ELGBLTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CERT_ELGBLTY = new SqlParameter
            {
                ParameterName = "ID_CERT_ELGBLTY",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CERT_ELGBLTY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CERT_ELGBLTY,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Precision = 2,
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SPCL_REOPEN_RSN",
                    Size = 2,
                    Value = CD_SPCL_REOPEN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_CERT_ELIGResult>("EXEC @returnValue = [dbo].[Ins_CERT_ELIG] @ID_CERT_ELGBLTY OUTPUT, @ID_MMBR, @ID_REF_CERT_ELIG, @CD_SPCL_REOPEN_RSN, @DT_CERT_END, @DT_CERT_STRT, @DT_STRT_ISSNC", sqlParameters, cancellationToken);

            ID_CERT_ELGBLTY.SetValue(parameterID_CERT_ELGBLTY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_COURT_ORDERD_AMOUNTAsync(decimal? ID_CRT_ORDRD, int? ID_CS_PAYER_RCPNT, decimal? AM_CLCLTD_CRRNT_MNTHLY, decimal? AM_CRT_ORDR_MNTHLY, decimal? AM_PAY_CRRNT_CS, decimal? AM_PAY_HLTH_INS_MNTHLY, decimal? AM_PAY_LNDLRD_MNTHLY, decimal? AM_PAY_MDBLLS_MNTHLY, decimal? AM_PAY_MRTGG_MNTHLY, decimal? AM_PAY_UTLTY_MNTHLY, string FL_HLTH_INS_MNTHLY, string FL_LNDLRD_MNTHLY, string FL_MDBLLS_MNTHLY, string FL_MRTGG_MNTHLY, string FL_UTLTY_MNTHLY, decimal? ID_FRQNCY_CRRNT, decimal? ID_FRQNCY_CRT_ORDR, int? ID_VRFCTN_CRT_ORDRD_AMT, string NO_CRT_ORDR, decimal? AM_TTL_ALLWBL_CS, string CD_MONTH, string TX_VRFCTN_CRT_ORDRD_AMT, OutputParameter<int?> ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CRT_ORDRD_AMNT = new SqlParameter
            {
                ParameterName = "ID_CRT_ORDRD_AMNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CRT_ORDRD_AMNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CRT_ORDRD_AMNT,
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD",
                    Precision = 1,
                    Value = ID_CRT_ORDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CS_PAYER_RCPNT",
                    Value = ID_CS_PAYER_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CLCLTD_CRRNT_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CLCLTD_CRRNT_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CRT_ORDR_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CRT_ORDR_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_CRRNT_CS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_CRRNT_CS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_HLTH_INS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_HLTH_INS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_LNDLRD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_LNDLRD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MDBLLS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MDBLLS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MRTGG_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MRTGG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_UTLTY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_UTLTY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HLTH_INS_MNTHLY",
                    Size = 1,
                    Value = FL_HLTH_INS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LNDLRD_MNTHLY",
                    Size = 1,
                    Value = FL_LNDLRD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MDBLLS_MNTHLY",
                    Size = 1,
                    Value = FL_MDBLLS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MRTGG_MNTHLY",
                    Size = 1,
                    Value = FL_MRTGG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UTLTY_MNTHLY",
                    Size = 1,
                    Value = FL_UTLTY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_CRRNT",
                    Precision = 1,
                    Value = ID_FRQNCY_CRRNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_CRT_ORDR",
                    Precision = 1,
                    Value = ID_FRQNCY_CRT_ORDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_CRT_ORDRD_AMT",
                    Value = ID_VRFCTN_CRT_ORDRD_AMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CRT_ORDR",
                    Size = 12,
                    Value = NO_CRT_ORDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_ALLWBL_CS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_ALLWBL_CS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_CRT_ORDRD_AMT",
                    Value = TX_VRFCTN_CRT_ORDRD_AMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_COURT_ORDERD_AMOUNT] @ID_CRT_ORDRD_AMNT OUTPUT, @ID_CRT_ORDRD, @ID_CS_PAYER_RCPNT, @AM_CLCLTD_CRRNT_MNTHLY, @AM_CRT_ORDR_MNTHLY, @AM_PAY_CRRNT_CS, @AM_PAY_HLTH_INS_MNTHLY, @AM_PAY_LNDLRD_MNTHLY, @AM_PAY_MDBLLS_MNTHLY, @AM_PAY_MRTGG_MNTHLY, @AM_PAY_UTLTY_MNTHLY, @FL_HLTH_INS_MNTHLY, @FL_LNDLRD_MNTHLY, @FL_MDBLLS_MNTHLY, @FL_MRTGG_MNTHLY, @FL_UTLTY_MNTHLY, @ID_FRQNCY_CRRNT, @ID_FRQNCY_CRT_ORDR, @ID_VRFCTN_CRT_ORDRD_AMT, @NO_CRT_ORDR, @AM_TTL_ALLWBL_CS, @CD_MONTH, @TX_VRFCTN_CRT_ORDRD_AMT", sqlParameters, cancellationToken);

            ID_CRT_ORDRD_AMNT.SetValue(parameterID_CRT_ORDRD_AMNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_COVERED_ITEMSAsync(int? ID_CASE_NMBR, string FL_SGND_SUD, string FL_UNDRSTNDS_GOOD, string FL_UNDRSTNDS_LMTD, string FL_UNDRSTNDS_POOR, string FL_UNDRSTNDS_NOT_CPBL, string TX_UNDRSTNDS_WHY, string FL_DSCSSD_PRMPTNSS, string FL_DSCSSD_VRBLE_ISSNC, string FL_DSCSSD_ISS_HOURS, string FL_DSCSSD_CHNG_RPRTNG_RQRMNTS, string FL_DSCSSD_CHNG_RPRT_GVN, string FL_DSCSSD_ATHRZD_RPRSNTTV, string FL_DSCSSD_ELGBL_FOODS, string FL_DSCSSD_CVL_RGHTS, string FL_DSCSSD_WORK_RGSTRTN, string FL_DSCSSD_VLNTRY_QUIT, string FL_DSCSSD_SEMI_ANNL_RPRTNG, string FL_DSCSSD_VNDR_PYMNT_RMBRSMNT, string TX_DSCSSD_OTHR, string FL_DSCSSD_EXPNS_VRFCTNS, string TX_SRGiven, OutputParameter<int?> ID_CVRD_ITEMS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CVRD_ITEMS = new SqlParameter
            {
                ParameterName = "ID_CVRD_ITEMS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CVRD_ITEMS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CVRD_ITEMS,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SGND_SUD",
                    Size = 1,
                    Value = FL_SGND_SUD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_GOOD",
                    Size = 1,
                    Value = FL_UNDRSTNDS_GOOD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_LMTD",
                    Size = 1,
                    Value = FL_UNDRSTNDS_LMTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_POOR",
                    Size = 1,
                    Value = FL_UNDRSTNDS_POOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_NOT_CPBL",
                    Size = 1,
                    Value = FL_UNDRSTNDS_NOT_CPBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_UNDRSTNDS_WHY",
                    Value = TX_UNDRSTNDS_WHY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_PRMPTNSS",
                    Size = 1,
                    Value = FL_DSCSSD_PRMPTNSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_VRBLE_ISSNC",
                    Size = 1,
                    Value = FL_DSCSSD_VRBLE_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_ISS_HOURS",
                    Size = 1,
                    Value = FL_DSCSSD_ISS_HOURS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_CHNG_RPRTNG_RQRMNTS",
                    Size = 1,
                    Value = FL_DSCSSD_CHNG_RPRTNG_RQRMNTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_CHNG_RPRT_GVN",
                    Size = 1,
                    Value = FL_DSCSSD_CHNG_RPRT_GVN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_ATHRZD_RPRSNTTV",
                    Size = 1,
                    Value = FL_DSCSSD_ATHRZD_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_ELGBL_FOODS",
                    Size = 1,
                    Value = FL_DSCSSD_ELGBL_FOODS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_CVL_RGHTS",
                    Size = 1,
                    Value = FL_DSCSSD_CVL_RGHTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_WORK_RGSTRTN",
                    Size = 1,
                    Value = FL_DSCSSD_WORK_RGSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_VLNTRY_QUIT",
                    Size = 1,
                    Value = FL_DSCSSD_VLNTRY_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_SEMI_ANNL_RPRTNG",
                    Size = 1,
                    Value = FL_DSCSSD_SEMI_ANNL_RPRTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_VNDR_PYMNT_RMBRSMNT",
                    Size = 1,
                    Value = FL_DSCSSD_VNDR_PYMNT_RMBRSMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DSCSSD_OTHR",
                    Value = TX_DSCSSD_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_EXPNS_VRFCTNS",
                    Size = 1,
                    Value = FL_DSCSSD_EXPNS_VRFCTNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SRGiven",
                    Size = 50,
                    Value = TX_SRGiven ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_COVERED_ITEMS] @ID_CVRD_ITEMS OUTPUT, @ID_CASE_NMBR, @FL_SGND_SUD, @FL_UNDRSTNDS_GOOD, @FL_UNDRSTNDS_LMTD, @FL_UNDRSTNDS_POOR, @FL_UNDRSTNDS_NOT_CPBL, @TX_UNDRSTNDS_WHY, @FL_DSCSSD_PRMPTNSS, @FL_DSCSSD_VRBLE_ISSNC, @FL_DSCSSD_ISS_HOURS, @FL_DSCSSD_CHNG_RPRTNG_RQRMNTS, @FL_DSCSSD_CHNG_RPRT_GVN, @FL_DSCSSD_ATHRZD_RPRSNTTV, @FL_DSCSSD_ELGBL_FOODS, @FL_DSCSSD_CVL_RGHTS, @FL_DSCSSD_WORK_RGSTRTN, @FL_DSCSSD_VLNTRY_QUIT, @FL_DSCSSD_SEMI_ANNL_RPRTNG, @FL_DSCSSD_VNDR_PYMNT_RMBRSMNT, @TX_DSCSSD_OTHR, @FL_DSCSSD_EXPNS_VRFCTNS, @TX_SRGiven", sqlParameters, cancellationToken);

            ID_CVRD_ITEMS.SetValue(parameterID_CVRD_ITEMS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CS_AMOUNTAsync(int? ID_CS_PAYER_RCPNT, int? ID_MMBR, decimal? AM_CS_CRT_ORDRD_MNTHLY, decimal? AM_CS_MNTHLY, decimal? AM_NON_RCRRNG_RSRC, string DT_DAY_OF_MNTH, DateTime? DT_PYMNT_RCVD, string FL_ARRRS, decimal? ID_FRQNCY_PAY_CS_AMNT, int? ID_VRFCTN_CS_AMNT, OutputParameter<int?> ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CS_AMNT = new SqlParameter
            {
                ParameterName = "ID_CS_AMNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CS_AMNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CS_AMNT,
                new SqlParameter
                {
                    ParameterName = "ID_CS_PAYER_RCPNT",
                    Value = ID_CS_PAYER_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_CRT_ORDRD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CS_CRT_ORDRD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_NON_RCRRNG_RSRC",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_NON_RCRRNG_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DAY_OF_MNTH",
                    Size = 2,
                    Value = DT_DAY_OF_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PYMNT_RCVD",
                    Value = DT_PYMNT_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ARRRS",
                    Size = 1,
                    Value = FL_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PAY_CS_AMNT",
                    Precision = 2,
                    Value = ID_FRQNCY_PAY_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_CS_AMNT",
                    Value = ID_VRFCTN_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CS_AMOUNT] @ID_CS_AMNT OUTPUT, @ID_CS_PAYER_RCPNT, @ID_MMBR, @AM_CS_CRT_ORDRD_MNTHLY, @AM_CS_MNTHLY, @AM_NON_RCRRNG_RSRC, @DT_DAY_OF_MNTH, @DT_PYMNT_RCVD, @FL_ARRRS, @ID_FRQNCY_PAY_CS_AMNT, @ID_VRFCTN_CS_AMNT", sqlParameters, cancellationToken);

            ID_CS_AMNT.SetValue(parameterID_CS_AMNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CS_DPNDNTSAsync(int? ID_DPNDNT, int? ID_CS_AMNT, int? ID_MMBR, OutputParameter<int?> ID_CS_DPNDNTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CS_DPNDNTS = new SqlParameter
            {
                ParameterName = "ID_CS_DPNDNTS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CS_DPNDNTS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CS_DPNDNTS,
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CS_DPNDNTS] @ID_CS_DPNDNTS OUTPUT, @ID_DPNDNT, @ID_CS_AMNT, @ID_MMBR", sqlParameters, cancellationToken);

            ID_CS_DPNDNTS.SetValue(parameterID_CS_DPNDNTS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CS_PAYER_RECIPIENTAsync(int? ID_OBLGTN_RSN, string FL_PAYER, string NM_PAYER_RCPNT_LST, string NM_PAYER_RCPNT_FRST, string NM_PAYER_RCPNT_MDL, string NM_PAYER_RCPNT_SFX, OutputParameter<int?> ID_CS_PAYER_RCPNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CS_PAYER_RCPNT = new SqlParameter
            {
                ParameterName = "ID_CS_PAYER_RCPNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CS_PAYER_RCPNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CS_PAYER_RCPNT,
                new SqlParameter
                {
                    ParameterName = "ID_OBLGTN_RSN",
                    Value = ID_OBLGTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYER",
                    Size = 1,
                    Value = FL_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_LST",
                    Size = 15,
                    Value = NM_PAYER_RCPNT_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_FRST",
                    Size = 15,
                    Value = NM_PAYER_RCPNT_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_MDL",
                    Size = 10,
                    Value = NM_PAYER_RCPNT_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_SFX",
                    Size = 3,
                    Value = NM_PAYER_RCPNT_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CS_PAYER_RECIPIENT] @ID_CS_PAYER_RCPNT OUTPUT, @ID_OBLGTN_RSN, @FL_PAYER, @NM_PAYER_RCPNT_LST, @NM_PAYER_RCPNT_FRST, @NM_PAYER_RCPNT_MDL, @NM_PAYER_RCPNT_SFX", sqlParameters, cancellationToken);

            ID_CS_PAYER_RCPNT.SetValue(parameterID_CS_PAYER_RCPNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_CS_PAYMENTSAsync(int? ID_CS_AMNT, decimal? AM_CS_PYMNT, DateTime? DT_CS_PYMNT, OutputParameter<int?> ID_CS_PYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CS_PYMNT = new SqlParameter
            {
                ParameterName = "ID_CS_PYMNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CS_PYMNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CS_PYMNT,
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_PYMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CS_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CS_PYMNT",
                    Value = DT_CS_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_CS_PAYMENTS] @ID_CS_PYMNT OUTPUT, @ID_CS_AMNT, @AM_CS_PYMNT, @DT_CS_PYMNT", sqlParameters, cancellationToken);

            ID_CS_PYMNT.SetValue(parameterID_CS_PYMNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DC_UNEARNAsync(int? ID_UNERND_INCM, int? ID_DC_OTHR_PAY, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_MNTHLY, string CD_MONTH, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DC_UNEARN] @ID_UNERND_INCM, @ID_DC_OTHR_PAY, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_MNTHLY, @CD_MONTH, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Del_PIV_MMBR_INSRUANCEAsync(int? ID_MMBR, int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Del_PIV_MMBR_INSRUANCE] @ID_MMBR, @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Del_PIV_MMBR_RLTNAsync(int? ID_MMBR2, decimal? ID_RLTN, int? ID_MMBR1, string FL_NRST_RLTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NRST_RLTN",
                    Size = 1,
                    Value = FL_NRST_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Del_PIV_MMBR_RLTN] @ID_MMBR2, @ID_RLTN, @ID_MMBR1, @FL_NRST_RLTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_DENIALResult>> Ins_DENIALAsync(decimal? ID_DENIAL_CODES, int? ID_CASE_NMBR, DateTime? DT_DENIAL, OutputParameter<int?> ID_DENIAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DENIAL = new SqlParameter
            {
                ParameterName = "ID_DENIAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DENIAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DENIAL,
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL_CODES",
                    Precision = 2,
                    Value = ID_DENIAL_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DENIAL",
                    Value = DT_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_DENIALResult>("EXEC @returnValue = [dbo].[Ins_DENIAL] @ID_DENIAL OUTPUT, @ID_DENIAL_CODES, @ID_CASE_NMBR, @DT_DENIAL", sqlParameters, cancellationToken);

            ID_DENIAL.SetValue(parameterID_DENIAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DEPENDENTAsync(int? ID_MMBR, DateTime? DT_DPNDNT_DOB, string NM_DPNDNT_LST, string NM_DPNDNT_FRST, OutputParameter<int?> ID_DPNDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DPNDNT = new SqlParameter
            {
                ParameterName = "ID_DPNDNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DPNDNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DPNDNT,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DPNDNT_DOB",
                    Value = DT_DPNDNT_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_LST",
                    Size = 20,
                    Value = NM_DPNDNT_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_FRST",
                    Size = 20,
                    Value = NM_DPNDNT_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DEPENDENT] @ID_DPNDNT OUTPUT, @ID_MMBR, @DT_DPNDNT_DOB, @NM_DPNDNT_LST, @NM_DPNDNT_FRST", sqlParameters, cancellationToken);

            ID_DPNDNT.SetValue(parameterID_DPNDNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DEPENDENT_CAREAsync(int? ID_DPNDNT_CARE, int? ID_DPNDNT, int? ID_MMBR, int? ID_MMBR1, int? ID_PRVDR_NAME, decimal? AM_DPNDNT_CARE_EXPNS, decimal? AM_PAID, decimal? AM_PAID_MNTHLY, string FL_ASSSTD_BY_OTHR, decimal? ID_FRQNCY_DC_EXPNS, decimal? ID_VRFCTN_DC, decimal? AM_DC_OTHR_PAY, string FL_DC_PAY_MMBR, int? ID_VRFCTN_DC_OTHR_PAYER, int? ID_UNERND_INCM, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_MNTHLY, OutputParameter<int?> ID_DC_OTHR_PAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DC_OTHR_PAY = new SqlParameter
            {
                ParameterName = "ID_DC_OTHR_PAY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DC_OTHR_PAY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DPNDNT_CARE_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DPNDNT_CARE_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_DC_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_DC_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC",
                    Precision = 2,
                    Value = ID_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterID_DC_OTHR_PAY,
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DC_PAY_MMBR",
                    Size = 1,
                    Value = FL_DC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC_OTHR_PAYER",
                    Value = ID_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DEPENDENT_CARE] @ID_DPNDNT_CARE, @ID_DPNDNT, @ID_MMBR, @ID_MMBR1, @ID_PRVDR_NAME, @AM_DPNDNT_CARE_EXPNS, @AM_PAID, @AM_PAID_MNTHLY, @FL_ASSSTD_BY_OTHR, @ID_FRQNCY_DC_EXPNS, @ID_VRFCTN_DC, @ID_DC_OTHR_PAY OUTPUT, @AM_DC_OTHR_PAY, @FL_DC_PAY_MMBR, @ID_VRFCTN_DC_OTHR_PAYER, @ID_UNERND_INCM, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_MNTHLY", sqlParameters, cancellationToken);

            ID_DC_OTHR_PAY.SetValue(parameterID_DC_OTHR_PAY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DEPENDENT_CARE_NOHELPAsync(int? ID_DPNDNT, int? ID_MMBR, int? ID_MMBR1, decimal? AM_DPNDNT_CARE_EXPNS, decimal? AM_PAID, decimal? AM_PAID_MNTHLY, string FL_ASSSTD_BY_OTHR, decimal? ID_FRQNCY_DC_EXPNS, int? ID_VRFCTN_DC, string CD_MONTH, string FL_OUTSIDE_DEP_PYMNT, string PROVIDRNAM, string TX_VRFCTN_DC, OutputParameter<int?> ID_DPNDNT_CARE, OutputParameter<int?> IDPRVDRNAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DPNDNT_CARE = new SqlParameter
            {
                ParameterName = "ID_DPNDNT_CARE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DPNDNT_CARE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterIDPRVDRNAME = new SqlParameter
            {
                ParameterName = "IDPRVDRNAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDPRVDRNAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DPNDNT_CARE,
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterIDPRVDRNAME,
                new SqlParameter
                {
                    ParameterName = "AM_DPNDNT_CARE_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DPNDNT_CARE_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_DC_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_DC_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC",
                    Value = ID_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_DEP_PYMNT",
                    Size = 1,
                    Value = FL_OUTSIDE_DEP_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PROVIDRNAM",
                    Size = 25,
                    Value = PROVIDRNAM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_DC",
                    Value = TX_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DEPENDENT_CARE_NOHELP] @ID_DPNDNT_CARE OUTPUT, @ID_DPNDNT, @ID_MMBR, @ID_MMBR1, @IDPRVDRNAME OUTPUT, @AM_DPNDNT_CARE_EXPNS, @AM_PAID, @AM_PAID_MNTHLY, @FL_ASSSTD_BY_OTHR, @ID_FRQNCY_DC_EXPNS, @ID_VRFCTN_DC, @CD_MONTH, @FL_OUTSIDE_DEP_PYMNT, @PROVIDRNAM, @TX_VRFCTN_DC", sqlParameters, cancellationToken);

            ID_DPNDNT_CARE.SetValue(parameterID_DPNDNT_CARE.Value);
            IDPRVDRNAME.SetValue(parameterIDPRVDRNAME.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DEPENDENT_CARE_OTHER_PAYERAsync(int? ID_DPNDNT_CARE, int? ID_MMBR, decimal? AM_DC_OTHR_PAY, decimal? AM_DC_OTHR_PAY_CLIENT_MNTHLY, decimal? AM_DC_OTHR_PAY_VNDR_MNTHLY, DateTime? DT_DC_OTHR_PAYER, string FL_DC_PAY_MMBR, decimal? ID_FRQNCY_DC_OTHR_PAYER, decimal? ID_VRFCTN_DC_OTHR_PAYER, OutputParameter<short?> ID_DC_OTHR_PAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DC_OTHR_PAY = new SqlParameter
            {
                ParameterName = "ID_DC_OTHR_PAY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DC_OTHR_PAY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DC_OTHR_PAY,
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY_CLIENT_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY_CLIENT_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY_VNDR_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY_VNDR_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DC_OTHR_PAYER",
                    Value = DT_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DC_PAY_MMBR",
                    Size = 1,
                    Value = FL_DC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_DC_OTHR_PAYER",
                    Precision = 2,
                    Value = ID_FRQNCY_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC_OTHR_PAYER",
                    Precision = 2,
                    Value = ID_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DEPENDENT_CARE_OTHER_PAYER] @ID_DC_OTHR_PAY OUTPUT, @ID_DPNDNT_CARE, @ID_MMBR, @AM_DC_OTHR_PAY, @AM_DC_OTHR_PAY_CLIENT_MNTHLY, @AM_DC_OTHR_PAY_VNDR_MNTHLY, @DT_DC_OTHR_PAYER, @FL_DC_PAY_MMBR, @ID_FRQNCY_DC_OTHR_PAYER, @ID_VRFCTN_DC_OTHR_PAYER", sqlParameters, cancellationToken);

            ID_DC_OTHR_PAY.SetValue(parameterID_DC_OTHR_PAY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DEPENDENT_CSExpensesAsync(int? ID_MMBR, DateTime? DT_DPNDNT_DOB, string FL_CHILD, string NM_DPNDNT_LST, string NM_DPNDNT_FRST, string NM_DPNDNT_MDL, string NM_DPNDNT_SFX, OutputParameter<int?> ID_DPNDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DPNDNT = new SqlParameter
            {
                ParameterName = "ID_DPNDNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DPNDNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DPNDNT,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DPNDNT_DOB",
                    Value = DT_DPNDNT_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CHILD",
                    Size = 1,
                    Value = FL_CHILD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_LST",
                    Size = 20,
                    Value = NM_DPNDNT_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_FRST",
                    Size = 20,
                    Value = NM_DPNDNT_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_MDL",
                    Size = 20,
                    Value = NM_DPNDNT_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_SFX",
                    Size = 3,
                    Value = NM_DPNDNT_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DEPENDENT_CSExpenses] @ID_DPNDNT OUTPUT, @ID_MMBR, @DT_DPNDNT_DOB, @FL_CHILD, @NM_DPNDNT_LST, @NM_DPNDNT_FRST, @NM_DPNDNT_MDL, @NM_DPNDNT_SFX", sqlParameters, cancellationToken);

            ID_DPNDNT.SetValue(parameterID_DPNDNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DISASTERAsync(string NM_DISASTER, DateTime? DT_DISASTER_BEGIN, DateTime? DT_DISASTER_END, string TX_DISASTER_DESC, string FL_CANCELLED, OutputParameter<int?> ID_DISASTER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DISASTER = new SqlParameter
            {
                ParameterName = "ID_DISASTER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DISASTER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DISASTER,
                new SqlParameter
                {
                    ParameterName = "NM_DISASTER",
                    Size = 100,
                    Value = NM_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DISASTER_BEGIN",
                    Value = DT_DISASTER_BEGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DISASTER_END",
                    Value = DT_DISASTER_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DISASTER_DESC",
                    Size = 100,
                    Value = TX_DISASTER_DESC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CANCELLED",
                    Size = 1,
                    Value = FL_CANCELLED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DISASTER] @ID_DISASTER OUTPUT, @NM_DISASTER, @DT_DISASTER_BEGIN, @DT_DISASTER_END, @TX_DISASTER_DESC, @FL_CANCELLED", sqlParameters, cancellationToken);

            ID_DISASTER.SetValue(parameterID_DISASTER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DISASTER_COUNTIESAsync(int? ID_DISASTER, string CD_CNTY, OutputParameter<int?> ID_DISASTER_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DISASTER_CNTY = new SqlParameter
            {
                ParameterName = "ID_DISASTER_CNTY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DISASTER_CNTY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DISASTER_CNTY,
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DISASTER_COUNTIES] @ID_DISASTER_CNTY OUTPUT, @ID_DISASTER, @CD_CNTY", sqlParameters, cancellationToken);

            ID_DISASTER_CNTY.SetValue(parameterID_DISASTER_CNTY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_DPNDNT_CARE_OPAsync(int? ID_DPNDNT_CARE, int? ID_MMBR, decimal? AM_DC_OTHR_PAY, string FL_DC_PAY_MMBR, int? ID_VRFCTN_DC_OTHR_PAYER, string TX_VRFCTN_DC_OTHR_PAYER, OutputParameter<int?> ID_DC_OTHR_PAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DC_OTHR_PAY = new SqlParameter
            {
                ParameterName = "ID_DC_OTHR_PAY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DC_OTHR_PAY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DC_OTHR_PAY,
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DC_PAY_MMBR",
                    Size = 1,
                    Value = FL_DC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC_OTHR_PAYER",
                    Value = ID_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_DC_OTHR_PAYER",
                    Value = TX_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_DPNDNT_CARE_OP] @ID_DC_OTHR_PAY OUTPUT, @ID_DPNDNT_CARE, @ID_MMBR, @AM_DC_OTHR_PAY, @FL_DC_PAY_MMBR, @ID_VRFCTN_DC_OTHR_PAYER, @TX_VRFCTN_DC_OTHR_PAYER", sqlParameters, cancellationToken);

            ID_DC_OTHR_PAY.SetValue(parameterID_DC_OTHR_PAY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_EMPLOYERAsync(decimal? CD_CNTY, string NM_EMPLYR, string NO_EMPLYR_PHONE, string AD_STREET1, string AD_CITY, string AD_STATE, string AD_ZIP, OutputParameter<int?> ID_EMPLOYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_EMPLOYER = new SqlParameter
            {
                ParameterName = "ID_EMPLOYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_EMPLOYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_EMPLOYER,
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Precision = 18,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_EMPLOYER] @ID_EMPLOYER OUTPUT, @CD_CNTY, @NM_EMPLYR, @NO_EMPLYR_PHONE, @AD_STREET1, @AD_CITY, @AD_STATE, @AD_ZIP", sqlParameters, cancellationToken);

            ID_EMPLOYER.SetValue(parameterID_EMPLOYER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_EMPLOYMENTAsync(int? ID_MMBR, decimal? ID_INCM_TYPE, decimal? AM_AVG_MNTHLY, decimal? AM_CNTRCT_INCM_MNTHLY, decimal? AM_ERND_SELF_EMPLYMNT_INCM, decimal? AM_ERND_SELF_EMPLYMNT_INCM2, decimal? AM_INCM_PER_FREQ, decimal? AM_INCM_MNTHLY, decimal? AM_TTL_INCM, decimal? AM_TTL_INCM_NXT_MNTH, decimal? AM_TTL_INCM_PRVS_MNTH, decimal? AM_UNERND_SELF_EMPLYMNT_INCM, decimal? AM_UNERND_SELF_EMPLYMNT_INCM2, decimal? AM_YRLY_SLRY, DateTime? DT_EMPLYMNT_END, DateTime? DT_EMPLYMNT_STRT, string FL_GOOD_RSN_QUIT, string FL_MNG_PRPRTY, string FL_QLFY_STMPS, string FL_SELF_EMPLYD, string FL_TTL_RPRSNTTV_PAY, string FL_VLNTRY_QUIT, decimal? ID_FRQNCY_EMPLYMNT, int? ID_VRFCTN_EMPLYMNT, string NM_EMPLYR, string NM_INSRNC_WCOMP, string NM_PRPRTY, decimal? NO_HOURS_MNG_PRPRTY, decimal? NO_HOURS_MNG_PRPRTY_MTH2, decimal? NO_HOURS_WRK_PRWK_MTH1, decimal? NO_HOURS_WRK_PRWK_MTH2, string NO_EMPLYR_PHONE, decimal? NO_MNTHS, string TX_BSNSS_TYPE, string TX_PAY_DAY, string TX_RSN_QUIT, string TX_SLCTD_FLDS, int? ID_EMPLOYER, string TX_VRFCTN_EMPLYMNT, int? ID_WRKR_RMNDR, DateTime? DT_VQ_Exemption, decimal? CD_CNTY, string AD_STREET1, string AD_CITY, string AD_STATE, string AD_ZIP, OutputParameter<int?> ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_EMPLYMNT = new SqlParameter
            {
                ParameterName = "ID_EMPLYMNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_EMPLYMNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_EMPLYMNT,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Precision = 2,
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AVG_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AVG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CNTRCT_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CNTRCT_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ERND_SELF_EMPLYMNT_INCM2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ERND_SELF_EMPLYMNT_INCM2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_NXT_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_PRVS_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_PRVS_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_SELF_EMPLYMNT_INCM2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_SELF_EMPLYMNT_INCM2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_YRLY_SLRY",
                    Precision = 8,
                    Scale = 2,
                    Value = AM_YRLY_SLRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_STRT",
                    Value = DT_EMPLYMNT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GOOD_RSN_QUIT",
                    Size = 1,
                    Value = FL_GOOD_RSN_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MNG_PRPRTY",
                    Size = 1,
                    Value = FL_MNG_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QLFY_STMPS",
                    Size = 1,
                    Value = FL_QLFY_STMPS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SELF_EMPLYD",
                    Size = 1,
                    Value = FL_SELF_EMPLYD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TTL_RPRSNTTV_PAY",
                    Size = 1,
                    Value = FL_TTL_RPRSNTTV_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_VLNTRY_QUIT",
                    Size = 1,
                    Value = FL_VLNTRY_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 2,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_INSRNC_WCOMP",
                    Size = 50,
                    Value = NM_INSRNC_WCOMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRPRTY",
                    Size = 50,
                    Value = NM_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_MNG_PRPRTY",
                    Precision = 3,
                    Value = NO_HOURS_MNG_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_MNG_PRPRTY_MTH2",
                    Precision = 3,
                    Value = NO_HOURS_MNG_PRPRTY_MTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_WRK_PRWK_MTH1",
                    Precision = 3,
                    Value = NO_HOURS_WRK_PRWK_MTH1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_WRK_PRWK_MTH2",
                    Precision = 3,
                    Value = NO_HOURS_WRK_PRWK_MTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS",
                    Precision = 2,
                    Value = NO_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_BSNSS_TYPE",
                    Value = TX_BSNSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAY_DAY",
                    Size = 10,
                    Value = TX_PAY_DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RSN_QUIT",
                    Value = TX_RSN_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SLCTD_FLDS",
                    Value = TX_SLCTD_FLDS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLOYER",
                    Value = ID_EMPLOYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_RMNDR",
                    Value = ID_WRKR_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_VQ_Exemption",
                    Value = DT_VQ_Exemption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Precision = 3,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_EMPLOYMENT] @ID_EMPLYMNT OUTPUT, @ID_MMBR, @ID_INCM_TYPE, @AM_AVG_MNTHLY, @AM_CNTRCT_INCM_MNTHLY, @AM_ERND_SELF_EMPLYMNT_INCM, @AM_ERND_SELF_EMPLYMNT_INCM2, @AM_INCM_PER_FREQ, @AM_INCM_MNTHLY, @AM_TTL_INCM, @AM_TTL_INCM_NXT_MNTH, @AM_TTL_INCM_PRVS_MNTH, @AM_UNERND_SELF_EMPLYMNT_INCM, @AM_UNERND_SELF_EMPLYMNT_INCM2, @AM_YRLY_SLRY, @DT_EMPLYMNT_END, @DT_EMPLYMNT_STRT, @FL_GOOD_RSN_QUIT, @FL_MNG_PRPRTY, @FL_QLFY_STMPS, @FL_SELF_EMPLYD, @FL_TTL_RPRSNTTV_PAY, @FL_VLNTRY_QUIT, @ID_FRQNCY_EMPLYMNT, @ID_VRFCTN_EMPLYMNT, @NM_EMPLYR, @NM_INSRNC_WCOMP, @NM_PRPRTY, @NO_HOURS_MNG_PRPRTY, @NO_HOURS_MNG_PRPRTY_MTH2, @NO_HOURS_WRK_PRWK_MTH1, @NO_HOURS_WRK_PRWK_MTH2, @NO_EMPLYR_PHONE, @NO_MNTHS, @TX_BSNSS_TYPE, @TX_PAY_DAY, @TX_RSN_QUIT, @TX_SLCTD_FLDS, @ID_EMPLOYER, @TX_VRFCTN_EMPLYMNT, @ID_WRKR_RMNDR, @DT_VQ_Exemption, @CD_CNTY, @AD_STREET1, @AD_CITY, @AD_STATE, @AD_ZIP", sqlParameters, cancellationToken);

            ID_EMPLYMNT.SetValue(parameterID_EMPLYMNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_EMPLOYMENT_EarnedAsync(int? ID_MMBR, int? ID_INCM_TYPE, string DT_EMPLYMNT_END, string DT_EMPLYMNT_STRT, string NM_EMPLYR, string NO_EMPLYR_PHONE, decimal? AM_INCM_PER_FREQ, decimal? AM_INCM_MNTHLY, decimal? ID_FRQNCY_EMPLYMNT, string ADDRLN1, string ADDRLN2, string CITY, string STATE, string ZIP, string ZIP4, int? ID_CNTY_STATE, string TX_PAY_DAY, int? HRS_WORKED, int? HRS_WORKED2, int? HRS_MNG1, int? HRS_MNG2, OutputParameter<int?> IDEMPLOY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDEMPLOY = new SqlParameter
            {
                ParameterName = "IDEMPLOY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDEMPLOY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDEMPLOY,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Size = 20,
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_STRT",
                    Size = 20,
                    Value = DT_EMPLYMNT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 1,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN1",
                    Size = 25,
                    Value = ADDRLN1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN2",
                    Size = 25,
                    Value = ADDRLN2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CITY",
                    Size = 25,
                    Value = CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STATE",
                    Size = 2,
                    Value = STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ZIP",
                    Size = 5,
                    Value = ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ZIP4",
                    Size = 4,
                    Value = ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAY_DAY",
                    Size = 10,
                    Value = TX_PAY_DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_WORKED",
                    Value = HRS_WORKED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_WORKED2",
                    Value = HRS_WORKED2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_MNG1",
                    Value = HRS_MNG1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_MNG2",
                    Value = HRS_MNG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_EMPLOYMENT_Earned] @IDEMPLOY OUTPUT, @ID_MMBR, @ID_INCM_TYPE, @DT_EMPLYMNT_END, @DT_EMPLYMNT_STRT, @NM_EMPLYR, @NO_EMPLYR_PHONE, @AM_INCM_PER_FREQ, @AM_INCM_MNTHLY, @ID_FRQNCY_EMPLYMNT, @ADDRLN1, @ADDRLN2, @CITY, @STATE, @ZIP, @ZIP4, @ID_CNTY_STATE, @TX_PAY_DAY, @HRS_WORKED, @HRS_WORKED2, @HRS_MNG1, @HRS_MNG2", sqlParameters, cancellationToken);

            IDEMPLOY.SetValue(parameterIDEMPLOY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_EMPLOYMENT_RBAsync(int? ID_MMBR, int? ID_INCM_TYPE, string DT_EMPLYMNT_END, string DT_EMPLYMNT_STRT, string NM_EMPLYR, string NO_EMPLYR_PHONE, decimal? AM_INCM_PER_FREQ, decimal? AM_TTL_INCM_NXT_MNTH, decimal? AM_TTL_INCM_PRVS_MNTH, decimal? ID_FRQNCY_EMPLYMNT, int? ID_VRFCTN_EMPLYMNT, string ADDRLN1, string ADDRLN2, string CITY, string STATE, string ZIP, string ZIP4, int? ID_CNTY_STATE, string TX_PAY_DAY, string TX_VRFCTN_EMPLYMNT, OutputParameter<int?> IDEMPLOY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDEMPLOY = new SqlParameter
            {
                ParameterName = "IDEMPLOY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDEMPLOY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDEMPLOY,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Size = 20,
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_STRT",
                    Size = 20,
                    Value = DT_EMPLYMNT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_NXT_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_PRVS_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_PRVS_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 1,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN1",
                    Size = 25,
                    Value = ADDRLN1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN2",
                    Size = 25,
                    Value = ADDRLN2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CITY",
                    Size = 25,
                    Value = CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STATE",
                    Size = 2,
                    Value = STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ZIP",
                    Size = 5,
                    Value = ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ZIP4",
                    Size = 4,
                    Value = ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAY_DAY",
                    Size = 10,
                    Value = TX_PAY_DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_EMPLOYMENT_RB] @IDEMPLOY OUTPUT, @ID_MMBR, @ID_INCM_TYPE, @DT_EMPLYMNT_END, @DT_EMPLYMNT_STRT, @NM_EMPLYR, @NO_EMPLYR_PHONE, @AM_INCM_PER_FREQ, @AM_TTL_INCM_NXT_MNTH, @AM_TTL_INCM_PRVS_MNTH, @ID_FRQNCY_EMPLYMNT, @ID_VRFCTN_EMPLYMNT, @ADDRLN1, @ADDRLN2, @CITY, @STATE, @ZIP, @ZIP4, @ID_CNTY_STATE, @TX_PAY_DAY, @TX_VRFCTN_EMPLYMNT", sqlParameters, cancellationToken);

            IDEMPLOY.SetValue(parameterIDEMPLOY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ins_EMPLOYMENT_SelfAsync(int? ID_INCM_TYPE, string TX_BSNSS_TYPE, string NM_EMPLYR, int? ID_VRFCTN_EMPLYMNT, decimal? ID_FRQNCY_EMPLYMNT, decimal? AM_INCM_PER_FREQ, decimal? AM_ERND_SELF_EMPLYMNT_INCM, decimal? AM_UNERND_SELF_EMPLYMNT_INCM, string NM_PRPRTY, decimal? NO_HOURS_MNG_PRPRTY, decimal? NO_HOURS_MNG_PRPRTY2, string FL_TTL_RPRSNTTV_PAY, int? ID_MMBR, decimal? AM_ERND_SELF_EMPLYMNT_INCM2, decimal? AM_UNERND_SELF_EMPLYMNT_INCM2, string TX_SLCTD_FLDS, string TX_VRFCTN_EMPLYMNT, OutputParameter<int?> IDEMPLOY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDEMPLOY = new SqlParameter
            {
                ParameterName = "IDEMPLOY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDEMPLOY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDEMPLOY,
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_BSNSS_TYPE",
                    Value = TX_BSNSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 2,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRPRTY",
                    Size = 50,
                    Value = NM_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_MNG_PRPRTY",
                    Precision = 3,
                    Value = NO_HOURS_MNG_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_MNG_PRPRTY2",
                    Precision = 3,
                    Value = NO_HOURS_MNG_PRPRTY2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TTL_RPRSNTTV_PAY",
                    Size = 1,
                    Value = FL_TTL_RPRSNTTV_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ERND_SELF_EMPLYMNT_INCM2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ERND_SELF_EMPLYMNT_INCM2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_SELF_EMPLYMNT_INCM2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_SELF_EMPLYMNT_INCM2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SLCTD_FLDS",
                    Value = TX_SLCTD_FLDS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ins_EMPLOYMENT_Self] @IDEMPLOY OUTPUT, @ID_INCM_TYPE, @TX_BSNSS_TYPE, @NM_EMPLYR, @ID_VRFCTN_EMPLYMNT, @ID_FRQNCY_EMPLYMNT, @AM_INCM_PER_FREQ, @AM_ERND_SELF_EMPLYMNT_INCM, @AM_UNERND_SELF_EMPLYMNT_INCM, @NM_PRPRTY, @NO_HOURS_MNG_PRPRTY, @NO_HOURS_MNG_PRPRTY2, @FL_TTL_RPRSNTTV_PAY, @ID_MMBR, @AM_ERND_SELF_EMPLYMNT_INCM2, @AM_UNERND_SELF_EMPLYMNT_INCM2, @TX_SLCTD_FLDS, @TX_VRFCTN_EMPLYMNT", sqlParameters, cancellationToken);

            IDEMPLOY.SetValue(parameterIDEMPLOY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_EMPLOYMENT_STRIKEAsync(int? ID_MMBR, int? ID_INCM_TYPE, string NM_EMPLYR, string NO_EMPLYR_PHONE, decimal? AM_INCM_PER_FREQ, decimal? AM_TTL_INCM_NXT_MNTH, decimal? AM_TTL_INCM_PRVS_MNTH, decimal? AM_AVG_MNTHLY, decimal? ID_FRQNCY_EMPLYMNT, string ADDRLN1, string ADDRLN2, string CITY, string STATE, string ZIP, string ZIP4, int? ID_CNTY_STATE, OutputParameter<int?> IDEMPLOY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDEMPLOY = new SqlParameter
            {
                ParameterName = "IDEMPLOY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDEMPLOY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDEMPLOY,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_NXT_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_PRVS_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_PRVS_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AVG_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AVG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 1,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN1",
                    Size = 25,
                    Value = ADDRLN1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN2",
                    Size = 25,
                    Value = ADDRLN2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CITY",
                    Size = 25,
                    Value = CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STATE",
                    Size = 2,
                    Value = STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ZIP",
                    Size = 5,
                    Value = ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ZIP4",
                    Size = 4,
                    Value = ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_EMPLOYMENT_STRIKE] @IDEMPLOY OUTPUT, @ID_MMBR, @ID_INCM_TYPE, @NM_EMPLYR, @NO_EMPLYR_PHONE, @AM_INCM_PER_FREQ, @AM_TTL_INCM_NXT_MNTH, @AM_TTL_INCM_PRVS_MNTH, @AM_AVG_MNTHLY, @ID_FRQNCY_EMPLYMNT, @ADDRLN1, @ADDRLN2, @CITY, @STATE, @ZIP, @ZIP4, @ID_CNTY_STATE", sqlParameters, cancellationToken);

            IDEMPLOY.SetValue(parameterIDEMPLOY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_EMPLOYMENT_StrikerAsync(int? ID_MMBR, decimal? AM_INCM_PER_FREQ, decimal? AM_INCM_MNTHLY, decimal? ID_FRQNCY_EMPLYMNT, string NM_EMPLYR, string NO_EMPLYR_PHONE, OutputParameter<int?> ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_EMPLYMNT = new SqlParameter
            {
                ParameterName = "ID_EMPLYMNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_EMPLYMNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_EMPLYMNT,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 1,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_EMPLOYMENT_Striker] @ID_EMPLYMNT OUTPUT, @ID_MMBR, @AM_INCM_PER_FREQ, @AM_INCM_MNTHLY, @ID_FRQNCY_EMPLYMNT, @NM_EMPLYR, @NO_EMPLYR_PHONE", sqlParameters, cancellationToken);

            ID_EMPLYMNT.SetValue(parameterID_EMPLYMNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_EMPLOYMENTEarnedEmployerAsync(int? ID_MMBR, int? ID_INCM_TYPE, string DT_EMPLYMNT_END, string DT_EMPLYMNT_STRT, string NM_EMPLYR, string NO_EMPLYR_PHONE, decimal? AM_INCM_PER_FREQ, decimal? AM_INCM_MNTHLY, decimal? ID_FRQNCY_EMPLYMNT, int? ID_CNTY_STATE, string TX_PAY_DAY, int? HRS_WORKED, int? HRS_WORKED2, int? HRS_MNG1, int? HRS_MNG2, int? IDEMPLOYER, OutputParameter<int?> IDEMPLOY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDEMPLOY = new SqlParameter
            {
                ParameterName = "IDEMPLOY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDEMPLOY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDEMPLOY,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Size = 20,
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_STRT",
                    Size = 20,
                    Value = DT_EMPLYMNT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 1,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAY_DAY",
                    Size = 10,
                    Value = TX_PAY_DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_WORKED",
                    Value = HRS_WORKED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_WORKED2",
                    Value = HRS_WORKED2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_MNG1",
                    Value = HRS_MNG1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_MNG2",
                    Value = HRS_MNG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IDEMPLOYER",
                    Value = IDEMPLOYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_EMPLOYMENTEarnedEmployer] @IDEMPLOY OUTPUT, @ID_MMBR, @ID_INCM_TYPE, @DT_EMPLYMNT_END, @DT_EMPLYMNT_STRT, @NM_EMPLYR, @NO_EMPLYR_PHONE, @AM_INCM_PER_FREQ, @AM_INCM_MNTHLY, @ID_FRQNCY_EMPLYMNT, @ID_CNTY_STATE, @TX_PAY_DAY, @HRS_WORKED, @HRS_WORKED2, @HRS_MNG1, @HRS_MNG2, @IDEMPLOYER", sqlParameters, cancellationToken);

            IDEMPLOY.SetValue(parameterIDEMPLOY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_FA_STATUSAsync(int? ID_MMBR, short? ID_CNTY_STATE, DateTime? DT_CASE_CLSD_WILLORHAS, string FL_FA_CASE_CLSD, string FL_LAST_MNTH_FA, string FL_RECERT, string FL_THIS_CNTY, int? ID_VRFCTN_FA_STTS, string TX_CNTCT_INFO, string TX_CNTY_OTHR, OutputParameter<int?> ID_FA_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_FA_STTS = new SqlParameter
            {
                ParameterName = "ID_FA_STTS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_FA_STTS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_FA_STTS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_CLSD_WILLORHAS",
                    Value = DT_CASE_CLSD_WILLORHAS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FA_CASE_CLSD",
                    Size = 1,
                    Value = FL_FA_CASE_CLSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LAST_MNTH_FA",
                    Size = 1,
                    Value = FL_LAST_MNTH_FA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RECERT",
                    Size = 1,
                    Value = FL_RECERT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_THIS_CNTY",
                    Size = 1,
                    Value = FL_THIS_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_FA_STTS",
                    Value = ID_VRFCTN_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTCT_INFO",
                    Value = TX_CNTCT_INFO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTY_OTHR",
                    Value = TX_CNTY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_FA_STATUS] @ID_FA_STTS OUTPUT, @ID_MMBR, @ID_CNTY_STATE, @DT_CASE_CLSD_WILLORHAS, @FL_FA_CASE_CLSD, @FL_LAST_MNTH_FA, @FL_RECERT, @FL_THIS_CNTY, @ID_VRFCTN_FA_STTS, @TX_CNTCT_INFO, @TX_CNTY_OTHR", sqlParameters, cancellationToken);

            ID_FA_STTS.SetValue(parameterID_FA_STTS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_FA_STATUS_2ndMonthAsync(int? ID_MMBR, short? ID_CNTY_STATE, DateTime? DT_CASE_CLSD_WILLORHAS, string FL_FA_CASE_CLSD, string FL_LAST_MNTH_FA, string FL_RECERT, string FL_THIS_CNTY, int? ID_VRFCTN_FA_STTS, string TX_CNTCT_INFO, string TX_CNTY_OTHR, OutputParameter<int?> ID_FA_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_FA_STTS = new SqlParameter
            {
                ParameterName = "ID_FA_STTS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_FA_STTS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_FA_STTS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_CLSD_WILLORHAS",
                    Value = DT_CASE_CLSD_WILLORHAS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FA_CASE_CLSD",
                    Size = 1,
                    Value = FL_FA_CASE_CLSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LAST_MNTH_FA",
                    Size = 1,
                    Value = FL_LAST_MNTH_FA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RECERT",
                    Size = 1,
                    Value = FL_RECERT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_THIS_CNTY",
                    Size = 1,
                    Value = FL_THIS_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_FA_STTS",
                    Value = ID_VRFCTN_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTCT_INFO",
                    Value = TX_CNTCT_INFO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTY_OTHR",
                    Value = TX_CNTY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_FA_STATUS_2ndMonth] @ID_FA_STTS OUTPUT, @ID_MMBR, @ID_CNTY_STATE, @DT_CASE_CLSD_WILLORHAS, @FL_FA_CASE_CLSD, @FL_LAST_MNTH_FA, @FL_RECERT, @FL_THIS_CNTY, @ID_VRFCTN_FA_STTS, @TX_CNTCT_INFO, @TX_CNTY_OTHR", sqlParameters, cancellationToken);

            ID_FA_STTS.SetValue(parameterID_FA_STTS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_INSURANCEAsync(decimal? ID_PRVDR_TYPE, string NM_PRVDR, decimal? ID_INSRNC_PAYER, decimal? AM_PREMIUM, decimal? AM_PREMIUM_MNTHLY, decimal? AM_TTL_PREMIUM_PAID, DateTime? DT_PREMIUM_PAID, decimal? ID_FRQNCY_PREMIUM, int? ID_VRFCTN_INSRNC, decimal? NO_HH_MMBR, string CD_MONTH, string TX_VRFCTN_INSRNC, OutputParameter<int?> ID_PRVDR_NAME, OutputParameter<int?> ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_PRVDR_NAME = new SqlParameter
            {
                ParameterName = "ID_PRVDR_NAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_PRVDR_NAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_INSRNC = new SqlParameter
            {
                ParameterName = "ID_INSRNC",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_INSRNC?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_PRVDR_NAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_INSRNC,
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC_PAYER",
                    Precision = 1,
                    Value = ID_INSRNC_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_PREMIUM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_PREMIUM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PREMIUM_PAID",
                    Value = DT_PREMIUM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PREMIUM",
                    Precision = 1,
                    Value = ID_FRQNCY_PREMIUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INSRNC",
                    Value = ID_VRFCTN_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_MMBR",
                    Precision = 1,
                    Value = NO_HH_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_INSRNC",
                    Value = TX_VRFCTN_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_INSURANCE] @ID_PRVDR_NAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR, @ID_INSRNC OUTPUT, @ID_INSRNC_PAYER, @AM_PREMIUM, @AM_PREMIUM_MNTHLY, @AM_TTL_PREMIUM_PAID, @DT_PREMIUM_PAID, @ID_FRQNCY_PREMIUM, @ID_VRFCTN_INSRNC, @NO_HH_MMBR, @CD_MONTH, @TX_VRFCTN_INSRNC", sqlParameters, cancellationToken);

            ID_PRVDR_NAME.SetValue(parameterID_PRVDR_NAME.Value);
            ID_INSRNC.SetValue(parameterID_INSRNC.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_INSURANCE_OTHER_PAYERResult>> Ins_INSURANCE_OTHER_PAYERAsync(int? ID_INSRNC, int? ID_MMBR, decimal? AM_PREMIUM_OTHR_PAYER, DateTime? DT_INSRNC_OTHR_PAYER, string FL_INSRNC_PAY_MMBR, string FL_INSRNC_PAY_ONGOING, string FL_PAY_HH_MMBR_MNTHLY, string FL_PAY_PREMIUM_CRRNT_MNTH, int? ID_VRFCTN_INSRNC_OTHR_PAYER, string TX_VRFCTN_INSRNC_OTHR_PAYER, string TX_VRFCTN_UNERND_INCM, OutputParameter<int?> ID_INSRNC_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_INSRNC_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_INSRNC_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_INSRNC_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_INSRNC_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_INSRNC_OTHR_PAYER",
                    Value = DT_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAY_MMBR",
                    Size = 1,
                    Value = FL_INSRNC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAY_ONGOING",
                    Size = 1,
                    Value = FL_INSRNC_PAY_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_HH_MMBR_MNTHLY",
                    Size = 1,
                    Value = FL_PAY_HH_MMBR_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_PREMIUM_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_PAY_PREMIUM_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INSRNC_OTHR_PAYER",
                    Value = ID_VRFCTN_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_INSRNC_OTHR_PAYER",
                    Value = TX_VRFCTN_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_INSURANCE_OTHER_PAYERResult>("EXEC @returnValue = [dbo].[Ins_INSURANCE_OTHER_PAYER] @ID_INSRNC_OTHR_PAYER OUTPUT, @ID_INSRNC, @ID_MMBR, @AM_PREMIUM_OTHR_PAYER, @DT_INSRNC_OTHR_PAYER, @FL_INSRNC_PAY_MMBR, @FL_INSRNC_PAY_ONGOING, @FL_PAY_HH_MMBR_MNTHLY, @FL_PAY_PREMIUM_CRRNT_MNTH, @ID_VRFCTN_INSRNC_OTHR_PAYER, @TX_VRFCTN_INSRNC_OTHR_PAYER, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            ID_INSRNC_OTHR_PAYER.SetValue(parameterID_INSRNC_OTHR_PAYER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_ISSUANCEAsync(string ISS_CASENO, string ISS_ACDTE, string ISS_COUNTY, string ISS_ADMIN, string ISS_NAME, string ISS_ADDR, string ISS_HHTYP, string ISS_ACTON, string ISS_STID, string ISS_ISSTP, string ISS_IAMT, string ISS_RSTAT, string ISS_RECAT, string ISS_AMT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ISS_CASENO",
                    Size = 9,
                    Value = ISS_CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_ACDTE",
                    Size = 10,
                    Value = ISS_ACDTE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_COUNTY",
                    Size = 2,
                    Value = ISS_COUNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_ADMIN",
                    Size = 2,
                    Value = ISS_ADMIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_NAME",
                    Size = 25,
                    Value = ISS_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_ADDR",
                    Size = 25,
                    Value = ISS_ADDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_HHTYP",
                    Size = 2,
                    Value = ISS_HHTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_ACTON",
                    Size = 10,
                    Value = ISS_ACTON ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_STID",
                    Size = 10,
                    Value = ISS_STID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_ISSTP",
                    Size = 1,
                    Value = ISS_ISSTP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_IAMT",
                    Size = 5,
                    Value = ISS_IAMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_RSTAT",
                    Size = 5,
                    Value = ISS_RSTAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_RECAT",
                    Size = 5,
                    Value = ISS_RECAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ISS_AMT",
                    Size = 9,
                    Value = ISS_AMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_ISSUANCE] @ISS_CASENO, @ISS_ACDTE, @ISS_COUNTY, @ISS_ADMIN, @ISS_NAME, @ISS_ADDR, @ISS_HHTYP, @ISS_ACTON, @ISS_STID, @ISS_ISSTP, @ISS_IAMT, @ISS_RSTAT, @ISS_RECAT, @ISS_AMT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_LOGINAsync(string ID_FA_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_SSN",
                    Size = 9,
                    Value = ID_FA_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_LOGIN] @ID_FA_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEALAsync(int? ID_MMBR, decimal? AM_MEAL_MMBR_PAY, decimal? NO_MEALS, OutputParameter<int?> ID_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MEAL = new SqlParameter
            {
                ParameterName = "ID_MEAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MEAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MEAL,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MMBR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MMBR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS",
                    Precision = 2,
                    Value = NO_MEALS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEAL] @ID_MEAL OUTPUT, @ID_MMBR, @AM_MEAL_MMBR_PAY, @NO_MEALS", sqlParameters, cancellationToken);

            ID_MEAL.SetValue(parameterID_MEAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEAL_OTHERAsync(int? ID_CASE_NMBR, string NM_MEAL_OTHR_LST, string NM_MEAL_OTHR_FRST, string NM_MEAL_OTHR_MDL, string NM_MEAL_OTHR_SFX, string CD_MONTH, OutputParameter<short?> ID_MEAL_OTHER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MEAL_OTHER = new SqlParameter
            {
                ParameterName = "ID_MEAL_OTHER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MEAL_OTHER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MEAL_OTHER,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_LST",
                    Size = 20,
                    Value = NM_MEAL_OTHR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_FRST",
                    Size = 20,
                    Value = NM_MEAL_OTHR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_MDL",
                    Size = 20,
                    Value = NM_MEAL_OTHR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_SFX",
                    Size = 3,
                    Value = NM_MEAL_OTHR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEAL_OTHER] @ID_MEAL_OTHER OUTPUT, @ID_CASE_NMBR, @NM_MEAL_OTHR_LST, @NM_MEAL_OTHR_FRST, @NM_MEAL_OTHR_MDL, @NM_MEAL_OTHR_SFX, @CD_MONTH", sqlParameters, cancellationToken);

            ID_MEAL_OTHER.SetValue(parameterID_MEAL_OTHER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEAL_RoomerBoarderAsync(int? ID_MMBR, short? ID_MEAL_OTHER, decimal? AM_MEAL_COST_HOH, decimal? AM_MEAL_MMBR_PAY, decimal? ID_FRQNCY_MEAL_COST, decimal? ID_FRQNCY_MEAL_PAY, int? ID_VRFCTN_MEAL, decimal? NO_MEALS, string CD_MONTH, string TX_VRFCTN_MEAL, OutputParameter<int?> ID_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MEAL = new SqlParameter
            {
                ParameterName = "ID_MEAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MEAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MEAL,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MEAL_OTHER",
                    Value = ID_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_COST_HOH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_COST_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MMBR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MMBR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_COST",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_PAY",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MEAL",
                    Value = ID_VRFCTN_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS",
                    Precision = 2,
                    Value = NO_MEALS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_MEAL",
                    Value = TX_VRFCTN_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEAL_RoomerBoarder] @ID_MEAL OUTPUT, @ID_MMBR, @ID_MEAL_OTHER, @AM_MEAL_COST_HOH, @AM_MEAL_MMBR_PAY, @ID_FRQNCY_MEAL_COST, @ID_FRQNCY_MEAL_PAY, @ID_VRFCTN_MEAL, @NO_MEALS, @CD_MONTH, @TX_VRFCTN_MEAL", sqlParameters, cancellationToken);

            ID_MEAL.SetValue(parameterID_MEAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MED_EXP_TRIPSAsync(int? ID_MMBR, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_ONETIME, decimal? ID_VRFCTN_MDCL_EXPNS, int? ID_VRFCTN_RMNNG, decimal? NO_MNTHS_RMNNG, decimal? ID_PRVDR_TYPE, string NM_PRVDR, decimal? AM_FLAT_FEE, string FL_DRVS_SELF, string FL_PAY_FLAT_FEE, int? NO_MILES_PER_MNTH, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, string TX_MDCL_NOTES_DSCR1, string TX_MDCL_NOTES_DSCR2, string TX_MDCL_NOTES_DSCR3, string TX_MDCL_NOTES_DSCR4, string TX_VRFCTN_UNERND_INCM, OutputParameter<int?> IDMDCLEXPNS, OutputParameter<int?> IDPRVDRNAME, OutputParameter<int?> ID_TRIPS, OutputParameter<short?> ID_ME_OTHR_PAYER, OutputParameter<int?> ID_MDCL_NOTES1, OutputParameter<int?> ID_MDCL_NOTES2, OutputParameter<int?> ID_MDCL_NOTES3, OutputParameter<int?> ID_MDCL_NOTES4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDMDCLEXPNS = new SqlParameter
            {
                ParameterName = "IDMDCLEXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDMDCLEXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterIDPRVDRNAME = new SqlParameter
            {
                ParameterName = "IDPRVDRNAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDPRVDRNAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_TRIPS = new SqlParameter
            {
                ParameterName = "ID_TRIPS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_TRIPS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_ME_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_ME_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ME_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_MDCL_NOTES1 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES1",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES2 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES3 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES3",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES3?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES4 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES4",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES4?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDMDCLEXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Precision = 2,
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RMNNG",
                    Value = ID_VRFCTN_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIDPRVDRNAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_TRIPS,
                new SqlParameter
                {
                    ParameterName = "AM_FLAT_FEE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DRVS_SELF",
                    Size = 1,
                    Value = FL_DRVS_SELF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_FLAT_FEE",
                    Size = 1,
                    Value = FL_PAY_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MILES_PER_MNTH",
                    Value = NO_MILES_PER_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_ME_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_MDCL_NOTES1,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR1",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES2,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR2",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES3,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR3",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES4,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR4",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MED_EXP_TRIPS] @IDMDCLEXPNS OUTPUT, @ID_MMBR, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_ONETIME, @ID_VRFCTN_MDCL_EXPNS, @ID_VRFCTN_RMNNG, @NO_MNTHS_RMNNG, @IDPRVDRNAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR, @ID_TRIPS OUTPUT, @AM_FLAT_FEE, @FL_DRVS_SELF, @FL_PAY_FLAT_FEE, @NO_MILES_PER_MNTH, @ID_ME_OTHR_PAYER OUTPUT, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_MDCL_NOTES1 OUTPUT, @TX_MDCL_NOTES_DSCR1, @ID_MDCL_NOTES2 OUTPUT, @TX_MDCL_NOTES_DSCR2, @ID_MDCL_NOTES3 OUTPUT, @TX_MDCL_NOTES_DSCR3, @ID_MDCL_NOTES4 OUTPUT, @TX_MDCL_NOTES_DSCR4, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            IDMDCLEXPNS.SetValue(parameterIDMDCLEXPNS.Value);
            IDPRVDRNAME.SetValue(parameterIDPRVDRNAME.Value);
            ID_TRIPS.SetValue(parameterID_TRIPS.Value);
            ID_ME_OTHR_PAYER.SetValue(parameterID_ME_OTHR_PAYER.Value);
            ID_MDCL_NOTES1.SetValue(parameterID_MDCL_NOTES1.Value);
            ID_MDCL_NOTES2.SetValue(parameterID_MDCL_NOTES2.Value);
            ID_MDCL_NOTES3.SetValue(parameterID_MDCL_NOTES3.Value);
            ID_MDCL_NOTES4.SetValue(parameterID_MDCL_NOTES4.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MED_FRMR_MMBRAsync(int? ID_CASE_NMBR, DateTime? DT_BRTH, string NM_MMBR_LST, string NM_MMBR_FRST, string NM_MMBR_MDL, string NO_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BRTH",
                    Value = DT_BRTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_MDL",
                    Size = 20,
                    Value = NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MED_FRMR_MMBR] @ID_CASE_NMBR, @DT_BRTH, @NM_MMBR_LST, @NM_MMBR_FRST, @NM_MMBR_MDL, @NO_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEDICAL_EXPENSEAsync(int? ID_MMBR, decimal? AM_AGREED_MNTHLY, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_INSRNC_PAID_ALL, string FL_ONETIME, string FL_RPYMNT_AGRMNT, int? ID_VRFCTN_MDCL_EXPNS, string NO_ACCT_MDCL, decimal? NO_MNTHS_OWED, decimal? NO_MNTHS_RMNNG, decimal? ID_PRVDR_TYPE, string NM_PRVDR, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, string TX_MDCL_NOTES_DSCR1, string TX_MDCL_NOTES_DSCR2, string TX_MDCL_NOTES_DSCR3, string TX_MDCL_NOTES_DSCR4, string TX_VRFCTN_UNERND_INCM, OutputParameter<int?> IDMDCLEXPNS, OutputParameter<int?> IDPRVDRNAME, OutputParameter<short?> ID_ME_OTHR_PAYER, OutputParameter<int?> ID_MDCL_NOTES1, OutputParameter<int?> ID_MDCL_NOTES2, OutputParameter<int?> ID_MDCL_NOTES3, OutputParameter<int?> ID_MDCL_NOTES4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDMDCLEXPNS = new SqlParameter
            {
                ParameterName = "IDMDCLEXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDMDCLEXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterIDPRVDRNAME = new SqlParameter
            {
                ParameterName = "IDPRVDRNAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDPRVDRNAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_ME_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_ME_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ME_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_MDCL_NOTES1 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES1",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES2 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES3 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES3",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES3?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES4 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES4",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES4?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDMDCLEXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AGREED_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AGREED_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPYMNT_AGRMNT",
                    Size = 1,
                    Value = FL_RPYMNT_AGRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_OWED",
                    Precision = 3,
                    Value = NO_MNTHS_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIDPRVDRNAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_ME_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_MDCL_NOTES1,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR1",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES2,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR2",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES3,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR3",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES4,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR4",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEDICAL_EXPENSE] @IDMDCLEXPNS OUTPUT, @ID_MMBR, @AM_AGREED_MNTHLY, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @FL_RPYMNT_AGRMNT, @ID_VRFCTN_MDCL_EXPNS, @NO_ACCT_MDCL, @NO_MNTHS_OWED, @NO_MNTHS_RMNNG, @IDPRVDRNAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR, @ID_ME_OTHR_PAYER OUTPUT, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_MDCL_NOTES1 OUTPUT, @TX_MDCL_NOTES_DSCR1, @ID_MDCL_NOTES2 OUTPUT, @TX_MDCL_NOTES_DSCR2, @ID_MDCL_NOTES3 OUTPUT, @TX_MDCL_NOTES_DSCR3, @ID_MDCL_NOTES4 OUTPUT, @TX_MDCL_NOTES_DSCR4, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            IDMDCLEXPNS.SetValue(parameterIDMDCLEXPNS.Value);
            IDPRVDRNAME.SetValue(parameterIDPRVDRNAME.Value);
            ID_ME_OTHR_PAYER.SetValue(parameterID_ME_OTHR_PAYER.Value);
            ID_MDCL_NOTES1.SetValue(parameterID_MDCL_NOTES1.Value);
            ID_MDCL_NOTES2.SetValue(parameterID_MDCL_NOTES2.Value);
            ID_MDCL_NOTES3.SetValue(parameterID_MDCL_NOTES3.Value);
            ID_MDCL_NOTES4.SetValue(parameterID_MDCL_NOTES4.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEDICAL_EXPENSE_OTHER_PAYERAsync(int? ID_MMBR, int? ID_MDCL_EXPNS, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_PAY_MMBR, decimal? ID_FRQNCY_ME_OTHR_PAYER, int? ID_VRFCTN_ME_OTHR_PAYER, OutputParameter<short?> ID_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ME_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_ME_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ME_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ME_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_ME_OTHR_PAYER",
                    Precision = 2,
                    Value = ID_FRQNCY_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEDICAL_EXPENSE_OTHER_PAYER] @ID_ME_OTHR_PAYER OUTPUT, @ID_MMBR, @ID_MDCL_EXPNS, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_PAY_MMBR, @ID_FRQNCY_ME_OTHR_PAYER, @ID_VRFCTN_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            ID_ME_OTHR_PAYER.SetValue(parameterID_ME_OTHR_PAYER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEDICAL_NOTESAsync(int? ID_MDCL_EXPNS, decimal? ID_REF_MDCL_NOTE_TYPE, string TX_MDCL_NOTES_DSCR, OutputParameter<int?> ID_MDCL_NOTES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MDCL_NOTES = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MDCL_NOTES,
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_MDCL_NOTE_TYPE",
                    Precision = 2,
                    Value = ID_REF_MDCL_NOTE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEDICAL_NOTES] @ID_MDCL_NOTES OUTPUT, @ID_MDCL_EXPNS, @ID_REF_MDCL_NOTE_TYPE, @TX_MDCL_NOTES_DSCR", sqlParameters, cancellationToken);

            ID_MDCL_NOTES.SetValue(parameterID_MDCL_NOTES.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEDL_EXP_APPLNCAsync(int? ID_MMBR, decimal? AM_AGREED_MNTHLY, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_INSRNC_PAID_ALL, string FL_ONETIME, string FL_RPYMNT_AGRMNT, int? ID_VRFCTN_MDCL_EXPNS, string NO_ACCT_MDCL, decimal? NO_MNTHS_OWED, decimal? NO_MNTHS_RMNNG, decimal? ID_PRVDR_TYPE, string NM_PRVDR, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, string TX_MDCL_NOTES_DSCR1, string TX_MDCL_NOTES_DSCR2, string TX_MDCL_NOTES_DSCR3, string TX_MDCL_NOTES_DSCR4, string TX_MDCTN_APPLNC_DSCR, string TX_VRFCTN_UNERND_INCM, OutputParameter<int?> IDMDCLEXPNS, OutputParameter<int?> IDPRVDRNAME, OutputParameter<short?> ID_ME_OTHR_PAYER, OutputParameter<int?> ID_MDCL_NOTES1, OutputParameter<int?> ID_MDCL_NOTES2, OutputParameter<int?> ID_MDCL_NOTES3, OutputParameter<int?> ID_MDCL_NOTES4, OutputParameter<int?> IDMDCTNAPPLNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDMDCLEXPNS = new SqlParameter
            {
                ParameterName = "IDMDCLEXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDMDCLEXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterIDPRVDRNAME = new SqlParameter
            {
                ParameterName = "IDPRVDRNAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDPRVDRNAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_ME_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_ME_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ME_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_MDCL_NOTES1 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES1",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES2 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES3 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES3",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES3?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES4 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES4",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES4?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterIDMDCTNAPPLNC = new SqlParameter
            {
                ParameterName = "IDMDCTNAPPLNC",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDMDCTNAPPLNC?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDMDCLEXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AGREED_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AGREED_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPYMNT_AGRMNT",
                    Size = 1,
                    Value = FL_RPYMNT_AGRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_OWED",
                    Precision = 3,
                    Value = NO_MNTHS_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIDPRVDRNAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_ME_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_MDCL_NOTES1,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR1",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES2,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR2",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES3,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR3",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES4,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR4",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MDCTN_APPLNC_DSCR",
                    Size = 100,
                    Value = TX_MDCTN_APPLNC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterIDMDCTNAPPLNC,
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEDL_EXP_APPLNC] @IDMDCLEXPNS OUTPUT, @ID_MMBR, @AM_AGREED_MNTHLY, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @FL_RPYMNT_AGRMNT, @ID_VRFCTN_MDCL_EXPNS, @NO_ACCT_MDCL, @NO_MNTHS_OWED, @NO_MNTHS_RMNNG, @IDPRVDRNAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR, @ID_ME_OTHR_PAYER OUTPUT, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_MDCL_NOTES1 OUTPUT, @TX_MDCL_NOTES_DSCR1, @ID_MDCL_NOTES2 OUTPUT, @TX_MDCL_NOTES_DSCR2, @ID_MDCL_NOTES3 OUTPUT, @TX_MDCL_NOTES_DSCR3, @ID_MDCL_NOTES4 OUTPUT, @TX_MDCL_NOTES_DSCR4, @TX_MDCTN_APPLNC_DSCR, @IDMDCTNAPPLNC OUTPUT, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            IDMDCLEXPNS.SetValue(parameterIDMDCLEXPNS.Value);
            IDPRVDRNAME.SetValue(parameterIDPRVDRNAME.Value);
            ID_ME_OTHR_PAYER.SetValue(parameterID_ME_OTHR_PAYER.Value);
            ID_MDCL_NOTES1.SetValue(parameterID_MDCL_NOTES1.Value);
            ID_MDCL_NOTES2.SetValue(parameterID_MDCL_NOTES2.Value);
            ID_MDCL_NOTES3.SetValue(parameterID_MDCL_NOTES3.Value);
            ID_MDCL_NOTES4.SetValue(parameterID_MDCL_NOTES4.Value);
            IDMDCTNAPPLNC.SetValue(parameterIDMDCTNAPPLNC.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEDL_EXP_ONGOINGAsync(decimal? AM_MNTHLY_ONGOING, DateTime? DT_TRNSCTN, decimal? NO_OF_MNTHS, OutputParameter<int?> ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MDCL_EXPNS = new SqlParameter
            {
                ParameterName = "ID_MDCL_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MDCL_EXPNS,
                new SqlParameter
                {
                    ParameterName = "AM_MNTHLY_ONGOING",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MNTHLY_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_TRNSCTN",
                    Value = DT_TRNSCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_OF_MNTHS",
                    Precision = 2,
                    Value = NO_OF_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEDL_EXP_ONGOING] @ID_MDCL_EXPNS OUTPUT, @AM_MNTHLY_ONGOING, @DT_TRNSCTN, @NO_OF_MNTHS", sqlParameters, cancellationToken);

            ID_MDCL_EXPNS.SetValue(parameterID_MDCL_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEDL_EXP_PRVDRAsync(decimal? ID_PRVDR_TYPE, string NM_PRVDR, OutputParameter<int?> ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_PRVDR_NAME = new SqlParameter
            {
                ParameterName = "ID_PRVDR_NAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_PRVDR_NAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_PRVDR_NAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEDL_EXP_PRVDR] @ID_PRVDR_NAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR", sqlParameters, cancellationToken);

            ID_PRVDR_NAME.SetValue(parameterID_PRVDR_NAME.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEDL_EXP_RXAsync(int? ID_MMBR, int? ID_PRVDR_NAME, string NO_ACCT_MDCL, string CD_MONTH, string FL_INSRNC_PAID_ALL, string FL_ONETIME, decimal? NO_MNTHS_RMNNG, decimal? AM_TTL_ONETIME_RX, string FL_ONETIME_USE, string FL_PAY_BILL_MNTHLY, string FL_AVG_ONETIME, OutputParameter<int?> ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MDCL_EXPNS = new SqlParameter
            {
                ParameterName = "ID_MDCL_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MDCL_EXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_ONETIME_RX",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_ONETIME_RX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME_USE",
                    Size = 1,
                    Value = FL_ONETIME_USE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_BILL_MNTHLY",
                    Size = 1,
                    Value = FL_PAY_BILL_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AVG_ONETIME",
                    Size = 1,
                    Value = FL_AVG_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEDL_EXP_RX] @ID_MDCL_EXPNS OUTPUT, @ID_MMBR, @ID_PRVDR_NAME, @NO_ACCT_MDCL, @CD_MONTH, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @NO_MNTHS_RMNNG, @AM_TTL_ONETIME_RX, @FL_ONETIME_USE, @FL_PAY_BILL_MNTHLY, @FL_AVG_ONETIME", sqlParameters, cancellationToken);

            ID_MDCL_EXPNS.SetValue(parameterID_MDCL_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEMBERAsync(int? ID_CASE_NMBR, short? ID_RACE_CODE, short? ID_REF_CERT_ELIG, short? ID_WORK_CODE, short? ID_REF_CERT_ELIG2, short? ID_WORK_CODE2, string CD_CASE_CRTD, decimal? CD_EDCTN_LVL, string CD_SEX, DateTime? DT_BRTH, string FL_ABAWD, string CD_CNVCTD_FLN, string FL_CTGRCLLY_ELGBL, string FL_CRRNT_FS_CRTFD, string FL_DHR_EMPL, string CD_DSQLFD_PRTCPNT, string FL_ELGBL_ALIEN, string CD_FLEEING_VLTR, string FL_FRMR_HH_MMBR, string CD_FRDLNT_MSRPRSNTTN, string FL_GIVE_FA_MONEY, string FL_GROUP_HOME, string FL_HOH, string FL_IN_SCHOOL, string FL_MGRNT_SSNL, string FL_NON_MMBR, string FL_NON_MMBR_RSDNT, string FL_PAYS_BILLS, string FL_PAYS_MEAL, string FL_PAYS_ROOM, string FL_PRNTL_GDNC, string FL_PRCHS_PRPRS, string CD_QLTY_SLLNG, string FL_RM, string CD_RSDNT_TRTMNT, string FL_SNCTN, string CD_STMPS_MISUSE, string FL_US_CTZN, string FL_WRK_RGSTRTN_EXMPT, string FL_WRKNG, int? ID_VRFCTN_ALIEN_STTS, int? ID_VRFCTN_EXPDT, string NO_SSN, string NO_CELLPHONE, string NM_MMBR_LST, string NM_MMBR_FRST, string NM_MMBR_MDL, string NM_MMBR_SFX, string CD_MMBR_ELIG, OutputParameter<int?> ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MMBR = new SqlParameter
            {
                ParameterName = "ID_MMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MMBR,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG2",
                    Value = ID_REF_CERT_ELIG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE2",
                    Value = ID_WORK_CODE2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CRTD",
                    Size = 1,
                    Value = CD_CASE_CRTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EDCTN_LVL",
                    Precision = 2,
                    Value = CD_EDCTN_LVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SEX",
                    Size = 1,
                    Value = CD_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BRTH",
                    Value = DT_BRTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ABAWD",
                    Size = 1,
                    Value = FL_ABAWD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNVCTD_FLN",
                    Size = 1,
                    Value = CD_CNVCTD_FLN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CTGRCLLY_ELGBL",
                    Size = 1,
                    Value = FL_CTGRCLLY_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CRRNT_FS_CRTFD",
                    Size = 1,
                    Value = FL_CRRNT_FS_CRTFD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DHR_EMPL",
                    Size = 1,
                    Value = FL_DHR_EMPL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DSQLFD_PRTCPNT",
                    Size = 1,
                    Value = CD_DSQLFD_PRTCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_ALIEN",
                    Size = 1,
                    Value = FL_ELGBL_ALIEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FLEEING_VLTR",
                    Size = 1,
                    Value = CD_FLEEING_VLTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FRMR_HH_MMBR",
                    Size = 1,
                    Value = FL_FRMR_HH_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FRDLNT_MSRPRSNTTN",
                    Size = 1,
                    Value = CD_FRDLNT_MSRPRSNTTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GIVE_FA_MONEY",
                    Size = 1,
                    Value = FL_GIVE_FA_MONEY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GROUP_HOME",
                    Size = 1,
                    Value = FL_GROUP_HOME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HOH",
                    Size = 1,
                    Value = FL_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_IN_SCHOOL",
                    Size = 1,
                    Value = FL_IN_SCHOOL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MGRNT_SSNL",
                    Size = 1,
                    Value = FL_MGRNT_SSNL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR_RSDNT",
                    Size = 1,
                    Value = FL_NON_MMBR_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_BILLS",
                    Size = 1,
                    Value = FL_PAYS_BILLS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_MEAL",
                    Size = 1,
                    Value = FL_PAYS_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_ROOM",
                    Size = 1,
                    Value = FL_PAYS_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRNTL_GDNC",
                    Size = 1,
                    Value = FL_PRNTL_GDNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRCHS_PRPRS",
                    Size = 1,
                    Value = FL_PRCHS_PRPRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_QLTY_SLLNG",
                    Size = 1,
                    Value = CD_QLTY_SLLNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RM",
                    Size = 1,
                    Value = FL_RM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSDNT_TRTMNT",
                    Size = 1,
                    Value = CD_RSDNT_TRTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SNCTN",
                    Size = 1,
                    Value = FL_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_STMPS_MISUSE",
                    Size = 1,
                    Value = CD_STMPS_MISUSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_US_CTZN",
                    Size = 1,
                    Value = FL_US_CTZN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRK_RGSTRTN_EXMPT",
                    Size = 1,
                    Value = FL_WRK_RGSTRTN_EXMPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRKNG",
                    Size = 1,
                    Value = FL_WRKNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ALIEN_STTS",
                    Value = ID_VRFCTN_ALIEN_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EXPDT",
                    Value = ID_VRFCTN_EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CELLPHONE",
                    Size = 10,
                    Value = NO_CELLPHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_MDL",
                    Size = 20,
                    Value = NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_SFX",
                    Size = 3,
                    Value = NM_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MMBR_ELIG",
                    Size = 1,
                    Value = CD_MMBR_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEMBER] @ID_MMBR OUTPUT, @ID_CASE_NMBR, @ID_RACE_CODE, @ID_REF_CERT_ELIG, @ID_WORK_CODE, @ID_REF_CERT_ELIG2, @ID_WORK_CODE2, @CD_CASE_CRTD, @CD_EDCTN_LVL, @CD_SEX, @DT_BRTH, @FL_ABAWD, @CD_CNVCTD_FLN, @FL_CTGRCLLY_ELGBL, @FL_CRRNT_FS_CRTFD, @FL_DHR_EMPL, @CD_DSQLFD_PRTCPNT, @FL_ELGBL_ALIEN, @CD_FLEEING_VLTR, @FL_FRMR_HH_MMBR, @CD_FRDLNT_MSRPRSNTTN, @FL_GIVE_FA_MONEY, @FL_GROUP_HOME, @FL_HOH, @FL_IN_SCHOOL, @FL_MGRNT_SSNL, @FL_NON_MMBR, @FL_NON_MMBR_RSDNT, @FL_PAYS_BILLS, @FL_PAYS_MEAL, @FL_PAYS_ROOM, @FL_PRNTL_GDNC, @FL_PRCHS_PRPRS, @CD_QLTY_SLLNG, @FL_RM, @CD_RSDNT_TRTMNT, @FL_SNCTN, @CD_STMPS_MISUSE, @FL_US_CTZN, @FL_WRK_RGSTRTN_EXMPT, @FL_WRKNG, @ID_VRFCTN_ALIEN_STTS, @ID_VRFCTN_EXPDT, @NO_SSN, @NO_CELLPHONE, @NM_MMBR_LST, @NM_MMBR_FRST, @NM_MMBR_MDL, @NM_MMBR_SFX, @CD_MMBR_ELIG", sqlParameters, cancellationToken);

            ID_MMBR.SetValue(parameterID_MMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEMBER_InitialAsync(int? ID_CASE_NMBR, short? ID_RACE_CODE, short? ID_REF_CERT_ELIG, short? ID_WORK_CODE, short? ID_REF_CERT_ELIG2, short? ID_WORK_CODE2, string CD_CASE_CRTD, string CD_SEX, DateTime? DT_BRTH, string FL_NON_MMBR, string NO_SSN, string NM_MMBR_LST, string NM_MMBR_FRST, string NM_MMBR_MDL, string NM_MMBR_SFX, string CD_MMBR_ELIG, string FL_HOH, string DPNDNT_NMBR, OutputParameter<int?> ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MMBR = new SqlParameter
            {
                ParameterName = "ID_MMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MMBR,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG2",
                    Value = ID_REF_CERT_ELIG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE2",
                    Value = ID_WORK_CODE2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CRTD",
                    Size = 1,
                    Value = CD_CASE_CRTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SEX",
                    Size = 1,
                    Value = CD_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BRTH",
                    Value = DT_BRTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_MDL",
                    Size = 20,
                    Value = NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_SFX",
                    Size = 3,
                    Value = NM_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MMBR_ELIG",
                    Size = 1,
                    Value = CD_MMBR_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HOH",
                    Size = 1,
                    Value = FL_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DPNDNT_NMBR",
                    Size = 2,
                    Value = DPNDNT_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEMBER_Initial] @ID_MMBR OUTPUT, @ID_CASE_NMBR, @ID_RACE_CODE, @ID_REF_CERT_ELIG, @ID_WORK_CODE, @ID_REF_CERT_ELIG2, @ID_WORK_CODE2, @CD_CASE_CRTD, @CD_SEX, @DT_BRTH, @FL_NON_MMBR, @NO_SSN, @NM_MMBR_LST, @NM_MMBR_FRST, @NM_MMBR_MDL, @NM_MMBR_SFX, @CD_MMBR_ELIG, @FL_HOH, @DPNDNT_NMBR", sqlParameters, cancellationToken);

            ID_MMBR.SetValue(parameterID_MMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MEMBER_TRNSFR_RSRCAsync(short? ID_RSRC_CODE, int? ID_MMBR, decimal? AM_TRNSFR_RSRC_RCVD, decimal? AM_VALUE, DateTime? DT_ACTN_TRNSFR_RSRC, string FL_EXCLD, string FL_TRNSFR_QLFY_FA, string TX_DSPSL_RSN, string CD_MONTH, OutputParameter<int?> ID_MMBR_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MMBR_RSRC = new SqlParameter
            {
                ParameterName = "ID_MMBR_RSRC",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MMBR_RSRC?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MMBR_RSRC,
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TRNSFR_RSRC_RCVD",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TRNSFR_RSRC_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_VALUE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_VALUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ACTN_TRNSFR_RSRC",
                    Value = DT_ACTN_TRNSFR_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXCLD",
                    Size = 1,
                    Value = FL_EXCLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TRNSFR_QLFY_FA",
                    Size = 1,
                    Value = FL_TRNSFR_QLFY_FA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DSPSL_RSN",
                    Value = TX_DSPSL_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MEMBER_TRNSFR_RSRC] @ID_MMBR_RSRC OUTPUT, @ID_RSRC_CODE, @ID_MMBR, @AM_TRNSFR_RSRC_RCVD, @AM_VALUE, @DT_ACTN_TRNSFR_RSRC, @FL_EXCLD, @FL_TRNSFR_QLFY_FA, @TX_DSPSL_RSN, @CD_MONTH", sqlParameters, cancellationToken);

            ID_MMBR_RSRC.SetValue(parameterID_MMBR_RSRC.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_MMBR_MED_UNEARNEDAsync(int? ID_MMBR, decimal? AM_UNERND_MNTHLY, int? ID_ME_OTHR_PAYER, OutputParameter<int?> ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_INCM = new SqlParameter
            {
                ParameterName = "ID_UNERND_INCM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_INCM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_INCM,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_MMBR_MED_UNEARNED] @ID_UNERND_INCM OUTPUT, @ID_MMBR, @AM_UNERND_MNTHLY, @ID_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            ID_UNERND_INCM.SetValue(parameterID_UNERND_INCM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_NC_MEDICAL_EXPENSEAsync(int? ID_MMBR, decimal? AM_AGREED_MNTHLY, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_INSRNC_PAID_ALL, string FL_ONETIME, string FL_RPYMNT_AGRMNT, int? ID_VRFCTN_MDCL_EXPNS, string NO_ACCT_MDCL, decimal? NO_MEALS_MNTHLY, decimal? NO_MNTHS_OWED, decimal? NO_MNTHS_RMNNG, decimal? ID_PRVDR_TYPE, string NM_PRVDR, short? ID_CNTY_STATE, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, string TX_MDCL_NOTES_DSCR1, string TX_MDCL_NOTES_DSCR2, string TX_MDCL_NOTES_DSCR3, string TX_MDCL_NOTES_DSCR4, string TX_VRFCTN_UNERND_INCM, OutputParameter<int?> IDMDCLEXPNS, OutputParameter<int?> IDPRVDRNAME, OutputParameter<int?> ID_ADDRSS, OutputParameter<short?> ID_ME_OTHR_PAYER, OutputParameter<int?> ID_MDCL_NOTES1, OutputParameter<int?> ID_MDCL_NOTES2, OutputParameter<int?> ID_MDCL_NOTES3, OutputParameter<int?> ID_MDCL_NOTES4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDMDCLEXPNS = new SqlParameter
            {
                ParameterName = "IDMDCLEXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDMDCLEXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterIDPRVDRNAME = new SqlParameter
            {
                ParameterName = "IDPRVDRNAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDPRVDRNAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_ADDRSS = new SqlParameter
            {
                ParameterName = "ID_ADDRSS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ADDRSS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_ME_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_ME_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ME_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_MDCL_NOTES1 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES1",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES2 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES3 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES3",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES3?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_MDCL_NOTES4 = new SqlParameter
            {
                ParameterName = "ID_MDCL_NOTES4",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_NOTES4?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDMDCLEXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AGREED_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AGREED_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPYMNT_AGRMNT",
                    Size = 1,
                    Value = FL_RPYMNT_AGRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS_MNTHLY",
                    Precision = 2,
                    Value = NO_MEALS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_OWED",
                    Precision = 3,
                    Value = NO_MNTHS_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterIDPRVDRNAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_ADDRSS,
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_ME_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_MDCL_NOTES1,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR1",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES2,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR2",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES3,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR3",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_MDCL_NOTES4,
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR4",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_NC_MEDICAL_EXPENSE] @IDMDCLEXPNS OUTPUT, @ID_MMBR, @AM_AGREED_MNTHLY, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @FL_RPYMNT_AGRMNT, @ID_VRFCTN_MDCL_EXPNS, @NO_ACCT_MDCL, @NO_MEALS_MNTHLY, @NO_MNTHS_OWED, @NO_MNTHS_RMNNG, @IDPRVDRNAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR, @ID_ADDRSS OUTPUT, @ID_CNTY_STATE, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4, @ID_ME_OTHR_PAYER OUTPUT, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_MDCL_NOTES1 OUTPUT, @TX_MDCL_NOTES_DSCR1, @ID_MDCL_NOTES2 OUTPUT, @TX_MDCL_NOTES_DSCR2, @ID_MDCL_NOTES3 OUTPUT, @TX_MDCL_NOTES_DSCR3, @ID_MDCL_NOTES4 OUTPUT, @TX_MDCL_NOTES_DSCR4, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            IDMDCLEXPNS.SetValue(parameterIDMDCLEXPNS.Value);
            IDPRVDRNAME.SetValue(parameterIDPRVDRNAME.Value);
            ID_ADDRSS.SetValue(parameterID_ADDRSS.Value);
            ID_ME_OTHR_PAYER.SetValue(parameterID_ME_OTHR_PAYER.Value);
            ID_MDCL_NOTES1.SetValue(parameterID_MDCL_NOTES1.Value);
            ID_MDCL_NOTES2.SetValue(parameterID_MDCL_NOTES2.Value);
            ID_MDCL_NOTES3.SetValue(parameterID_MDCL_NOTES3.Value);
            ID_MDCL_NOTES4.SetValue(parameterID_MDCL_NOTES4.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Non_FRMR_MMBRAsync(int? ID_CASE_NMBR, string NM_MMBR_LST, string NM_MMBR_FRST, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Non_FRMR_MMBR] @ID_CASE_NMBR, @NM_MMBR_LST, @NM_MMBR_FRST", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_OACIS_CASE_BEING_WORKEDAsync(int? NO_CASE, string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_OACIS_CASE_BEING_WORKED] @NO_CASE, @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_OACIS_ERRORAsync(string CD_REF_MODULE, string ID_USER, DateTime? DT_ERROR, string TX_ERROR, string TX_TARGET, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_REF_MODULE",
                    Size = 5,
                    Value = CD_REF_MODULE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ERROR",
                    Value = DT_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_ERROR",
                    Size = -1,
                    Value = TX_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TX_TARGET",
                    Size = 50,
                    Value = TX_TARGET ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_OACIS_ERROR] @CD_REF_MODULE, @ID_USER, @DT_ERROR, @TX_ERROR, @TX_TARGET", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_PIV_COURT_ORDERAsync(int? ID_DPNDNT, int? ID_CRT_ORDRD_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_PIV_COURT_ORDER] @ID_DPNDNT, @ID_CRT_ORDRD_AMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_PIV_CS_PAYER_RCPNTResult>> Ins_PIV_CS_PAYER_RCPNTAsync(int? ID_PAYER, int? ID_RCPNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAYER",
                    Value = ID_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RCPNT",
                    Value = ID_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_PIV_CS_PAYER_RCPNTResult>("EXEC @returnValue = [dbo].[Ins_PIV_CS_PAYER_RCPNT] @ID_PAYER, @ID_RCPNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_PIV_MMBR_INSRNCAsync(int? ID_MMBR, int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_PIV_MMBR_INSRNC] @ID_MMBR, @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_PIV_MMBR_RLTNAsync(decimal? ID_RLTN, int? ID_MMBR1, int? ID_MMBR2, string FL_NRST_RLTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NRST_RLTN",
                    Size = 1,
                    Value = FL_NRST_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_PIV_MMBR_RLTN] @ID_RLTN, @ID_MMBR1, @ID_MMBR2, @FL_NRST_RLTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_PIV_PRVDR_DCResult>> Ins_PIV_PRVDR_DCAsync(int? ID_PRVDR_NAME, int? ID_DPNDNT_CARE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_PIV_PRVDR_DCResult>("EXEC @returnValue = [dbo].[Ins_PIV_PRVDR_DC] @ID_PRVDR_NAME, @ID_DPNDNT_CARE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_PIV_PRVDR_INSRNCResult>> Ins_PIV_PRVDR_INSRNCAsync(int? ID_PRVDR_NAME, int? ID_INSRNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_PIV_PRVDR_INSRNCResult>("EXEC @returnValue = [dbo].[Ins_PIV_PRVDR_INSRNC] @ID_PRVDR_NAME, @ID_INSRNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_PIV_RMED_MEDEXResult>> Ins_PIV_RMED_MEDEXAsync(int? ID_MDCTN, int? ID_MDCL_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCTN",
                    Value = ID_MDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_PIV_RMED_MEDEXResult>("EXEC @returnValue = [dbo].[Ins_PIV_RMED_MEDEX] @ID_MDCTN, @ID_MDCL_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_PIV_RPRVDR_RAPPLIANCE_TYPEResult>> Ins_PIV_RPRVDR_RAPPLIANCE_TYPEAsync(int? ID_PRVDR_NAME, short? ID_APPLNC_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_APPLNC_TYPE",
                    Value = ID_APPLNC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_PIV_RPRVDR_RAPPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[Ins_PIV_RPRVDR_RAPPLIANCE_TYPE] @ID_PRVDR_NAME, @ID_APPLNC_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> INS_PROVIDER_INFOAsync(int? ID_PRVDR_TYPE, string NM_PRVDR, string NO_PRVDR_PHONE, int? ID_ADDRSS, short? ID_CNTY_STATE, int? ID_MMBR, decimal? ID_REF_ADDRSS_TYPE, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, OutputParameter<int?> ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_PRVDR_NAME = new SqlParameter
            {
                ParameterName = "ID_PRVDR_NAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_PRVDR_NAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_PRVDR_NAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_PRVDR_PHONE",
                    Size = 10,
                    Value = NO_PRVDR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[INS_PROVIDER_INFO] @ID_PRVDR_NAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR, @NO_PRVDR_PHONE, @ID_ADDRSS, @ID_CNTY_STATE, @ID_MMBR, @ID_REF_ADDRSS_TYPE, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP", sqlParameters, cancellationToken);

            ID_PRVDR_NAME.SetValue(parameterID_PRVDR_NAME.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_RB_MEALResult>> Ins_RB_MEALAsync(int? ID_MMBR, short? ID_REF_RB_MEAL, short? ID_RB_MEAL_OTHER, decimal? AM_DAILY_MEAL_PAY, decimal? AM_MEAL_COST, decimal? AM_MEAL_MNTHLY_PAY, decimal? AM_ROOM_PAY, decimal? ID_FRQNCY_MEAL_COST, decimal? ID_FRQNCY_MEAL_PAY, decimal? ID_FRQNCY_ROOM_PAY, decimal? NO_BRDR_HH, decimal? NO_MEALS_DAILY, OutputParameter<int?> ID_RB_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RB_MEAL = new SqlParameter
            {
                ParameterName = "ID_RB_MEAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RB_MEAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RB_MEAL,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_RB_MEAL",
                    Value = ID_REF_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL_OTHER",
                    Value = ID_RB_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DAILY_MEAL_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DAILY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_COST",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MNTHLY_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MNTHLY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ROOM_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_COST",
                    Precision = 1,
                    Value = ID_FRQNCY_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_PAY",
                    Precision = 1,
                    Value = ID_FRQNCY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_ROOM_PAY",
                    Precision = 1,
                    Value = ID_FRQNCY_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_BRDR_HH",
                    Precision = 2,
                    Value = NO_BRDR_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS_DAILY",
                    Precision = 1,
                    Value = NO_MEALS_DAILY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_RB_MEALResult>("EXEC @returnValue = [dbo].[Ins_RB_MEAL] @ID_RB_MEAL OUTPUT, @ID_MMBR, @ID_REF_RB_MEAL, @ID_RB_MEAL_OTHER, @AM_DAILY_MEAL_PAY, @AM_MEAL_COST, @AM_MEAL_MNTHLY_PAY, @AM_ROOM_PAY, @ID_FRQNCY_MEAL_COST, @ID_FRQNCY_MEAL_PAY, @ID_FRQNCY_ROOM_PAY, @NO_BRDR_HH, @NO_MEALS_DAILY", sqlParameters, cancellationToken);

            ID_RB_MEAL.SetValue(parameterID_RB_MEAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_RB_MEAL_OTHERResult>> Ins_RB_MEAL_OTHERAsync(int? ID_CASE_NMBR, string NM_RBML_LST, string NM_RBML_FRST, string NM_RBML_MDL, string NM_RBML_SFX, OutputParameter<short?> ID_RB_MEAL_OTHER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RB_MEAL_OTHER = new SqlParameter
            {
                ParameterName = "ID_RB_MEAL_OTHER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RB_MEAL_OTHER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RB_MEAL_OTHER,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_LST",
                    Size = 20,
                    Value = NM_RBML_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_FRST",
                    Size = 20,
                    Value = NM_RBML_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_MDL",
                    Size = 20,
                    Value = NM_RBML_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_SFX",
                    Size = 3,
                    Value = NM_RBML_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_RB_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[Ins_RB_MEAL_OTHER] @ID_RB_MEAL_OTHER OUTPUT, @ID_CASE_NMBR, @NM_RBML_LST, @NM_RBML_FRST, @NM_RBML_MDL, @NM_RBML_SFX", sqlParameters, cancellationToken);

            ID_RB_MEAL_OTHER.SetValue(parameterID_RB_MEAL_OTHER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_RBMEALAsync(int? ID_MMBR, decimal? AM_MEAL_COST_HOH, decimal? AM_MEAL_MMBR_PAY, decimal? ID_FRQNCY_MEAL_COST, decimal? ID_FRQNCY_MEAL_PAY, int? ID_VRFCTN_MEAL, decimal? NO_MEALS, OutputParameter<int?> ID_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MEAL = new SqlParameter
            {
                ParameterName = "ID_MEAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MEAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MEAL,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_COST_HOH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_COST_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MMBR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MMBR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_COST",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_PAY",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MEAL",
                    Value = ID_VRFCTN_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS",
                    Precision = 2,
                    Value = NO_MEALS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_RBMEAL] @ID_MEAL OUTPUT, @ID_MMBR, @AM_MEAL_COST_HOH, @AM_MEAL_MMBR_PAY, @ID_FRQNCY_MEAL_COST, @ID_FRQNCY_MEAL_PAY, @ID_VRFCTN_MEAL, @NO_MEALS", sqlParameters, cancellationToken);

            ID_MEAL.SetValue(parameterID_MEAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_ADDRESS_TYPEAsync(string CD_REF_ADDRSS_TYPE, OutputParameter<decimal?> ID_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_ADDRSS_TYPE = new SqlParameter
            {
                ParameterName = "ID_REF_ADDRSS_TYPE",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_ADDRSS_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_ADDRSS_TYPE,
                new SqlParameter
                {
                    ParameterName = "CD_REF_ADDRSS_TYPE",
                    Size = 15,
                    Value = CD_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_ADDRESS_TYPE] @ID_REF_ADDRSS_TYPE OUTPUT, @CD_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            ID_REF_ADDRSS_TYPE.SetValue(parameterID_REF_ADDRSS_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_ALLAsync(string CD_WORK, string TX_WORK_DSCR, string CD_WAIVE_ADVRS_ACTN_RSN, string TX_ADVRS_ACTN_DSCR, decimal? CD_RACE, string TX_RACE_DSCR, string CD_INSTRCTN_TYPE, string TX_INSTRCTN_TYPE, string CD_CERT_ELIG, string TX_CERT_ELIG_DSCR, string CD_RJCTN_CLSR, string CD_DEN_TER, string TX_RJCTN_DNL_TERM, string CD_RSTRTN_RSN, string TX_RSTRTN_RSN_DSCR, string CD_VRFCTN_DETAIL_DSCR, string CD_REF_NTC_TYPE, string TX_REF_NTC_DSCR, string TX_EMAIL, string INPUT, OutputParameter<short?> ID_WORK_CODE, OutputParameter<short?> ID_REF_WAIVE_ADVRS_ACTN, OutputParameter<short?> ID_RACE_CODE, OutputParameter<short?> ID_INSTRCTN, OutputParameter<decimal?> ID_REF_CERT_ELIG, OutputParameter<decimal?> ID_RSTRTN_RSN, OutputParameter<short?> ID_VRFCTN_DETAIL, OutputParameter<short?> ID_REF_NTC_TYPE, OutputParameter<short?> ID_CNTY_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_WORK_CODE = new SqlParameter
            {
                ParameterName = "ID_WORK_CODE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_WORK_CODE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_REF_WAIVE_ADVRS_ACTN = new SqlParameter
            {
                ParameterName = "ID_REF_WAIVE_ADVRS_ACTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_WAIVE_ADVRS_ACTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_RACE_CODE = new SqlParameter
            {
                ParameterName = "ID_RACE_CODE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RACE_CODE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_INSTRCTN = new SqlParameter
            {
                ParameterName = "ID_INSTRCTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_INSTRCTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_REF_CERT_ELIG = new SqlParameter
            {
                ParameterName = "ID_REF_CERT_ELIG",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_CERT_ELIG?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterID_RSTRTN_RSN = new SqlParameter
            {
                ParameterName = "ID_RSTRTN_RSN",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RSTRTN_RSN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterID_VRFCTN_DETAIL = new SqlParameter
            {
                ParameterName = "ID_VRFCTN_DETAIL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_VRFCTN_DETAIL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_REF_NTC_TYPE = new SqlParameter
            {
                ParameterName = "ID_REF_NTC_TYPE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_NTC_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterID_CNTY_STATE = new SqlParameter
            {
                ParameterName = "ID_CNTY_STATE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CNTY_STATE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_WORK_CODE,
                new SqlParameter
                {
                    ParameterName = "CD_WORK",
                    Size = 1,
                    Value = CD_WORK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WORK_DSCR",
                    Value = TX_WORK_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_REF_WAIVE_ADVRS_ACTN,
                new SqlParameter
                {
                    ParameterName = "CD_WAIVE_ADVRS_ACTN_RSN",
                    Size = 2,
                    Value = CD_WAIVE_ADVRS_ACTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_ADVRS_ACTN_DSCR",
                    Value = TX_ADVRS_ACTN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_RACE_CODE,
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Precision = 2,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RACE_DSCR",
                    Value = TX_RACE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_INSTRCTN,
                new SqlParameter
                {
                    ParameterName = "CD_INSTRCTN_TYPE",
                    Size = 7,
                    Value = CD_INSTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_INSTRCTN_TYPE",
                    Value = TX_INSTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_REF_CERT_ELIG,
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CERT_ELIG_DSCR",
                    Value = TX_CERT_ELIG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DEN_TER",
                    Size = 2,
                    Value = CD_DEN_TER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RJCTN_DNL_TERM",
                    Value = TX_RJCTN_DNL_TERM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_RSTRTN_RSN,
                new SqlParameter
                {
                    ParameterName = "CD_RSTRTN_RSN",
                    Size = 2,
                    Value = CD_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RSTRTN_RSN_DSCR",
                    Value = TX_RSTRTN_RSN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_VRFCTN_DETAIL,
                new SqlParameter
                {
                    ParameterName = "CD_VRFCTN_DETAIL_DSCR",
                    Size = 30,
                    Value = CD_VRFCTN_DETAIL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterID_REF_NTC_TYPE,
                new SqlParameter
                {
                    ParameterName = "CD_REF_NTC_TYPE",
                    Size = 2,
                    Value = CD_REF_NTC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_REF_NTC_DSCR",
                    Value = TX_REF_NTC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_CNTY_STATE,
                new SqlParameter
                {
                    ParameterName = "TX_EMAIL",
                    Size = 50,
                    Value = TX_EMAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "INPUT",
                    Size = 3,
                    Value = INPUT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_ALL] @ID_WORK_CODE OUTPUT, @CD_WORK, @TX_WORK_DSCR, @ID_REF_WAIVE_ADVRS_ACTN OUTPUT, @CD_WAIVE_ADVRS_ACTN_RSN, @TX_ADVRS_ACTN_DSCR, @ID_RACE_CODE OUTPUT, @CD_RACE, @TX_RACE_DSCR, @ID_INSTRCTN OUTPUT, @CD_INSTRCTN_TYPE, @TX_INSTRCTN_TYPE, @ID_REF_CERT_ELIG OUTPUT, @CD_CERT_ELIG, @TX_CERT_ELIG_DSCR, @CD_RJCTN_CLSR, @CD_DEN_TER, @TX_RJCTN_DNL_TERM, @ID_RSTRTN_RSN OUTPUT, @CD_RSTRTN_RSN, @TX_RSTRTN_RSN_DSCR, @ID_VRFCTN_DETAIL OUTPUT, @CD_VRFCTN_DETAIL_DSCR, @ID_REF_NTC_TYPE OUTPUT, @CD_REF_NTC_TYPE, @TX_REF_NTC_DSCR, @ID_CNTY_STATE OUTPUT, @TX_EMAIL, @INPUT", sqlParameters, cancellationToken);

            ID_WORK_CODE.SetValue(parameterID_WORK_CODE.Value);
            ID_REF_WAIVE_ADVRS_ACTN.SetValue(parameterID_REF_WAIVE_ADVRS_ACTN.Value);
            ID_RACE_CODE.SetValue(parameterID_RACE_CODE.Value);
            ID_INSTRCTN.SetValue(parameterID_INSTRCTN.Value);
            ID_REF_CERT_ELIG.SetValue(parameterID_REF_CERT_ELIG.Value);
            ID_RSTRTN_RSN.SetValue(parameterID_RSTRTN_RSN.Value);
            ID_VRFCTN_DETAIL.SetValue(parameterID_VRFCTN_DETAIL.Value);
            ID_REF_NTC_TYPE.SetValue(parameterID_REF_NTC_TYPE.Value);
            ID_CNTY_STATE.SetValue(parameterID_CNTY_STATE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_APPLIANCE_TYPEResult>> Ins_REF_APPLIANCE_TYPEAsync(string CD_APPLNC_DSCR, OutputParameter<short?> ID_APPLNC_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_APPLNC_TYPE = new SqlParameter
            {
                ParameterName = "ID_APPLNC_TYPE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_APPLNC_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_APPLNC_TYPE,
                new SqlParameter
                {
                    ParameterName = "CD_APPLNC_DSCR",
                    Size = 30,
                    Value = CD_APPLNC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_APPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[Ins_REF_APPLIANCE_TYPE] @ID_APPLNC_TYPE OUTPUT, @CD_APPLNC_DSCR", sqlParameters, cancellationToken);

            ID_APPLNC_TYPE.SetValue(parameterID_APPLNC_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_CASE_CTGRYAsync(string CD_CASE_CTGRY_DSCR, OutputParameter<short?> ID_CASE_CTGRY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CASE_CTGRY = new SqlParameter
            {
                ParameterName = "ID_CASE_CTGRY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CASE_CTGRY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CASE_CTGRY,
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CTGRY_DSCR",
                    Size = 15,
                    Value = CD_CASE_CTGRY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_CASE_CTGRY] @ID_CASE_CTGRY OUTPUT, @CD_CASE_CTGRY_DSCR", sqlParameters, cancellationToken);

            ID_CASE_CTGRY.SetValue(parameterID_CASE_CTGRY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_CASE_STATUSResult>> Ins_REF_CASE_STATUSAsync(string CD_CASE_STTS_DSCR, OutputParameter<decimal?> ID_REF_CASE_STATUS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_CASE_STATUS = new SqlParameter
            {
                ParameterName = "ID_REF_CASE_STATUS",
                Precision = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_CASE_STATUS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_CASE_STATUS,
                new SqlParameter
                {
                    ParameterName = "CD_CASE_STTS_DSCR",
                    Size = 7,
                    Value = CD_CASE_STTS_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_CASE_STATUSResult>("EXEC @returnValue = [dbo].[Ins_REF_CASE_STATUS] @ID_REF_CASE_STATUS OUTPUT, @CD_CASE_STTS_DSCR", sqlParameters, cancellationToken);

            ID_REF_CASE_STATUS.SetValue(parameterID_REF_CASE_STATUS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_CASE_STATUS_TYPEAsync(string CD_CASE_STTS_DSCR, OutputParameter<decimal?> ID_REF_CASE_STATUS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_CASE_STATUS_TYPE = new SqlParameter
            {
                ParameterName = "ID_REF_CASE_STATUS_TYPE",
                Precision = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_CASE_STATUS_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_CASE_STATUS_TYPE,
                new SqlParameter
                {
                    ParameterName = "CD_CASE_STTS_DSCR",
                    Size = 7,
                    Value = CD_CASE_STTS_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_CASE_STATUS_TYPE] @ID_REF_CASE_STATUS_TYPE OUTPUT, @CD_CASE_STTS_DSCR", sqlParameters, cancellationToken);

            ID_REF_CASE_STATUS_TYPE.SetValue(parameterID_REF_CASE_STATUS_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_CASE_SUB_CTGRYResult>> Ins_REF_CASE_SUB_CTGRYAsync(short? ID_CASE_CTGRY, string CD_CASE_SUB_CTGRY_DSCR, OutputParameter<short?> ID_CASE_SUB_CTGRY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CASE_SUB_CTGRY = new SqlParameter
            {
                ParameterName = "ID_CASE_SUB_CTGRY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CASE_SUB_CTGRY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CASE_SUB_CTGRY,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_SUB_CTGRY_DSCR",
                    Size = 20,
                    Value = CD_CASE_SUB_CTGRY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_CASE_SUB_CTGRYResult>("EXEC @returnValue = [dbo].[Ins_REF_CASE_SUB_CTGRY] @ID_CASE_SUB_CTGRY OUTPUT, @ID_CASE_CTGRY, @CD_CASE_SUB_CTGRY_DSCR", sqlParameters, cancellationToken);

            ID_CASE_SUB_CTGRY.SetValue(parameterID_CASE_SUB_CTGRY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_CERT_ELIGAsync(string CD_CERT_ELIG, string TX_CERT_ELIG_DSCR, OutputParameter<decimal?> ID_REF_CERT_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_CERT_ELIG = new SqlParameter
            {
                ParameterName = "ID_REF_CERT_ELIG",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_CERT_ELIG?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_CERT_ELIG,
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CERT_ELIG_DSCR",
                    Size = 15,
                    Value = TX_CERT_ELIG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_CERT_ELIG] @ID_REF_CERT_ELIG OUTPUT, @CD_CERT_ELIG, @TX_CERT_ELIG_DSCR", sqlParameters, cancellationToken);

            ID_REF_CERT_ELIG.SetValue(parameterID_REF_CERT_ELIG.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_DENIAL_CODESResult>> Ins_REF_DENIAL_CODESAsync(string CD_DENIAL, string TX_DENIAL_DSCR, OutputParameter<decimal?> ID_DENIAL_CODES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DENIAL_CODES = new SqlParameter
            {
                ParameterName = "ID_DENIAL_CODES",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DENIAL_CODES?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DENIAL_CODES,
                new SqlParameter
                {
                    ParameterName = "CD_DENIAL",
                    Size = 2,
                    Value = CD_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DENIAL_DSCR",
                    Value = TX_DENIAL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_DENIAL_CODESResult>("EXEC @returnValue = [dbo].[Ins_REF_DENIAL_CODES] @ID_DENIAL_CODES OUTPUT, @CD_DENIAL, @TX_DENIAL_DSCR", sqlParameters, cancellationToken);

            ID_DENIAL_CODES.SetValue(parameterID_DENIAL_CODES.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_DEPENDENT_CARE_LIMITAsync(decimal? AM_DPNDNT_LIMIT, string CD_DPNDNT_CARE_DSCR, OutputParameter<decimal?> ID_DPNDNT_CARE_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DPNDNT_CARE_LIMIT = new SqlParameter
            {
                ParameterName = "ID_DPNDNT_CARE_LIMIT",
                Precision = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DPNDNT_CARE_LIMIT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_DPNDNT_CARE_LIMIT,
                new SqlParameter
                {
                    ParameterName = "AM_DPNDNT_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DPNDNT_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DPNDNT_CARE_DSCR",
                    Size = 30,
                    Value = CD_DPNDNT_CARE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_DEPENDENT_CARE_LIMIT] @ID_DPNDNT_CARE_LIMIT OUTPUT, @AM_DPNDNT_LIMIT, @CD_DPNDNT_CARE_DSCR", sqlParameters, cancellationToken);

            ID_DPNDNT_CARE_LIMIT.SetValue(parameterID_DPNDNT_CARE_LIMIT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_DHR_EMPLOYEEAsync(string ID_SSN_DHREMP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_DHREMP",
                    Size = 9,
                    Value = ID_SSN_DHREMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_DHR_EMPLOYEE] @ID_SSN_DHREMP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_EBT_CHCKAsync(string ID_SSN_EBT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_EBT",
                    Size = 9,
                    Value = ID_SSN_EBT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_EBT_CHCK] @ID_SSN_EBT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_FA_STATUSResult>> Ins_REF_FA_STATUSAsync(string CD_WHEN_CASE_CLSD, OutputParameter<short?> ID_REF_FA_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_FA_STTS = new SqlParameter
            {
                ParameterName = "ID_REF_FA_STTS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_FA_STTS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_FA_STTS,
                new SqlParameter
                {
                    ParameterName = "CD_WHEN_CASE_CLSD",
                    Size = 15,
                    Value = CD_WHEN_CASE_CLSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_FA_STATUSResult>("EXEC @returnValue = [dbo].[Ins_REF_FA_STATUS] @ID_REF_FA_STTS OUTPUT, @CD_WHEN_CASE_CLSD", sqlParameters, cancellationToken);

            ID_REF_FA_STTS.SetValue(parameterID_REF_FA_STTS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_FREQUENCYAsync(string CD_FRQNCY_DSCR, decimal? NO_FRQNCY_FACTOR, OutputParameter<decimal?> ID_FRQNCY_REF, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_FRQNCY_REF = new SqlParameter
            {
                ParameterName = "ID_FRQNCY_REF",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_FRQNCY_REF?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_FRQNCY_REF,
                new SqlParameter
                {
                    ParameterName = "CD_FRQNCY_DSCR",
                    Size = 15,
                    Value = CD_FRQNCY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_FRQNCY_FACTOR",
                    Precision = 7,
                    Scale = 5,
                    Value = NO_FRQNCY_FACTOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_FREQUENCY] @ID_FRQNCY_REF OUTPUT, @CD_FRQNCY_DSCR, @NO_FRQNCY_FACTOR", sqlParameters, cancellationToken);

            ID_FRQNCY_REF.SetValue(parameterID_FRQNCY_REF.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_HLDYAsync(DateTime? DT_HLDY, string TX_HLDY_DSCR, OutputParameter<int?> ID_HLDY_DATES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_HLDY_DATES = new SqlParameter
            {
                ParameterName = "ID_HLDY_DATES",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_HLDY_DATES?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_HLDY_DATES,
                new SqlParameter
                {
                    ParameterName = "DT_HLDY",
                    Value = DT_HLDY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_HLDY_DSCR",
                    Value = TX_HLDY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_HLDY] @ID_HLDY_DATES OUTPUT, @DT_HLDY, @TX_HLDY_DSCR", sqlParameters, cancellationToken);

            ID_HLDY_DATES.SetValue(parameterID_HLDY_DATES.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_IEVS_TRAKAsync(string ID_SSN_IEVS, string CD_SSN_VRFY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_IEVS",
                    Size = 9,
                    Value = ID_SSN_IEVS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SSN_VRFY",
                    Size = 1,
                    Value = CD_SSN_VRFY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_IEVS_TRAK] @ID_SSN_IEVS, @CD_SSN_VRFY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_INACTIVE_SCIIIAsync(string ID_SSN, decimal? CD_CHCK_DIGIT, decimal? CD_CNTY_SCIII, decimal? NO_INACTV_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN",
                    Size = 9,
                    Value = ID_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CHCK_DIGIT",
                    Precision = 1,
                    Value = CD_CHCK_DIGIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_SCIII",
                    Precision = 3,
                    Value = CD_CNTY_SCIII ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_INACTV_CASE",
                    Precision = 9,
                    Value = NO_INACTV_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_INACTIVE_SCIII] @ID_SSN, @CD_CHCK_DIGIT, @CD_CNTY_SCIII, @NO_INACTV_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_INCOME_LIMITAsync(decimal? AM_INCM_LIMIT, decimal? NO_HH_SIZE, OutputParameter<decimal?> ID_REF_INCM_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_INCM_LIMIT = new SqlParameter
            {
                ParameterName = "ID_REF_INCM_LIMIT",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_INCM_LIMIT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_INCM_LIMIT,
                new SqlParameter
                {
                    ParameterName = "AM_INCM_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_SIZE",
                    Precision = 2,
                    Value = NO_HH_SIZE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_INCOME_LIMIT] @ID_REF_INCM_LIMIT OUTPUT, @AM_INCM_LIMIT, @NO_HH_SIZE", sqlParameters, cancellationToken);

            ID_REF_INCM_LIMIT.SetValue(parameterID_REF_INCM_LIMIT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_INSTRUCTIONSAsync(string CD_INTRCTN_TYPE, string TX_INSTRCTN_TYPE, OutputParameter<short?> ID_INSTRCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_INSTRCTN = new SqlParameter
            {
                ParameterName = "ID_INSTRCTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_INSTRCTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_INSTRCTN,
                new SqlParameter
                {
                    ParameterName = "CD_INTRCTN_TYPE",
                    Size = 7,
                    Value = CD_INTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_INSTRCTN_TYPE",
                    Value = TX_INSTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_INSTRUCTIONS] @ID_INSTRCTN OUTPUT, @CD_INTRCTN_TYPE, @TX_INSTRCTN_TYPE", sqlParameters, cancellationToken);

            ID_INSTRCTN.SetValue(parameterID_INSTRCTN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_MEDICAL_LIMITAsync(decimal? AM_MDCL_LIMIT, string CD_MDCL_DSCR, OutputParameter<decimal?> ID_MDCL_LMT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MDCL_LMT = new SqlParameter
            {
                ParameterName = "ID_MDCL_LMT",
                Precision = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCL_LMT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MDCL_LMT,
                new SqlParameter
                {
                    ParameterName = "AM_MDCL_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MDCL_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MDCL_DSCR",
                    Size = 30,
                    Value = CD_MDCL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_MEDICAL_LIMIT] @ID_MDCL_LMT OUTPUT, @AM_MDCL_LIMIT, @CD_MDCL_DSCR", sqlParameters, cancellationToken);

            ID_MDCL_LMT.SetValue(parameterID_MDCL_LMT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_MEDICATIONResult>> Ins_REF_MEDICATIONAsync(int? ID_PRVDR_NAME, string TX_MDCTN_NAME, OutputParameter<int?> ID_MDCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MDCTN = new SqlParameter
            {
                ParameterName = "ID_MDCTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MDCTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MDCTN,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MDCTN_NAME",
                    Size = 40,
                    Value = TX_MDCTN_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_MEDICATIONResult>("EXEC @returnValue = [dbo].[Ins_REF_MEDICATION] @ID_MDCTN OUTPUT, @ID_PRVDR_NAME, @TX_MDCTN_NAME", sqlParameters, cancellationToken);

            ID_MDCTN.SetValue(parameterID_MDCTN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_MESSAGEAsync(string CD_MSSG_TYPE, string TX_MSSG_DSCR, string FL_SEARCH, OutputParameter<short?> ID_MESSAGES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MESSAGES = new SqlParameter
            {
                ParameterName = "ID_MESSAGES",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MESSAGES?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MESSAGES,
                new SqlParameter
                {
                    ParameterName = "CD_MSSG_TYPE",
                    Size = 7,
                    Value = CD_MSSG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MSSG_DSCR",
                    Value = TX_MSSG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SEARCH",
                    Size = 1,
                    Value = FL_SEARCH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_MESSAGE] @ID_MESSAGES OUTPUT, @CD_MSSG_TYPE, @TX_MSSG_DSCR, @FL_SEARCH", sqlParameters, cancellationToken);

            ID_MESSAGES.SetValue(parameterID_MESSAGES.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_PAST_DUE_RSNAsync(string CD_PAST_DUE_RSN, string TX_PAST_DUE_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAST_DUE_RSN",
                    Value = TX_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_PAST_DUE_RSN] @CD_PAST_DUE_RSN, @TX_PAST_DUE_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_PAY_DATESAsync(int? ID_UNERND_INCM, decimal? AM_GROSS_MNTHLY, decimal? AM_GROSS_PER_PAY, decimal? AM_HRLY_PAY, decimal? AM_NET_MNTHLY, DateTime? DT_PAY_DATE, string FL_INCM_NXT_MNTH, string FL_RPRSNTTV_PAY, decimal? ID_FRQNCY_PAY, decimal? NO_HOURS, OutputParameter<int?> ID_PAY_DATES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_PAY_DATES = new SqlParameter
            {
                ParameterName = "ID_PAY_DATES",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_PAY_DATES?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_PAY_DATES,
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_GROSS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_GROSS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_GROSS_PER_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_GROSS_PER_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_HRLY_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_HRLY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_NET_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_NET_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PAY_DATE",
                    Value = DT_PAY_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INCM_NXT_MNTH",
                    Size = 1,
                    Value = FL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPRSNTTV_PAY",
                    Size = 1,
                    Value = FL_RPRSNTTV_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PAY",
                    Precision = 1,
                    Value = ID_FRQNCY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS",
                    Precision = 2,
                    Value = NO_HOURS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_PAY_DATES] @ID_PAY_DATES OUTPUT, @ID_UNERND_INCM, @AM_GROSS_MNTHLY, @AM_GROSS_PER_PAY, @AM_HRLY_PAY, @AM_NET_MNTHLY, @DT_PAY_DATE, @FL_INCM_NXT_MNTH, @FL_RPRSNTTV_PAY, @ID_FRQNCY_PAY, @NO_HOURS", sqlParameters, cancellationToken);

            ID_PAY_DATES.SetValue(parameterID_PAY_DATES.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_PAY_TYPEAsync(string CD_PAY_TYPE, OutputParameter<int?> ID_PAY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_PAY_TYPE = new SqlParameter
            {
                ParameterName = "ID_PAY_TYPE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_PAY_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_PAY_TYPE,
                new SqlParameter
                {
                    ParameterName = "CD_PAY_TYPE",
                    Size = 10,
                    Value = CD_PAY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_PAY_TYPE] @ID_PAY_TYPE OUTPUT, @CD_PAY_TYPE", sqlParameters, cancellationToken);

            ID_PAY_TYPE.SetValue(parameterID_PAY_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_PROVIDER_NAMEAsync(decimal? ID_PRVDR_TYPE, string NM_PRVDR, OutputParameter<int?> ID_PRVDR_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_PRVDR_NAME = new SqlParameter
            {
                ParameterName = "ID_PRVDR_NAME",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_PRVDR_NAME?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_PRVDR_NAME,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_PROVIDER_NAME] @ID_PRVDR_NAME OUTPUT, @ID_PRVDR_TYPE, @NM_PRVDR", sqlParameters, cancellationToken);

            ID_PRVDR_NAME.SetValue(parameterID_PRVDR_NAME.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_RACEAsync(decimal? CD_RACE, string TX_RACE_DSCR, OutputParameter<short?> ID_RACE_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RACE_CODE = new SqlParameter
            {
                ParameterName = "ID_RACE_CODE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RACE_CODE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RACE_CODE,
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Precision = 9,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RACE_DSCR",
                    Size = 100,
                    Value = TX_RACE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_RACE] @ID_RACE_CODE OUTPUT, @CD_RACE, @TX_RACE_DSCR", sqlParameters, cancellationToken);

            ID_RACE_CODE.SetValue(parameterID_RACE_CODE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_RB_MEALResult>> Ins_REF_RB_MEALAsync(string TX_RBML_DSCR, OutputParameter<short?> ID_REF_RB_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_RB_MEAL = new SqlParameter
            {
                ParameterName = "ID_REF_RB_MEAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_RB_MEAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_RB_MEAL,
                new SqlParameter
                {
                    ParameterName = "TX_RBML_DSCR",
                    Size = 15,
                    Value = TX_RBML_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_RB_MEALResult>("EXEC @returnValue = [dbo].[Ins_REF_RB_MEAL] @ID_REF_RB_MEAL OUTPUT, @TX_RBML_DSCR", sqlParameters, cancellationToken);

            ID_REF_RB_MEAL.SetValue(parameterID_REF_RB_MEAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REF_REJ_CLO_CODEResult>> Ins_REF_REJ_CLO_CODEAsync(string CD_RJCTN_CLSR, string TX_RJCTN_CLSR_DSCR, OutputParameter<decimal?> ID_RJCTN_CLSR_CODES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RJCTN_CLSR_CODES = new SqlParameter
            {
                ParameterName = "ID_RJCTN_CLSR_CODES",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RJCTN_CLSR_CODES?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RJCTN_CLSR_CODES,
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RJCTN_CLSR_DSCR",
                    Value = TX_RJCTN_CLSR_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REF_REJ_CLO_CODEResult>("EXEC @returnValue = [dbo].[Ins_REF_REJ_CLO_CODE] @ID_RJCTN_CLSR_CODES OUTPUT, @CD_RJCTN_CLSR, @TX_RJCTN_CLSR_DSCR", sqlParameters, cancellationToken);

            ID_RJCTN_CLSR_CODES.SetValue(parameterID_RJCTN_CLSR_CODES.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_RELATIONAsync(string TX_RLTN_DSCR, OutputParameter<decimal?> ID_RLTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RLTN = new SqlParameter
            {
                ParameterName = "ID_RLTN",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RLTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RLTN,
                new SqlParameter
                {
                    ParameterName = "TX_RLTN_DSCR",
                    Value = TX_RLTN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_RELATION] @ID_RLTN OUTPUT, @TX_RLTN_DSCR", sqlParameters, cancellationToken);

            ID_RLTN.SetValue(parameterID_RLTN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_RESOURCE_LIMITAsync(decimal? AM_RSRC_LIMIT, string CD_RSRC_DSCR, OutputParameter<short?> ID_RSRC_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RSRC_LIMIT = new SqlParameter
            {
                ParameterName = "ID_RSRC_LIMIT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RSRC_LIMIT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RSRC_LIMIT,
                new SqlParameter
                {
                    ParameterName = "AM_RSRC_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSRC_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_DSCR",
                    Size = 20,
                    Value = CD_RSRC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_RESOURCE_LIMIT] @ID_RSRC_LIMIT OUTPUT, @AM_RSRC_LIMIT, @CD_RSRC_DSCR", sqlParameters, cancellationToken);

            ID_RSRC_LIMIT.SetValue(parameterID_RSRC_LIMIT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_RESOURCE_TYPEAsync(string TX_RSRC_DSCR, OutputParameter<int?> ID_RSRC_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RSRC_CODE = new SqlParameter
            {
                ParameterName = "ID_RSRC_CODE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RSRC_CODE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RSRC_CODE,
                new SqlParameter
                {
                    ParameterName = "TX_RSRC_DSCR",
                    Value = TX_RSRC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_RESOURCE_TYPE] @ID_RSRC_CODE OUTPUT, @TX_RSRC_DSCR", sqlParameters, cancellationToken);

            ID_RSRC_CODE.SetValue(parameterID_RSRC_CODE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_RESOURCE_TYPE_resourcesAsync(string TX_RSRC_DSCR, string CD_RSRC_CODE, OutputParameter<int?> ID_RSRC_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RSRC_CODE = new SqlParameter
            {
                ParameterName = "ID_RSRC_CODE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RSRC_CODE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RSRC_CODE,
                new SqlParameter
                {
                    ParameterName = "TX_RSRC_DSCR",
                    Value = TX_RSRC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_CODE",
                    Size = 2,
                    Value = CD_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_RESOURCE_TYPE_resources] @ID_RSRC_CODE OUTPUT, @TX_RSRC_DSCR, @CD_RSRC_CODE", sqlParameters, cancellationToken);

            ID_RSRC_CODE.SetValue(parameterID_RSRC_CODE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_RJCTN_DNL_TERMAsync(string CD_RJCTN_CLSR, string CD_DENIAL, string CD_TRMNTN, string TX_RJCTN_DNL_TERM, string CASETYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DENIAL",
                    Size = 2,
                    Value = CD_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRMNTN",
                    Size = 2,
                    Value = CD_TRMNTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RJCTN_DNL_TERM",
                    Value = TX_RJCTN_DNL_TERM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "CASETYPE",
                    Size = 3,
                    Value = CASETYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_RJCTN_DNL_TERM] @CD_RJCTN_CLSR, @CD_DENIAL, @CD_TRMNTN, @TX_RJCTN_DNL_TERM, @CASETYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_SANCTION_REASONAsync(string TX_SNCTN_RSN, OutputParameter<decimal?> ID_REF_SNCTN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_SNCTN_RSN = new SqlParameter
            {
                ParameterName = "ID_REF_SNCTN_RSN",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_SNCTN_RSN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_SNCTN_RSN,
                new SqlParameter
                {
                    ParameterName = "TX_SNCTN_RSN",
                    Value = TX_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_SANCTION_REASON] @ID_REF_SNCTN_RSN OUTPUT, @TX_SNCTN_RSN", sqlParameters, cancellationToken);

            ID_REF_SNCTN_RSN.SetValue(parameterID_REF_SNCTN_RSN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_SANCTION_REASON_ResourcesAsync(decimal? ID_REF_SNCTN_TYPE, string TX_SNCTN_RSN, OutputParameter<decimal?> ID_REF_SNCTN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_SNCTN_RSN = new SqlParameter
            {
                ParameterName = "ID_REF_SNCTN_RSN",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_SNCTN_RSN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_SNCTN_RSN,
                new SqlParameter
                {
                    ParameterName = "ID_REF_SNCTN_TYPE",
                    Precision = 2,
                    Value = ID_REF_SNCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SNCTN_RSN",
                    Value = TX_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_SANCTION_REASON_Resources] @ID_REF_SNCTN_RSN OUTPUT, @ID_REF_SNCTN_TYPE, @TX_SNCTN_RSN", sqlParameters, cancellationToken);

            ID_REF_SNCTN_RSN.SetValue(parameterID_REF_SNCTN_RSN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_SECURITYAsync(string ID_PYRLL, string CD_CNTY_SCRTY, string CD_PSSWRD, string CD_ROLE, string NM_FULL_NAME, string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PYRLL",
                    Size = 9,
                    Value = ID_PYRLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_SCRTY",
                    Size = 2,
                    Value = CD_CNTY_SCRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PSSWRD",
                    Size = 20,
                    Value = CD_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ROLE",
                    Size = 15,
                    Value = CD_ROLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_FULL_NAME",
                    Size = 25,
                    Value = NM_FULL_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_SECURITY] @ID_PYRLL, @CD_CNTY_SCRTY, @CD_PSSWRD, @CD_ROLE, @NM_FULL_NAME, @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_SHELTER_DWELLING_TYPEAsync(short? ID_OWNRSHP, string CD_SHLTR_DWELLING_TYPE, string TX_SHLTR_DWELLNG_TYPE_OTHR, OutputParameter<short?> ID_SHLTR_DWELLNG_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SHLTR_DWELLNG_TYPE = new SqlParameter
            {
                ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_DWELLNG_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SHLTR_DWELLNG_TYPE,
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SHLTR_DWELLING_TYPE",
                    Size = 25,
                    Value = CD_SHLTR_DWELLING_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SHLTR_DWELLNG_TYPE_OTHR",
                    Value = TX_SHLTR_DWELLNG_TYPE_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_SHELTER_DWELLING_TYPE] @ID_SHLTR_DWELLNG_TYPE OUTPUT, @ID_OWNRSHP, @CD_SHLTR_DWELLING_TYPE, @TX_SHLTR_DWELLNG_TYPE_OTHR", sqlParameters, cancellationToken);

            ID_SHLTR_DWELLNG_TYPE.SetValue(parameterID_SHLTR_DWELLNG_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_SHELTER_EXPENSE_TYPEAsync(short? ID_SHLTR_DWELLNG_TYPE, string CD_SHLTR_EXPNS_TYPE, string TX_OTHR_SHLTR_EXPNS_TYPE, OutputParameter<short?> ID_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SHLTR_EXPNS_TYPE = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS_TYPE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SHLTR_EXPNS_TYPE,
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SHLTR_EXPNS_TYPE",
                    Value = CD_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_OTHR_SHLTR_EXPNS_TYPE",
                    Value = TX_OTHR_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_SHELTER_EXPENSE_TYPE] @ID_SHLTR_EXPNS_TYPE OUTPUT, @ID_SHLTR_DWELLNG_TYPE, @CD_SHLTR_EXPNS_TYPE, @TX_OTHR_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            ID_SHLTR_EXPNS_TYPE.SetValue(parameterID_SHLTR_EXPNS_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_SHELTER_OWNERSHIPAsync(string CD_OWNRSHP, string TX_RENT_FREE, OutputParameter<short?> ID_OWNRSHP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_OWNRSHP = new SqlParameter
            {
                ParameterName = "ID_OWNRSHP",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_OWNRSHP?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_OWNRSHP,
                new SqlParameter
                {
                    ParameterName = "CD_OWNRSHP",
                    Size = 15,
                    Value = CD_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RENT_FREE",
                    Value = TX_RENT_FREE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_SHELTER_OWNERSHIP] @ID_OWNRSHP OUTPUT, @CD_OWNRSHP, @TX_RENT_FREE", sqlParameters, cancellationToken);

            ID_OWNRSHP.SetValue(parameterID_OWNRSHP.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_TFP_LIMITAsync(decimal? AM_TFP_LIMIT, decimal? NO_HH_SIZE, OutputParameter<short?> ID_REF_TFP_LIMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_TFP_LIMIT = new SqlParameter
            {
                ParameterName = "ID_REF_TFP_LIMIT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_TFP_LIMIT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_TFP_LIMIT,
                new SqlParameter
                {
                    ParameterName = "AM_TFP_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TFP_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_SIZE",
                    Precision = 2,
                    Value = NO_HH_SIZE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_TFP_LIMIT] @ID_REF_TFP_LIMIT OUTPUT, @AM_TFP_LIMIT, @NO_HH_SIZE", sqlParameters, cancellationToken);

            ID_REF_TFP_LIMIT.SetValue(parameterID_REF_TFP_LIMIT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_UTILITY_TYPEAsync(string CD_UTLTY_TYPE, OutputParameter<int?> ID_UTLTY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UTLTY_TYPE = new SqlParameter
            {
                ParameterName = "ID_UTLTY_TYPE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UTLTY_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UTLTY_TYPE,
                new SqlParameter
                {
                    ParameterName = "CD_UTLTY_TYPE",
                    Size = 30,
                    Value = CD_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_UTILITY_TYPE] @ID_UTLTY_TYPE OUTPUT, @CD_UTLTY_TYPE", sqlParameters, cancellationToken);

            ID_UTLTY_TYPE.SetValue(parameterID_UTLTY_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_VERIFICATION_DETAILAsync(int? ID_REF_VRFCTN_SUBTYPE, string CD_VRFCTN_DETAIL_DSCR, string FL_OTHR_VRFCTN_RCVD, string TX_OTHR_VRFCTN, OutputParameter<decimal?> ID_VRFCTN_DETAIL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_VRFCTN_DETAIL = new SqlParameter
            {
                ParameterName = "ID_VRFCTN_DETAIL",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_VRFCTN_DETAIL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_VRFCTN_DETAIL,
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_SUBTYPE",
                    Value = ID_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_VRFCTN_DETAIL_DSCR",
                    Size = 30,
                    Value = CD_VRFCTN_DETAIL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OTHR_VRFCTN_RCVD",
                    Size = 1,
                    Value = FL_OTHR_VRFCTN_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_OTHR_VRFCTN",
                    Value = TX_OTHR_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_VERIFICATION_DETAIL] @ID_VRFCTN_DETAIL OUTPUT, @ID_REF_VRFCTN_SUBTYPE, @CD_VRFCTN_DETAIL_DSCR, @FL_OTHR_VRFCTN_RCVD, @TX_OTHR_VRFCTN", sqlParameters, cancellationToken);

            ID_VRFCTN_DETAIL.SetValue(parameterID_VRFCTN_DETAIL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_VERIFICATION_SUBTYPEAsync(decimal? ID_REF_VRFCTN_TYPE, string CD_REF_VRFCTN_SUBTYPE, OutputParameter<decimal?> ID_REF_VRFCTN_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_VRFCTN_SUBTYPE = new SqlParameter
            {
                ParameterName = "ID_REF_VRFCTN_SUBTYPE",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_VRFCTN_SUBTYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_VRFCTN_SUBTYPE,
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_TYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_VRFCTN_SUBTYPE",
                    Size = 30,
                    Value = CD_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_VERIFICATION_SUBTYPE] @ID_REF_VRFCTN_SUBTYPE OUTPUT, @ID_REF_VRFCTN_TYPE, @CD_REF_VRFCTN_SUBTYPE", sqlParameters, cancellationToken);

            ID_REF_VRFCTN_SUBTYPE.SetValue(parameterID_REF_VRFCTN_SUBTYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_VERIFICATION_TYPEAsync(string CD_REF_VRFCTN_DSCR, OutputParameter<decimal?> ID_REF_VRFCTN_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_VRFCTN_TYPE = new SqlParameter
            {
                ParameterName = "ID_REF_VRFCTN_TYPE",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_VRFCTN_TYPE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_VRFCTN_TYPE,
                new SqlParameter
                {
                    ParameterName = "CD_REF_VRFCTN_DSCR",
                    Size = 15,
                    Value = CD_REF_VRFCTN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_VERIFICATION_TYPE] @ID_REF_VRFCTN_TYPE OUTPUT, @CD_REF_VRFCTN_DSCR", sqlParameters, cancellationToken);

            ID_REF_VRFCTN_TYPE.SetValue(parameterID_REF_VRFCTN_TYPE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_WELCOME_MESSAGEAsync(string ID_MSSG_CNTY, DateTime? DT_MSSG, string TX_WLCM_MSSG_DSCR, DateTime? DT_START, DateTime? DT_END, OutputParameter<short?> ID_WLCM_MSSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_WLCM_MSSG = new SqlParameter
            {
                ParameterName = "ID_WLCM_MSSG",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_WLCM_MSSG?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_WLCM_MSSG,
                new SqlParameter
                {
                    ParameterName = "ID_MSSG_CNTY",
                    Size = 2,
                    Value = ID_MSSG_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_MSSG",
                    Value = DT_MSSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WLCM_MSSG_DSCR",
                    Value = TX_WLCM_MSSG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "DT_START",
                    Value = DT_START ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_END",
                    Value = DT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_WELCOME_MESSAGE] @ID_WLCM_MSSG OUTPUT, @ID_MSSG_CNTY, @DT_MSSG, @TX_WLCM_MSSG_DSCR, @DT_START, @DT_END", sqlParameters, cancellationToken);

            ID_WLCM_MSSG.SetValue(parameterID_WLCM_MSSG.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REF_WORK_REG_CODEAsync(string CD_WORK, string TX_WORK_DSCR, OutputParameter<short?> ID_WORK_CODE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_WORK_CODE = new SqlParameter
            {
                ParameterName = "ID_WORK_CODE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_WORK_CODE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_WORK_CODE,
                new SqlParameter
                {
                    ParameterName = "CD_WORK",
                    Size = 1,
                    Value = CD_WORK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WORK_DSCR",
                    Size = 50,
                    Value = TX_WORK_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REF_WORK_REG_CODE] @ID_WORK_CODE OUTPUT, @CD_WORK, @TX_WORK_DSCR", sqlParameters, cancellationToken);

            ID_WORK_CODE.SetValue(parameterID_WORK_CODE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ins_REG_CASEAsync(string FL_OLD, string FL_LOCAL, string ApplicationID, string ID_USER, string CASEENTRYDT, string CASEMODDT, string NO_CASE, string NO_CASE_CHCKDGT, string CD_CNTY, string CD_OFF, string TRANDT, string DUEDT, string RCTYOFF, string ADDR1, string ADDR2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, string SPECDT, string APPSTS, string APPDT, string PROSTD, string HHTYP, string HOMELS, string WORKER, string EXPDT, string PASS, string AUTH1, string AUTH2, string HNBR, string FLBTR, string SCIERRMSG, string REG_DT, string ERROR_DT, string DEL_DT, int? NBR_APPTS, string FL_APPTMADE, DateTime? CASE_APPTDATETIME, string NOMA_DT, string OACIS_INT_DT, string VERIFICATION_PEND_DT, string AWARD_DT, string DENY_DT, string CD_REGISTRATION_STATUS, string CD_REGISTRATION_STATUS_SENT, string DT_LAST_CD_STATUS_SENT, string TX_REGISTRATION_COMMENT, string FL_REGISTRATION_COMPLETE, string CD_LANGUAGE, string FL_EXPEDITED, OutputParameter<int?> ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_NEWCASE = new SqlParameter
            {
                ParameterName = "ID_NEWCASE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_NEWCASE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_NEWCASE,
                new SqlParameter
                {
                    ParameterName = "FL_OLD",
                    Size = 1,
                    Value = FL_OLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LOCAL",
                    Size = 1,
                    Value = FL_LOCAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationID",
                    Size = 36,
                    Value = ApplicationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASEENTRYDT",
                    Size = 8,
                    Value = CASEENTRYDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASEMODDT",
                    Size = 8,
                    Value = CASEMODDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Size = 1,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_OFF",
                    Size = 2,
                    Value = CD_OFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TRANDT",
                    Size = 8,
                    Value = TRANDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DUEDT",
                    Size = 8,
                    Value = DUEDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RCTYOFF",
                    Size = 5,
                    Value = RCTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDR1",
                    Size = 25,
                    Value = ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDR2",
                    Size = 25,
                    Value = ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 17,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SPECDT",
                    Size = 8,
                    Value = SPECDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "APPSTS",
                    Size = 1,
                    Value = APPSTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "APPDT",
                    Size = 8,
                    Value = APPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PROSTD",
                    Size = 1,
                    Value = PROSTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HHTYP",
                    Size = 1,
                    Value = HHTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HOMELS",
                    Size = 1,
                    Value = HOMELS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "WORKER",
                    Size = 3,
                    Value = WORKER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPDT",
                    Size = 8,
                    Value = EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PASS",
                    Size = 1,
                    Value = PASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AUTH1",
                    Size = 35,
                    Value = AUTH1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AUTH2",
                    Size = 35,
                    Value = AUTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HNBR",
                    Size = 2,
                    Value = HNBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FLBTR",
                    Size = 1,
                    Value = FLBTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCIERRMSG",
                    Size = 255,
                    Value = SCIERRMSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "REG_DT",
                    Size = 8,
                    Value = REG_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ERROR_DT",
                    Size = 8,
                    Value = ERROR_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEL_DT",
                    Size = 8,
                    Value = DEL_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NBR_APPTS",
                    Value = NBR_APPTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_APPTMADE",
                    Size = 1,
                    Value = FL_APPTMADE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_APPTDATETIME",
                    Value = CASE_APPTDATETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NOMA_DT",
                    Size = 8,
                    Value = NOMA_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OACIS_INT_DT",
                    Size = 8,
                    Value = OACIS_INT_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "VERIFICATION_PEND_DT",
                    Size = 8,
                    Value = VERIFICATION_PEND_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AWARD_DT",
                    Size = 8,
                    Value = AWARD_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DENY_DT",
                    Size = 8,
                    Value = DENY_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS_SENT",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_LAST_CD_STATUS_SENT",
                    Size = 8,
                    Value = DT_LAST_CD_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_REGISTRATION_COMMENT",
                    Value = TX_REGISTRATION_COMMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REGISTRATION_COMPLETE",
                    Size = 1,
                    Value = FL_REGISTRATION_COMPLETE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE",
                    Size = 2,
                    Value = CD_LANGUAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPEDITED",
                    Size = 1,
                    Value = FL_EXPEDITED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ins_REG_CASE] @ID_NEWCASE OUTPUT, @FL_OLD, @FL_LOCAL, @ApplicationID, @ID_USER, @CASEENTRYDT, @CASEMODDT, @NO_CASE, @NO_CASE_CHCKDGT, @CD_CNTY, @CD_OFF, @TRANDT, @DUEDT, @RCTYOFF, @ADDR1, @ADDR2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4, @SPECDT, @APPSTS, @APPDT, @PROSTD, @HHTYP, @HOMELS, @WORKER, @EXPDT, @PASS, @AUTH1, @AUTH2, @HNBR, @FLBTR, @SCIERRMSG, @REG_DT, @ERROR_DT, @DEL_DT, @NBR_APPTS, @FL_APPTMADE, @CASE_APPTDATETIME, @NOMA_DT, @OACIS_INT_DT, @VERIFICATION_PEND_DT, @AWARD_DT, @DENY_DT, @CD_REGISTRATION_STATUS, @CD_REGISTRATION_STATUS_SENT, @DT_LAST_CD_STATUS_SENT, @TX_REGISTRATION_COMMENT, @FL_REGISTRATION_COMPLETE, @CD_LANGUAGE, @FL_EXPEDITED", sqlParameters, cancellationToken);

            ID_NEWCASE.SetValue(parameterID_NEWCASE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ins_REG_CASEMBRSAsync(int? ID_NEWCASE, string DEPNUM, string SSN, string VERIND, string DEP_NM_MMBR_LST, string DEP_NM_MMBR_FRST, string DEP_NM_MMBR_MDL, string DEP_NM_MMBR_SFX, string SEX, string CD_RACE, string DOB, string PACASE, string ELIG, string FL_INVALID_MEMBER, string CD_INVALID_MEMBER, string FL_HOH, string ApplicationID, int? PersonID, OutputParameter<int?> ID_NEWMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_NEWMBR = new SqlParameter
            {
                ParameterName = "ID_NEWMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_NEWMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_NEWMBR,
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DEPNUM",
                    Size = 2,
                    Value = DEPNUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "VERIND",
                    Size = 1,
                    Value = VERIND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_LST",
                    Size = 20,
                    Value = DEP_NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_FRST",
                    Size = 20,
                    Value = DEP_NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_MDL",
                    Size = 20,
                    Value = DEP_NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_SFX",
                    Size = 20,
                    Value = DEP_NM_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SEX",
                    Size = 1,
                    Value = SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Size = 2,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Size = 8,
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PACASE",
                    Size = 1,
                    Value = PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ELIG",
                    Size = 1,
                    Value = ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INVALID_MEMBER",
                    Size = 1,
                    Value = FL_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INVALID_MEMBER",
                    Size = 2,
                    Value = CD_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HOH",
                    Size = 1,
                    Value = FL_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationID",
                    Size = 36,
                    Value = ApplicationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ins_REG_CASEMBRS] @ID_NEWMBR OUTPUT, @ID_NEWCASE, @DEPNUM, @SSN, @VERIND, @DEP_NM_MMBR_LST, @DEP_NM_MMBR_FRST, @DEP_NM_MMBR_MDL, @DEP_NM_MMBR_SFX, @SEX, @CD_RACE, @DOB, @PACASE, @ELIG, @FL_INVALID_MEMBER, @CD_INVALID_MEMBER, @FL_HOH, @ApplicationID, @PersonID", sqlParameters, cancellationToken);

            ID_NEWMBR.SetValue(parameterID_NEWMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ins_REGISTER_APP_FROM_ARCHIVEAsync(string NO_CASE, OutputParameter<int?> ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_NEWCASE = new SqlParameter
            {
                ParameterName = "ID_NEWCASE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_NEWCASE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_NEWCASE,
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ins_REGISTER_APP_FROM_ARCHIVE] @ID_NEWCASE OUTPUT, @NO_CASE", sqlParameters, cancellationToken);

            ID_NEWCASE.SetValue(parameterID_NEWCASE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ins_REGISTER_APPLICATIONAsync(string ID_USER, string NO_CASE, string NO_CASE_CHCKDGT, string COUNTY_SUBMIT, string COUNTY_OFFICE, DateTime? DT_REGISTRATION_CREATIED, DateTime? DT_REGISTRATION_MODIFIED, DateTime? DT_CASE_APPTDATETIME, string DATE_REGISTRATION, string DATE_NOMA, string DATE_OACIS_INTERVIEW, string DATE_VERIFICATION_PENDING, string DATE_AWARD, string DATE_DENY, string DATE_DELETION, string DATE_ERROR, string FL_ACTIVE, string FL_REGISTRATION_COMPLETE, string FL_EXPEDITED, string FL_APPTMADE, string FL_OFFICEINT, string CD_SOURCE, string CD_LANGUAGE, string CD_REGISTRATION_STATUS, string CD_REGISTRATION_STATUS_SENT, DateTime? DT_REGISTRATION_STATUS, DateTime? DT_REGISTRATION_STATUS_SENT, string DHR_APPLICATION_ID, string DHR_APPLICATION_TYPE, string DHR_START_DATE, string DHR_SIGNED_DATE, string DHR_SUBMIT_TO_COUNTY_OFFICE, string ALL_MAILING_ADDR1, string ALL_MAILING_ADDR2, string ALL_MAILING_CITY, string ALL_MAILING_STATE, string ALL_MAILING_ZIP, string ALL_MAILING_ZIP4, string ALL_MAILING_COUNTY, string ALL_RESIDENCE_ADDR1, string ALL_RESIDENCE_ADDR2, string ALL_RESIDENCE_CITY, string ALL_RESIDENCE_STATE, string ALL_RESIDENCE_ZIP, string ALL_RESIDENCE_ZIP4, string DHR_HOME_PHONE_NUMBER, string DHR_WORK_PHONE_NUMBER, string DHR_MESSAGE_PHONE_NUMBER, string DHR_CELL_NUMBER, string DHR_EMAIL_ADDRESS, string ALL_AUTH_REP_FIRST_NAME, string ALL_AUTH_REP_MIDDLE_NAME, string ALL_AUTH_REP_LAST_NAME, string ALL_AUTH_REP_PHONE_NUMBER, string ALL_EBT_REP_FIRST_NAME, string ALL_EBT_REP_MIDDLE_NAME, string ALL_EBT_REP_LAST_NAME, string ALL_EBT_REP_PHONE_NUMBER, int? DHR_HOH_PERSON_ID, int? DHR_APPLICANT_PERSON_ID, int? ALL_HOH_ID, int? NUMBER_OF_APPTS, string TEXT_REGISTRATION_COMMENTS, int? NBR_IN_HH, string SCI_CASENO, string SCI_CHKDGT, string SCI_CTYOFF, string SCI_TRANDT, string SCI_DUEDT, string SCI_NAME, string SCI_ADDR1, string SCI_RCTYOFF, string SCI_ADDR2, string SCI_CITY, string SCI_ZIP5, string SCI_ZIP4, string SCI_SPECDT, string SCI_APPSTS, string SCI_APPDT, string SCI_PROSTD, string SCI_HHTYP, string SCI_HOMELS, string SCI_WORKER, string SCI_OFFICE, string SCI_APTDT, string SCI_BATTER, string SCI_DENY, string SCI_APTYPE, string SCI_EXPDT, string SCI_PASS, string SCI_AUTH1, string SCI_AUTH2, string SCI_ERROR_MSG, int? SCI_NBR_IN_HH, int? ID_DISASTER, string MYDHR_MIGRANT_EXPEDITE_FL, string MYDHR_INC_EXP_EXPEDITE_FL, bool? MYDHR_LN_POTENTIALLY_FRAUDULENT, bool? MYDHR_LN_OptOut, OutputParameter<int?> ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_NEWCASE = new SqlParameter
            {
                ParameterName = "ID_NEWCASE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_NEWCASE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_NEWCASE,
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Size = 2,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 4,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_OFFICE",
                    Size = 4,
                    Value = COUNTY_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_CREATIED",
                    Value = DT_REGISTRATION_CREATIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_APPTDATETIME",
                    Value = DT_CASE_APPTDATETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_REGISTRATION",
                    Size = 16,
                    Value = DATE_REGISTRATION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_NOMA",
                    Size = 16,
                    Value = DATE_NOMA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_OACIS_INTERVIEW",
                    Size = 16,
                    Value = DATE_OACIS_INTERVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_VERIFICATION_PENDING",
                    Size = 16,
                    Value = DATE_VERIFICATION_PENDING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_AWARD",
                    Size = 16,
                    Value = DATE_AWARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DENY",
                    Size = 16,
                    Value = DATE_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DELETION",
                    Size = 16,
                    Value = DATE_DELETION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_ERROR",
                    Size = 16,
                    Value = DATE_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REGISTRATION_COMPLETE",
                    Size = 1,
                    Value = FL_REGISTRATION_COMPLETE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPEDITED",
                    Size = 1,
                    Value = FL_EXPEDITED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_APPTMADE",
                    Size = 1,
                    Value = FL_APPTMADE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OFFICEINT",
                    Size = 1,
                    Value = FL_OFFICEINT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SOURCE",
                    Size = 1,
                    Value = CD_SOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE",
                    Size = 2,
                    Value = CD_LANGUAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS_SENT",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_STATUS",
                    Value = DT_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_STATUS_SENT",
                    Value = DT_REGISTRATION_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICATION_ID",
                    Size = 36,
                    Value = DHR_APPLICATION_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICATION_TYPE",
                    Size = 10,
                    Value = DHR_APPLICATION_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_START_DATE",
                    Size = 8,
                    Value = DHR_START_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SIGNED_DATE",
                    Size = 8,
                    Value = DHR_SIGNED_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SUBMIT_TO_COUNTY_OFFICE",
                    Size = 2,
                    Value = DHR_SUBMIT_TO_COUNTY_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ADDR1",
                    Size = 25,
                    Value = ALL_MAILING_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ADDR2",
                    Size = 25,
                    Value = ALL_MAILING_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_CITY",
                    Size = 25,
                    Value = ALL_MAILING_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_STATE",
                    Size = 2,
                    Value = ALL_MAILING_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ZIP",
                    Size = 5,
                    Value = ALL_MAILING_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ZIP4",
                    Size = 4,
                    Value = ALL_MAILING_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_COUNTY",
                    Size = 2,
                    Value = ALL_MAILING_COUNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ADDR1",
                    Size = 25,
                    Value = ALL_RESIDENCE_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ADDR2",
                    Size = 50,
                    Value = ALL_RESIDENCE_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_CITY",
                    Size = 25,
                    Value = ALL_RESIDENCE_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_STATE",
                    Size = 2,
                    Value = ALL_RESIDENCE_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ZIP",
                    Size = 5,
                    Value = ALL_RESIDENCE_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ZIP4",
                    Size = 4,
                    Value = ALL_RESIDENCE_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_HOME_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_HOME_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_WORK_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_WORK_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MESSAGE_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_MESSAGE_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_CELL_NUMBER",
                    Size = 12,
                    Value = DHR_CELL_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_EMAIL_ADDRESS",
                    Size = 30,
                    Value = DHR_EMAIL_ADDRESS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_FIRST_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_MIDDLE_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_LAST_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_PHONE_NUMBER",
                    Size = 12,
                    Value = ALL_AUTH_REP_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_FIRST_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_MIDDLE_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_LAST_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_PHONE_NUMBER",
                    Size = 12,
                    Value = ALL_EBT_REP_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_HOH_PERSON_ID",
                    Value = DHR_HOH_PERSON_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICANT_PERSON_ID",
                    Value = DHR_APPLICANT_PERSON_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_HOH_ID",
                    Value = ALL_HOH_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NUMBER_OF_APPTS",
                    Value = NUMBER_OF_APPTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TEXT_REGISTRATION_COMMENTS",
                    Value = TEXT_REGISTRATION_COMMENTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "NBR_IN_HH",
                    Value = NBR_IN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CASENO",
                    Size = 9,
                    Value = SCI_CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CHKDGT",
                    Size = 1,
                    Value = SCI_CHKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CTYOFF",
                    Size = 4,
                    Value = SCI_CTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_TRANDT",
                    Size = 8,
                    Value = SCI_TRANDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DUEDT",
                    Size = 8,
                    Value = SCI_DUEDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_NAME",
                    Size = 28,
                    Value = SCI_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ADDR1",
                    Size = 25,
                    Value = SCI_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_RCTYOFF",
                    Size = 4,
                    Value = SCI_RCTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ADDR2",
                    Size = 25,
                    Value = SCI_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CITY",
                    Size = 20,
                    Value = SCI_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ZIP5",
                    Size = 5,
                    Value = SCI_ZIP5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ZIP4",
                    Size = 4,
                    Value = SCI_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SPECDT",
                    Size = 8,
                    Value = SCI_SPECDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPSTS",
                    Size = 1,
                    Value = SCI_APPSTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPDT",
                    Size = 8,
                    Value = SCI_APPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PROSTD",
                    Size = 1,
                    Value = SCI_PROSTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HHTYP",
                    Size = 1,
                    Value = SCI_HHTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HOMELS",
                    Size = 1,
                    Value = SCI_HOMELS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_WORKER",
                    Size = 3,
                    Value = SCI_WORKER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_OFFICE",
                    Size = 2,
                    Value = SCI_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APTDT",
                    Size = 8,
                    Value = SCI_APTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_BATTER",
                    Size = 1,
                    Value = SCI_BATTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DENY",
                    Size = 1,
                    Value = SCI_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APTYPE",
                    Size = 1,
                    Value = SCI_APTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_EXPDT",
                    Size = 8,
                    Value = SCI_EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PASS",
                    Size = 1,
                    Value = SCI_PASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH1",
                    Size = 35,
                    Value = SCI_AUTH1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH2",
                    Size = 35,
                    Value = SCI_AUTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ERROR_MSG",
                    Size = 510,
                    Value = SCI_ERROR_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_NBR_IN_HH",
                    Value = SCI_NBR_IN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_MIGRANT_EXPEDITE_FL",
                    Size = 1,
                    Value = MYDHR_MIGRANT_EXPEDITE_FL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_INC_EXP_EXPEDITE_FL",
                    Size = 1,
                    Value = MYDHR_INC_EXP_EXPEDITE_FL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_LN_POTENTIALLY_FRAUDULENT",
                    Value = MYDHR_LN_POTENTIALLY_FRAUDULENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_LN_OptOut",
                    Value = MYDHR_LN_OptOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ins_REGISTER_APPLICATION] @ID_NEWCASE OUTPUT, @ID_USER, @NO_CASE, @NO_CASE_CHCKDGT, @COUNTY_SUBMIT, @COUNTY_OFFICE, @DT_REGISTRATION_CREATIED, @DT_REGISTRATION_MODIFIED, @DT_CASE_APPTDATETIME, @DATE_REGISTRATION, @DATE_NOMA, @DATE_OACIS_INTERVIEW, @DATE_VERIFICATION_PENDING, @DATE_AWARD, @DATE_DENY, @DATE_DELETION, @DATE_ERROR, @FL_ACTIVE, @FL_REGISTRATION_COMPLETE, @FL_EXPEDITED, @FL_APPTMADE, @FL_OFFICEINT, @CD_SOURCE, @CD_LANGUAGE, @CD_REGISTRATION_STATUS, @CD_REGISTRATION_STATUS_SENT, @DT_REGISTRATION_STATUS, @DT_REGISTRATION_STATUS_SENT, @DHR_APPLICATION_ID, @DHR_APPLICATION_TYPE, @DHR_START_DATE, @DHR_SIGNED_DATE, @DHR_SUBMIT_TO_COUNTY_OFFICE, @ALL_MAILING_ADDR1, @ALL_MAILING_ADDR2, @ALL_MAILING_CITY, @ALL_MAILING_STATE, @ALL_MAILING_ZIP, @ALL_MAILING_ZIP4, @ALL_MAILING_COUNTY, @ALL_RESIDENCE_ADDR1, @ALL_RESIDENCE_ADDR2, @ALL_RESIDENCE_CITY, @ALL_RESIDENCE_STATE, @ALL_RESIDENCE_ZIP, @ALL_RESIDENCE_ZIP4, @DHR_HOME_PHONE_NUMBER, @DHR_WORK_PHONE_NUMBER, @DHR_MESSAGE_PHONE_NUMBER, @DHR_CELL_NUMBER, @DHR_EMAIL_ADDRESS, @ALL_AUTH_REP_FIRST_NAME, @ALL_AUTH_REP_MIDDLE_NAME, @ALL_AUTH_REP_LAST_NAME, @ALL_AUTH_REP_PHONE_NUMBER, @ALL_EBT_REP_FIRST_NAME, @ALL_EBT_REP_MIDDLE_NAME, @ALL_EBT_REP_LAST_NAME, @ALL_EBT_REP_PHONE_NUMBER, @DHR_HOH_PERSON_ID, @DHR_APPLICANT_PERSON_ID, @ALL_HOH_ID, @NUMBER_OF_APPTS, @TEXT_REGISTRATION_COMMENTS, @NBR_IN_HH, @SCI_CASENO, @SCI_CHKDGT, @SCI_CTYOFF, @SCI_TRANDT, @SCI_DUEDT, @SCI_NAME, @SCI_ADDR1, @SCI_RCTYOFF, @SCI_ADDR2, @SCI_CITY, @SCI_ZIP5, @SCI_ZIP4, @SCI_SPECDT, @SCI_APPSTS, @SCI_APPDT, @SCI_PROSTD, @SCI_HHTYP, @SCI_HOMELS, @SCI_WORKER, @SCI_OFFICE, @SCI_APTDT, @SCI_BATTER, @SCI_DENY, @SCI_APTYPE, @SCI_EXPDT, @SCI_PASS, @SCI_AUTH1, @SCI_AUTH2, @SCI_ERROR_MSG, @SCI_NBR_IN_HH, @ID_DISASTER, @MYDHR_MIGRANT_EXPEDITE_FL, @MYDHR_INC_EXP_EXPEDITE_FL, @MYDHR_LN_POTENTIALLY_FRAUDULENT, @MYDHR_LN_OptOut", sqlParameters, cancellationToken);

            ID_NEWCASE.SetValue(parameterID_NEWCASE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> INS_REGISTER_APPLICATION_STATUSAsync(string APP_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "APP_ID",
                    Size = 36,
                    Value = APP_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[INS_REGISTER_APPLICATION_STATUS] @APP_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ins_REGISTER_MEMBERSAsync(int? ID_NEWCASE, int? DEPENDENT_NMBR, string FL_HOH, string FL_INVALID_MEMBER, string CD_INVALID_MEMBER, string DHR_APPLICATION_ID, int? DHR_PERSON_ID, string DHR_RELATIONSHIP, string DHR_ETHNICITY, string DHR_USCITIZEN, string DHR_MEMBER_SSN, string DHR_MEMBER_FIRST_NAME, string DHR_MEMBER_MIDDLE_NAME, string DHR_MEMBER_LAST_NAME, string DHR_MEMBER_SUFFIX_NAME, string DHR_DOB, string DHR_SEX, string DHR_RACE, string SCI_DEPNUM, string SCI_SSN, string SCI_VERIND, string SCI_DEPNAM, string SCI_SEX, string SCI_RACE, string SCI_DOB, string SCI_PACASE, string SCI_ELIG, string SCI_ERRMSG, string SCI_REG_MATCH, OutputParameter<int?> ID_NEWMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_NEWMBR = new SqlParameter
            {
                ParameterName = "ID_NEWMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_NEWMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_NEWMBR,
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DEPENDENT_NMBR",
                    Value = DEPENDENT_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HOH",
                    Size = 1,
                    Value = FL_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INVALID_MEMBER",
                    Size = 1,
                    Value = FL_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INVALID_MEMBER",
                    Size = 2,
                    Value = CD_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICATION_ID",
                    Size = 36,
                    Value = DHR_APPLICATION_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_PERSON_ID",
                    Value = DHR_PERSON_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_RELATIONSHIP",
                    Size = 20,
                    Value = DHR_RELATIONSHIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_ETHNICITY",
                    Size = 1,
                    Value = DHR_ETHNICITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_USCITIZEN",
                    Size = 1,
                    Value = DHR_USCITIZEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SSN",
                    Size = 11,
                    Value = DHR_MEMBER_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_FIRST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_MIDDLE_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_LAST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SUFFIX_NAME",
                    Size = 3,
                    Value = DHR_MEMBER_SUFFIX_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_DOB",
                    Size = 8,
                    Value = DHR_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SEX",
                    Size = 1,
                    Value = DHR_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_RACE",
                    Size = 2,
                    Value = DHR_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNUM",
                    Size = 2,
                    Value = SCI_DEPNUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SSN",
                    Size = 9,
                    Value = SCI_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_VERIND",
                    Size = 1,
                    Value = SCI_VERIND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNAM",
                    Size = 28,
                    Value = SCI_DEPNAM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SEX",
                    Size = 1,
                    Value = SCI_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_RACE",
                    Size = 2,
                    Value = SCI_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DOB",
                    Size = 8,
                    Value = SCI_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PACASE",
                    Size = 9,
                    Value = SCI_PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ELIG",
                    Size = 1,
                    Value = SCI_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ERRMSG",
                    Size = 79,
                    Value = SCI_ERRMSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_REG_MATCH",
                    Size = 1,
                    Value = SCI_REG_MATCH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ins_REGISTER_MEMBERS] @ID_NEWMBR OUTPUT, @ID_NEWCASE, @DEPENDENT_NMBR, @FL_HOH, @FL_INVALID_MEMBER, @CD_INVALID_MEMBER, @DHR_APPLICATION_ID, @DHR_PERSON_ID, @DHR_RELATIONSHIP, @DHR_ETHNICITY, @DHR_USCITIZEN, @DHR_MEMBER_SSN, @DHR_MEMBER_FIRST_NAME, @DHR_MEMBER_MIDDLE_NAME, @DHR_MEMBER_LAST_NAME, @DHR_MEMBER_SUFFIX_NAME, @DHR_DOB, @DHR_SEX, @DHR_RACE, @SCI_DEPNUM, @SCI_SSN, @SCI_VERIND, @SCI_DEPNAM, @SCI_SEX, @SCI_RACE, @SCI_DOB, @SCI_PACASE, @SCI_ELIG, @SCI_ERRMSG, @SCI_REG_MATCH", sqlParameters, cancellationToken);

            ID_NEWMBR.SetValue(parameterID_NEWMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_REJ_CLOResult>> Ins_REJ_CLOAsync(int? ID_CASE_NMBR, decimal? ID_RJCTN_CLSR_CODES, DateTime? DT_RJCTN_CLSR, OutputParameter<decimal?> ID_RJCTN_CLSR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RJCTN_CLSR = new SqlParameter
            {
                ParameterName = "ID_RJCTN_CLSR",
                Precision = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RJCTN_CLSR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RJCTN_CLSR,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR_CODES",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RJCTN_CLSR",
                    Value = DT_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_REJ_CLOResult>("EXEC @returnValue = [dbo].[Ins_REJ_CLO] @ID_RJCTN_CLSR OUTPUT, @ID_CASE_NMBR, @ID_RJCTN_CLSR_CODES, @DT_RJCTN_CLSR", sqlParameters, cancellationToken);

            ID_RJCTN_CLSR.SetValue(parameterID_RJCTN_CLSR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_REPORTINGAsync(int? ID_CASE_NMBR, string CD_RPRTNG_RQRMNT, DateTime? DT_RPRTNG, string TX_RPRTNG_RQRMNT_DSCR, OutputParameter<int?> ID_RPRTNG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RPRTNG = new SqlParameter
            {
                ParameterName = "ID_RPRTNG",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RPRTNG?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RPRTNG,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RPRTNG_RQRMNT",
                    Size = 1,
                    Value = CD_RPRTNG_RQRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RPRTNG",
                    Value = DT_RPRTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RPRTNG_RQRMNT_DSCR",
                    Value = TX_RPRTNG_RQRMNT_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_REPORTING] @ID_RPRTNG OUTPUT, @ID_CASE_NMBR, @CD_RPRTNG_RQRMNT, @DT_RPRTNG, @TX_RPRTNG_RQRMNT_DSCR", sqlParameters, cancellationToken);

            ID_RPRTNG.SetValue(parameterID_RPRTNG.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_RESOURCEAsync(int? ID_MMBR, int? ID_RSRC_CODE, decimal? AM_RSRC_INCM, decimal? AM_RSRC_VALUE, decimal? AM_TRST_INTRST, decimal? AM_WTHDRWL_PNLTY, string FL_CHLD_TRUST_FUND, string FL_CRT_ORDRD, string FL_EXCLD_RSRC, string FL_JNT_ACCT, string FL_RCVNG_TRUST_INTRST, string FL_TRUST_ACCSSBL, string FL_WTHDRWL_PNLTY, decimal? ID_FRQNCY_INTRST, int? ID_VRFCTN_RSRC, string NM_BANK_INSTTTN, string NM_JNT_MMBR_LST, string NM_JNT_MMBR_FRST, string NM_JNT_MMBR_MDL, string NM_JNT_MMBR_SFX, string NM_SRC_LCTN, string NO_ACCT, string FL_CTGRCLLY_ELGBL, string CD_MONTH, int? ID_UNERND_INCM, string TX_VRFCTN_RSRC, OutputParameter<short?> ID_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RSRC = new SqlParameter
            {
                ParameterName = "ID_RSRC",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RSRC?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RSRC,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSRC_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSRC_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSRC_VALUE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSRC_VALUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TRST_INTRST",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TRST_INTRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_WTHDRWL_PNLTY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_WTHDRWL_PNLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CHLD_TRUST_FUND",
                    Size = 1,
                    Value = FL_CHLD_TRUST_FUND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CRT_ORDRD",
                    Size = 1,
                    Value = FL_CRT_ORDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXCLD_RSRC",
                    Size = 1,
                    Value = FL_EXCLD_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_JNT_ACCT",
                    Size = 1,
                    Value = FL_JNT_ACCT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RCVNG_TRUST_INTRST",
                    Size = 1,
                    Value = FL_RCVNG_TRUST_INTRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TRUST_ACCSSBL",
                    Size = 1,
                    Value = FL_TRUST_ACCSSBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WTHDRWL_PNLTY",
                    Size = 1,
                    Value = FL_WTHDRWL_PNLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_INTRST",
                    Precision = 1,
                    Value = ID_FRQNCY_INTRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RSRC",
                    Value = ID_VRFCTN_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_BANK_INSTTTN",
                    Size = 30,
                    Value = NM_BANK_INSTTTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_LST",
                    Size = 15,
                    Value = NM_JNT_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_FRST",
                    Size = 15,
                    Value = NM_JNT_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_MDL",
                    Size = 15,
                    Value = NM_JNT_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_SFX",
                    Size = 3,
                    Value = NM_JNT_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_SRC_LCTN",
                    Size = 30,
                    Value = NM_SRC_LCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT",
                    Size = 15,
                    Value = NO_ACCT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CTGRCLLY_ELGBL",
                    Size = 1,
                    Value = FL_CTGRCLLY_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_RSRC",
                    Value = TX_VRFCTN_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_RESOURCE] @ID_RSRC OUTPUT, @ID_MMBR, @ID_RSRC_CODE, @AM_RSRC_INCM, @AM_RSRC_VALUE, @AM_TRST_INTRST, @AM_WTHDRWL_PNLTY, @FL_CHLD_TRUST_FUND, @FL_CRT_ORDRD, @FL_EXCLD_RSRC, @FL_JNT_ACCT, @FL_RCVNG_TRUST_INTRST, @FL_TRUST_ACCSSBL, @FL_WTHDRWL_PNLTY, @ID_FRQNCY_INTRST, @ID_VRFCTN_RSRC, @NM_BANK_INSTTTN, @NM_JNT_MMBR_LST, @NM_JNT_MMBR_FRST, @NM_JNT_MMBR_MDL, @NM_JNT_MMBR_SFX, @NM_SRC_LCTN, @NO_ACCT, @FL_CTGRCLLY_ELGBL, @CD_MONTH, @ID_UNERND_INCM, @TX_VRFCTN_RSRC", sqlParameters, cancellationToken);

            ID_RSRC.SetValue(parameterID_RSRC.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_RESTORATIONAsync(int? ID_CASE_NMBR, decimal? ID_RSTRTN_RSN, decimal? AM_RSTRTN, DateTime? DT_RSTRTN, OutputParameter<short?> ID_RSTRTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_RSTRTN = new SqlParameter
            {
                ParameterName = "ID_RSTRTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_RSTRTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_RSTRTN,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN_RSN",
                    Precision = 2,
                    Value = ID_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSTRTN",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RSTRTN",
                    Value = DT_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_RESTORATION] @ID_RSTRTN OUTPUT, @ID_CASE_NMBR, @ID_RSTRTN_RSN, @AM_RSTRTN, @DT_RSTRTN", sqlParameters, cancellationToken);

            ID_RSTRTN.SetValue(parameterID_RSTRTN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_ROOMAsync(int? ID_MMBR, decimal? AM_ROOM_PAY, decimal? ID_FRQNCY_ROOM_PAY, int? ID_VRFCTN_ROOM, string CD_MONTH, string TX_VRFCTN_ROOM, OutputParameter<int?> ID_ROOM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ROOM = new SqlParameter
            {
                ParameterName = "ID_ROOM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ROOM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ROOM,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ROOM_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_ROOM_PAY",
                    Precision = 2,
                    Value = ID_FRQNCY_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ROOM",
                    Value = ID_VRFCTN_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_ROOM",
                    Value = TX_VRFCTN_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_ROOM] @ID_ROOM OUTPUT, @ID_MMBR, @AM_ROOM_PAY, @ID_FRQNCY_ROOM_PAY, @ID_VRFCTN_ROOM, @CD_MONTH, @TX_VRFCTN_ROOM", sqlParameters, cancellationToken);

            ID_ROOM.SetValue(parameterID_ROOM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_RoomBoard_NonMemberAsync(int? ID_CASE_NMBR, DateTime? DT_BRTH, string NM_MMBR_LST, string NM_MMBR_FRST, string NM_MMBR_MDL, OutputParameter<int?> ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MMBR = new SqlParameter
            {
                ParameterName = "ID_MMBR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MMBR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MMBR,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BRTH",
                    Value = DT_BRTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_MDL",
                    Size = 20,
                    Value = NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_RoomBoard_NonMember] @ID_MMBR OUTPUT, @ID_CASE_NMBR, @DT_BRTH, @NM_MMBR_LST, @NM_MMBR_FRST, @NM_MMBR_MDL", sqlParameters, cancellationToken);

            ID_MMBR.SetValue(parameterID_MMBR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SANCTIONAsync(decimal? ID_REF_SNCTN_RSN, int? ID_MMBR, DateTime? DT_SNCTN_END, DateTime? DT_SNCTN_STRT, decimal? NO_SNCTN, OutputParameter<int?> ID_SNCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SNCTN = new SqlParameter
            {
                ParameterName = "ID_SNCTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SNCTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SNCTN,
                new SqlParameter
                {
                    ParameterName = "ID_REF_SNCTN_RSN",
                    Precision = 2,
                    Value = ID_REF_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SNCTN_END",
                    Value = DT_SNCTN_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SNCTN_STRT",
                    Value = DT_SNCTN_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SNCTN",
                    Precision = 1,
                    Value = NO_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SANCTION] @ID_SNCTN OUTPUT, @ID_REF_SNCTN_RSN, @ID_MMBR, @DT_SNCTN_END, @DT_SNCTN_STRT, @NO_SNCTN", sqlParameters, cancellationToken);

            ID_SNCTN.SetValue(parameterID_SNCTN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SCI2_CASE_DATAAsync(int? ID_NMBR_CASELOG, int? ID_AUDIT_CASEACTION, int? ID_CASE_NMBR, string CD_REC_TYPE, decimal? NO_CASE, decimal? NO_CASE_CHKDGT, string CD_CTY_OFF, string NM_HOH, string TX_ADDRESS, string TX_CITY_STATE, string TXT_ZIP, string NO_HOME_TEL, string FL_EBT, string NM_AUTH_REP, string NM_EBT_REP, string CD_PRCSSN_STNDRD, string CD_EXPEDITE, string CD_RJCTN_CLSR, string CD_NTC_TYPE_IND, string DT_APPLD, string DT_CERT_STRT, string DT_CERT_END, string DT_STRT_ISSNC, string CD_ISSUE_TYPE, string CD_ADVRS_GUARD, string AM_RESOURCE, string NO_WRKR_NMBR, string NO_TMP_WRKR_NMBR, string AM_DEP_CARE, string AM_MED_EXP, string AM_RENT_MORT, string AM_PROP_TAX, string AM_PROP_INS, string AM_OTHER_EXP, string CD_UTIL_TYPE, string AM_UTILITY, string CD_HH_TYPE, string CD_LANGUAGE_INDCTR, string CD_RPRTNG_RQRMNT, string CD_PAST_DUE_RSN, int? NO_HH_MMBRS, string GROSS_INCOME_TESTED, string NET_INCOME_TESTED, string EXC_2040, string STND_DED, string ADJ_INC, string SHL_DED, string NET_INC, string TFP, string RATE_REDUC, string TOT_SHL, string AM_RETRO_RESTORE, string AM_RECOUP, string AM_COMBINED, string AM_ALLOTMENT, string CD_TRANSACTION, string CD_RTR_RST_REASON, string CD_CLAIM, string CD_CTY_OFF_RESIDING, int? NO_HH_MMBR_BUD, string CASE_XREF, string AM_EARNED, string AM_UNEARND, string AM_CS_EXPENSE, string CASE_REVIEW_RSN, string DT_CASE_REVIEW, string DT_ISSUE, string AM_ISSUE, string DT_TRANSACTION, OutputParameter<int?> ID_SCI2_CASE_DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SCI2_CASE_DATA = new SqlParameter
            {
                ParameterName = "ID_SCI2_CASE_DATA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SCI2_CASE_DATA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SCI2_CASE_DATA,
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_CASELOG",
                    Value = ID_NMBR_CASELOG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_AUDIT_CASEACTION",
                    Value = ID_AUDIT_CASEACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REC_TYPE",
                    Size = 1,
                    Value = CD_REC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHKDGT",
                    Precision = 18,
                    Value = NO_CASE_CHKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CTY_OFF",
                    Size = 4,
                    Value = CD_CTY_OFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_HOH",
                    Size = 100,
                    Value = NM_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_ADDRESS",
                    Size = 50,
                    Value = TX_ADDRESS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CITY_STATE",
                    Size = 25,
                    Value = TX_CITY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TXT_ZIP",
                    Size = 10,
                    Value = TXT_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOME_TEL",
                    Size = 10,
                    Value = NO_HOME_TEL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EBT",
                    Size = 1,
                    Value = FL_EBT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_AUTH_REP",
                    Size = 50,
                    Value = NM_AUTH_REP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EBT_REP",
                    Size = 50,
                    Value = NM_EBT_REP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PRCSSN_STNDRD",
                    Size = 1,
                    Value = CD_PRCSSN_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EXPEDITE",
                    Size = 1,
                    Value = CD_EXPEDITE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_NTC_TYPE_IND",
                    Size = 2,
                    Value = CD_NTC_TYPE_IND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPLD",
                    Size = 8,
                    Value = DT_APPLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Size = 6,
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Size = 6,
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Size = 6,
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ISSUE_TYPE",
                    Size = 1,
                    Value = CD_ISSUE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ADVRS_GUARD",
                    Size = 1,
                    Value = CD_ADVRS_GUARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RESOURCE",
                    Size = 5,
                    Value = AM_RESOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_TMP_WRKR_NMBR",
                    Size = 3,
                    Value = NO_TMP_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DEP_CARE",
                    Size = 4,
                    Value = AM_DEP_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MED_EXP",
                    Size = 5,
                    Value = AM_MED_EXP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RENT_MORT",
                    Size = 7,
                    Value = AM_RENT_MORT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PROP_TAX",
                    Size = 7,
                    Value = AM_PROP_TAX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PROP_INS",
                    Size = 7,
                    Value = AM_PROP_INS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_OTHER_EXP",
                    Size = 7,
                    Value = AM_OTHER_EXP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_UTIL_TYPE",
                    Size = 1,
                    Value = CD_UTIL_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTILITY",
                    Size = 7,
                    Value = AM_UTILITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_HH_TYPE",
                    Size = 1,
                    Value = CD_HH_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE_INDCTR",
                    Size = 1,
                    Value = CD_LANGUAGE_INDCTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RPRTNG_RQRMNT",
                    Size = 1,
                    Value = CD_RPRTNG_RQRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_MMBRS",
                    Value = NO_HH_MMBRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GROSS_INCOME_TESTED",
                    Size = 5,
                    Value = GROSS_INCOME_TESTED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NET_INCOME_TESTED",
                    Size = 5,
                    Value = NET_INCOME_TESTED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXC_2040",
                    Size = 5,
                    Value = EXC_2040 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STND_DED",
                    Size = 5,
                    Value = STND_DED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADJ_INC",
                    Size = 5,
                    Value = ADJ_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SHL_DED",
                    Size = 5,
                    Value = SHL_DED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NET_INC",
                    Size = 5,
                    Value = NET_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TFP",
                    Size = 5,
                    Value = TFP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RATE_REDUC",
                    Size = 5,
                    Value = RATE_REDUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TOT_SHL",
                    Size = 5,
                    Value = TOT_SHL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RETRO_RESTORE",
                    Size = 5,
                    Value = AM_RETRO_RESTORE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECOUP",
                    Size = 5,
                    Value = AM_RECOUP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_COMBINED",
                    Size = 5,
                    Value = AM_COMBINED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ALLOTMENT",
                    Size = 5,
                    Value = AM_ALLOTMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRANSACTION",
                    Size = 1,
                    Value = CD_TRANSACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RTR_RST_REASON",
                    Size = 2,
                    Value = CD_RTR_RST_REASON ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CLAIM",
                    Size = 2,
                    Value = CD_CLAIM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CTY_OFF_RESIDING",
                    Size = 4,
                    Value = CD_CTY_OFF_RESIDING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_MMBR_BUD",
                    Value = NO_HH_MMBR_BUD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_XREF",
                    Size = 1,
                    Value = CASE_XREF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_EARNED",
                    Size = 5,
                    Value = AM_EARNED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNEARND",
                    Size = 5,
                    Value = AM_UNEARND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_EXPENSE",
                    Size = 5,
                    Value = AM_CS_EXPENSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_REVIEW_RSN",
                    Size = 50,
                    Value = CASE_REVIEW_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_REVIEW",
                    Size = 9,
                    Value = DT_CASE_REVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ISSUE",
                    Size = 9,
                    Value = DT_ISSUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ISSUE",
                    Size = 5,
                    Value = AM_ISSUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_TRANSACTION",
                    Size = 8,
                    Value = DT_TRANSACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SCI2_CASE_DATA] @ID_SCI2_CASE_DATA OUTPUT, @ID_NMBR_CASELOG, @ID_AUDIT_CASEACTION, @ID_CASE_NMBR, @CD_REC_TYPE, @NO_CASE, @NO_CASE_CHKDGT, @CD_CTY_OFF, @NM_HOH, @TX_ADDRESS, @TX_CITY_STATE, @TXT_ZIP, @NO_HOME_TEL, @FL_EBT, @NM_AUTH_REP, @NM_EBT_REP, @CD_PRCSSN_STNDRD, @CD_EXPEDITE, @CD_RJCTN_CLSR, @CD_NTC_TYPE_IND, @DT_APPLD, @DT_CERT_STRT, @DT_CERT_END, @DT_STRT_ISSNC, @CD_ISSUE_TYPE, @CD_ADVRS_GUARD, @AM_RESOURCE, @NO_WRKR_NMBR, @NO_TMP_WRKR_NMBR, @AM_DEP_CARE, @AM_MED_EXP, @AM_RENT_MORT, @AM_PROP_TAX, @AM_PROP_INS, @AM_OTHER_EXP, @CD_UTIL_TYPE, @AM_UTILITY, @CD_HH_TYPE, @CD_LANGUAGE_INDCTR, @CD_RPRTNG_RQRMNT, @CD_PAST_DUE_RSN, @NO_HH_MMBRS, @GROSS_INCOME_TESTED, @NET_INCOME_TESTED, @EXC_2040, @STND_DED, @ADJ_INC, @SHL_DED, @NET_INC, @TFP, @RATE_REDUC, @TOT_SHL, @AM_RETRO_RESTORE, @AM_RECOUP, @AM_COMBINED, @AM_ALLOTMENT, @CD_TRANSACTION, @CD_RTR_RST_REASON, @CD_CLAIM, @CD_CTY_OFF_RESIDING, @NO_HH_MMBR_BUD, @CASE_XREF, @AM_EARNED, @AM_UNEARND, @AM_CS_EXPENSE, @CASE_REVIEW_RSN, @DT_CASE_REVIEW, @DT_ISSUE, @AM_ISSUE, @DT_TRANSACTION", sqlParameters, cancellationToken);

            ID_SCI2_CASE_DATA.SetValue(parameterID_SCI2_CASE_DATA.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SCI2_MMBR_DATAAsync(int? ID_NMBR_CASELOG, int? ID_SCI2_CASE_DATA, int? ID_CASE_NMBR, int? ID_MMBR, string CD_REC_TYPE, int? NO_DEPENDENT_NBR, string NO_SSN, string NM_DEPENDENT, string CD_SEX, string CD_RACE, string DT_DOB, string CD_WORK_REG, string CD_CERT_ELIG, string AM_EARNED_INC, string AM_UNERND_INC, string AM_PA, string AM_SSI_VA, string CD_EARNED_INC_TYPE, string CD_UNERND_INC_TYPE, string CD_PA_TYPE, string CD_SSI_TYPE, string AM_SSA, string AM_MEDICARE, string AM_CS_RCVD, string AM_CS_PAID, string CD_MEDICARE_TYPE, string CD_CS_RCVD_TYPE, string CD_CS_PAID_TYPE, string PA_FILE_NBR, string PA_CASE_NBR, string CHILD_SUPPORT_NBR, string ENUM, OutputParameter<int?> ID_SCI2_MMBR_DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SCI2_MMBR_DATA = new SqlParameter
            {
                ParameterName = "ID_SCI2_MMBR_DATA",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SCI2_MMBR_DATA?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SCI2_MMBR_DATA,
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_CASELOG",
                    Value = ID_NMBR_CASELOG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SCI2_CASE_DATA",
                    Value = ID_SCI2_CASE_DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REC_TYPE",
                    Size = 1,
                    Value = CD_REC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_DEPENDENT_NBR",
                    Value = NO_DEPENDENT_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DEPENDENT",
                    Size = 100,
                    Value = NM_DEPENDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SEX",
                    Size = 1,
                    Value = CD_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Size = 2,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DOB",
                    Size = 10,
                    Value = DT_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WORK_REG",
                    Size = 1,
                    Value = CD_WORK_REG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_EARNED_INC",
                    Size = 5,
                    Value = AM_EARNED_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INC",
                    Size = 5,
                    Value = AM_UNERND_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PA",
                    Size = 5,
                    Value = AM_PA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SSI_VA",
                    Size = 5,
                    Value = AM_SSI_VA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EARNED_INC_TYPE",
                    Size = 1,
                    Value = CD_EARNED_INC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_UNERND_INC_TYPE",
                    Size = 1,
                    Value = CD_UNERND_INC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PA_TYPE",
                    Size = 1,
                    Value = CD_PA_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SSI_TYPE",
                    Size = 1,
                    Value = CD_SSI_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SSA",
                    Size = 5,
                    Value = AM_SSA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEDICARE",
                    Size = 5,
                    Value = AM_MEDICARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_RCVD",
                    Size = 5,
                    Value = AM_CS_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_PAID",
                    Size = 5,
                    Value = AM_CS_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MEDICARE_TYPE",
                    Size = 1,
                    Value = CD_MEDICARE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CS_RCVD_TYPE",
                    Size = 1,
                    Value = CD_CS_RCVD_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CS_PAID_TYPE",
                    Size = 1,
                    Value = CD_CS_PAID_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PA_FILE_NBR",
                    Size = 10,
                    Value = PA_FILE_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PA_CASE_NBR",
                    Size = 10,
                    Value = PA_CASE_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CHILD_SUPPORT_NBR",
                    Size = 10,
                    Value = CHILD_SUPPORT_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ENUM",
                    Size = 1,
                    Value = ENUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SCI2_MMBR_DATA] @ID_SCI2_MMBR_DATA OUTPUT, @ID_NMBR_CASELOG, @ID_SCI2_CASE_DATA, @ID_CASE_NMBR, @ID_MMBR, @CD_REC_TYPE, @NO_DEPENDENT_NBR, @NO_SSN, @NM_DEPENDENT, @CD_SEX, @CD_RACE, @DT_DOB, @CD_WORK_REG, @CD_CERT_ELIG, @AM_EARNED_INC, @AM_UNERND_INC, @AM_PA, @AM_SSI_VA, @CD_EARNED_INC_TYPE, @CD_UNERND_INC_TYPE, @CD_PA_TYPE, @CD_SSI_TYPE, @AM_SSA, @AM_MEDICARE, @AM_CS_RCVD, @AM_CS_PAID, @CD_MEDICARE_TYPE, @CD_CS_RCVD_TYPE, @CD_CS_PAID_TYPE, @PA_FILE_NBR, @PA_CASE_NBR, @CHILD_SUPPORT_NBR, @ENUM", sqlParameters, cancellationToken);

            ID_SCI2_MMBR_DATA.SetValue(parameterID_SCI2_MMBR_DATA.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SECURITYAsync(string ID_USER, string ID_PAYROLL, string CD_PSSWRD, string CD_ROLE, string FL_ACTIVE, string FL_SUPERVISOR, string CD_CNTY, string NM_FULL_NAME, string TX_COMMENT, string CD_WRKR_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PAYROLL",
                    Size = 9,
                    Value = ID_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PSSWRD",
                    Size = 20,
                    Value = CD_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ROLE",
                    Size = 15,
                    Value = CD_ROLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUPERVISOR",
                    Size = 1,
                    Value = FL_SUPERVISOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_FULL_NAME",
                    Size = 50,
                    Value = NM_FULL_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_COMMENT",
                    Size = 256,
                    Value = TX_COMMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WRKR_NMBR",
                    Size = 3,
                    Value = CD_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SECURITY] @ID_USER, @ID_PAYROLL, @CD_PSSWRD, @CD_ROLE, @FL_ACTIVE, @FL_SUPERVISOR, @CD_CNTY, @NM_FULL_NAME, @TX_COMMENT, @CD_WRKR_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SECURITY_NEWAsync(string ID_USER, string CD_PAYROLL, string CD_CNTY, string CD_PSSWRD, string CD_ROLE, string FL_ACTIVE, string FL_SUPERVISOR, string NM_FULL_NAME, string FL_NEWUSER, string TX_COMMENT, string CD_WRKR_NMBR, string FL_TEST, DateTime? DT_PSSWRD, string FL_WF, string FL_ADDI, string FL_DSNAP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PAYROLL",
                    Size = 9,
                    Value = CD_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PSSWRD",
                    Size = 30,
                    Value = CD_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ROLE",
                    Size = 15,
                    Value = CD_ROLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUPERVISOR",
                    Size = 1,
                    Value = FL_SUPERVISOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_FULL_NAME",
                    Size = 50,
                    Value = NM_FULL_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NEWUSER",
                    Size = 1,
                    Value = FL_NEWUSER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_COMMENT",
                    Size = 256,
                    Value = TX_COMMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WRKR_NMBR",
                    Size = 3,
                    Value = CD_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TEST",
                    Size = 1,
                    Value = FL_TEST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PSSWRD",
                    Value = DT_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WF",
                    Size = 1,
                    Value = FL_WF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADDI",
                    Size = 1,
                    Value = FL_ADDI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSNAP",
                    Size = 1,
                    Value = FL_DSNAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SECURITY_NEW] @ID_USER, @CD_PAYROLL, @CD_CNTY, @CD_PSSWRD, @CD_ROLE, @FL_ACTIVE, @FL_SUPERVISOR, @NM_FULL_NAME, @FL_NEWUSER, @TX_COMMENT, @CD_WRKR_NMBR, @FL_TEST, @DT_PSSWRD, @FL_WF, @FL_ADDI, @FL_DSNAP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ins_SemiAnnualResult>> Ins_SemiAnnualAsync(DateTime? ID_DATE_CREATED, int? ID_CASE_NUMBER, decimal? NO_CASE, string ID_USER, int? ID_NMBR_LOGIN, string FL_REPL_FRM_AUTH, string CD_SR_INCOMP_STAT, DateTime? DT_SR_INCOMP_DT, string CD_SR_COMP_STAT, DateTime? DT_SR_COMP, string SCI_MSG, DateTime? DT_FRM_RCVD, DateTime? DT_REPL_FRM, string NO_WRKR_NMBR, string NM_HOH, string SR_CODE, OutputParameter<int?> ID_AUDIT_SEMIANNUAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_AUDIT_SEMIANNUAL = new SqlParameter
            {
                ParameterName = "ID_AUDIT_SEMIANNUAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_AUDIT_SEMIANNUAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_AUDIT_SEMIANNUAL,
                new SqlParameter
                {
                    ParameterName = "ID_DATE_CREATED",
                    Value = ID_DATE_CREATED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NUMBER",
                    Value = ID_CASE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_LOGIN",
                    Value = ID_NMBR_LOGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REPL_FRM_AUTH",
                    Size = 1,
                    Value = FL_REPL_FRM_AUTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SR_INCOMP_STAT",
                    Size = 1,
                    Value = CD_SR_INCOMP_STAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SR_INCOMP_DT",
                    Value = DT_SR_INCOMP_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SR_COMP_STAT",
                    Size = 1,
                    Value = CD_SR_COMP_STAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SR_COMP",
                    Value = DT_SR_COMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_MSG",
                    Size = -1,
                    Value = SCI_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DT_FRM_RCVD",
                    Value = DT_FRM_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REPL_FRM",
                    Value = DT_REPL_FRM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_HOH",
                    Size = 100,
                    Value = NM_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SR_CODE",
                    Size = 1,
                    Value = SR_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ins_SemiAnnualResult>("EXEC @returnValue = [dbo].[Ins_SemiAnnual] @ID_AUDIT_SEMIANNUAL OUTPUT, @ID_DATE_CREATED, @ID_CASE_NUMBER, @NO_CASE, @ID_USER, @ID_NMBR_LOGIN, @FL_REPL_FRM_AUTH, @CD_SR_INCOMP_STAT, @DT_SR_INCOMP_DT, @CD_SR_COMP_STAT, @DT_SR_COMP, @SCI_MSG, @DT_FRM_RCVD, @DT_REPL_FRM, @NO_WRKR_NMBR, @NM_HOH, @SR_CODE", sqlParameters, cancellationToken);

            ID_AUDIT_SEMIANNUAL.SetValue(parameterID_AUDIT_SEMIANNUAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SHELTER_EXPENSEAsync(int? ID_MMBR1, int? ID_MMBR2, int? ID_OWNRSHP, int? ID_SHLTR_DWELLNG_TYPE, int? ID_SHLTR_EXPNS_TYPE, decimal? AM_ACTL_SHLTR_EXPNS, decimal? AM_SHLTR_EXPNS_MNTHLY, string CD_MONTH, string FL_ASSSTD_BY_OTHR, string FL_NM_OUTSIDE_HH, int? ID_FRQNCY_SHLTR_EXPNS, int? ID_VRFCTN_SHLTR_EXPNS, string TX_VRFCTN_SHLTR_EXPNS, OutputParameter<int?> ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SHLTR_EXPNS = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SHLTR_EXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_SHLTR_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NM_OUTSIDE_HH",
                    Size = 1,
                    Value = FL_NM_OUTSIDE_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_SHLTR_EXPNS",
                    Value = ID_FRQNCY_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS",
                    Value = ID_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_SHLTR_EXPNS",
                    Value = TX_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SHELTER_EXPENSE] @ID_SHLTR_EXPNS OUTPUT, @ID_MMBR1, @ID_MMBR2, @ID_OWNRSHP, @ID_SHLTR_DWELLNG_TYPE, @ID_SHLTR_EXPNS_TYPE, @AM_ACTL_SHLTR_EXPNS, @AM_SHLTR_EXPNS_MNTHLY, @CD_MONTH, @FL_ASSSTD_BY_OTHR, @FL_NM_OUTSIDE_HH, @ID_FRQNCY_SHLTR_EXPNS, @ID_VRFCTN_SHLTR_EXPNS, @TX_VRFCTN_SHLTR_EXPNS", sqlParameters, cancellationToken);

            ID_SHLTR_EXPNS.SetValue(parameterID_SHLTR_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SHELTER_EXPENSE_OTHER_PAYERAsync(int? ID_MMBR, int? ID_SHLTR_EXPNS, decimal? AM_SHLTR_EXPNS_OTHR_PAYER, DateTime? DT_SHLTR_EXPNS_OTHR_PAYER, string FL_OUTSIDE_RSDNT, string FL_SHLTR_EXPNS_PAY_MMBR, int? ID_VRFCTN_SHLTR_EXPNS_OP, string TX_VRFCTN_SHLTR_EXPNS_OP, OutputParameter<short?> ID_SHLTR_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SHLTR_EXPNS_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SHLTR_EXPNS_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SHLTR_EXPNS_OTHR_PAYER",
                    Value = DT_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_RSDNT",
                    Size = 1,
                    Value = FL_OUTSIDE_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SHLTR_EXPNS_PAY_MMBR",
                    Size = 1,
                    Value = FL_SHLTR_EXPNS_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS_OP",
                    Value = ID_VRFCTN_SHLTR_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_SHLTR_EXPNS_OP",
                    Value = TX_VRFCTN_SHLTR_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SHELTER_EXPENSE_OTHER_PAYER] @ID_SHLTR_EXPNS_OTHR_PAYER OUTPUT, @ID_MMBR, @ID_SHLTR_EXPNS, @AM_SHLTR_EXPNS_OTHR_PAYER, @DT_SHLTR_EXPNS_OTHR_PAYER, @FL_OUTSIDE_RSDNT, @FL_SHLTR_EXPNS_PAY_MMBR, @ID_VRFCTN_SHLTR_EXPNS_OP, @TX_VRFCTN_SHLTR_EXPNS_OP", sqlParameters, cancellationToken);

            ID_SHLTR_EXPNS_OTHR_PAYER.SetValue(parameterID_SHLTR_EXPNS_OTHR_PAYER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SHLTR_EXP_NOTESAsync(string TX_SHLTR_OTHR, OutputParameter<int?> ID_REF_SHLTR_OTHR, OutputParameter<int?> ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_SHLTR_OTHR = new SqlParameter
            {
                ParameterName = "ID_REF_SHLTR_OTHR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_SHLTR_OTHR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_SHLTR_EXPNS = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_SHLTR_OTHR,
                parameterID_SHLTR_EXPNS,
                new SqlParameter
                {
                    ParameterName = "TX_SHLTR_OTHR",
                    Value = TX_SHLTR_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SHLTR_EXP_NOTES] @ID_REF_SHLTR_OTHR OUTPUT, @ID_SHLTR_EXPNS OUTPUT, @TX_SHLTR_OTHR", sqlParameters, cancellationToken);

            ID_REF_SHLTR_OTHR.SetValue(parameterID_REF_SHLTR_OTHR.Value);
            ID_SHLTR_EXPNS.SetValue(parameterID_SHLTR_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SHLTR_UNEARNAsync(int? ID_UNERND_INCM, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, int? ID_SHLTR_EXPNS_OTHR_PAYER, decimal? AM_UNERND_MNTHLY, string CD_MONTH, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SHLTR_UNEARN] @ID_UNERND_INCM, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @ID_SHLTR_EXPNS_OTHR_PAYER, @AM_UNERND_MNTHLY, @CD_MONTH, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SHLTREXPTYPBYIDMMBRAsync(int? ID_MMBR1, int? ID_OWNRSHP, int? ID_SHLTR_DWELLNG_TYPE, int? ID_SHLTR_EXPNS_TYPE, string TX_SHLTR_OTHR, OutputParameter<int?> ID_SHLTR_EXPNS, OutputParameter<int?> ID_REF_SHLTR_OTHR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SHLTR_EXPNS = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_REF_SHLTR_OTHR = new SqlParameter
            {
                ParameterName = "ID_REF_SHLTR_OTHR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_SHLTR_OTHR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SHLTR_EXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_REF_SHLTR_OTHR,
                new SqlParameter
                {
                    ParameterName = "TX_SHLTR_OTHR",
                    Value = TX_SHLTR_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SHLTREXPTYPBYIDMMBR] @ID_SHLTR_EXPNS OUTPUT, @ID_MMBR1, @ID_OWNRSHP, @ID_SHLTR_DWELLNG_TYPE, @ID_SHLTR_EXPNS_TYPE, @ID_REF_SHLTR_OTHR OUTPUT, @TX_SHLTR_OTHR", sqlParameters, cancellationToken);

            ID_SHLTR_EXPNS.SetValue(parameterID_SHLTR_EXPNS.Value);
            ID_REF_SHLTR_OTHR.SetValue(parameterID_REF_SHLTR_OTHR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_SPECIAL_REOPENAsync(int? ID_CASE_NUMBER, string NOCASE, int? ID_USER, int? ID_NMBR_LOGIN, string APPLICATION_DATE, string CERT_FROM, string CERT_TO, string START_ISS, string TRANSACTION_CD, string CLOSRUE_CD, string SPECIAL_REOPEN_TYPE, string SCI_MSG, OutputParameter<int?> ID_AUDIT_SPECIAL_REOPEN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_AUDIT_SPECIAL_REOPEN = new SqlParameter
            {
                ParameterName = "ID_AUDIT_SPECIAL_REOPEN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_AUDIT_SPECIAL_REOPEN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_AUDIT_SPECIAL_REOPEN,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NUMBER",
                    Value = ID_CASE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Size = 9,
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_LOGIN",
                    Value = ID_NMBR_LOGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "APPLICATION_DATE",
                    Size = 8,
                    Value = APPLICATION_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CERT_FROM",
                    Size = 6,
                    Value = CERT_FROM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CERT_TO",
                    Size = 6,
                    Value = CERT_TO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "START_ISS",
                    Size = 6,
                    Value = START_ISS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TRANSACTION_CD",
                    Size = 2,
                    Value = TRANSACTION_CD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CLOSRUE_CD",
                    Size = 2,
                    Value = CLOSRUE_CD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SPECIAL_REOPEN_TYPE",
                    Size = 1,
                    Value = SPECIAL_REOPEN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_MSG",
                    Size = -1,
                    Value = SCI_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_SPECIAL_REOPEN] @ID_AUDIT_SPECIAL_REOPEN OUTPUT, @ID_CASE_NUMBER, @NOCASE, @ID_USER, @ID_NMBR_LOGIN, @APPLICATION_DATE, @CERT_FROM, @CERT_TO, @START_ISS, @TRANSACTION_CD, @CLOSRUE_CD, @SPECIAL_REOPEN_TYPE, @SCI_MSG", sqlParameters, cancellationToken);

            ID_AUDIT_SPECIAL_REOPEN.SetValue(parameterID_AUDIT_SPECIAL_REOPEN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_STRIKEAsync(DateTime? DT_STRK_END, int? ID_EMPLYMNT, decimal? AM_STRKPAY_MNTHLY, decimal? AM_STRK_PAY, string CD_MONTH, DateTime? DT_STRK_STRT, string FL_ELGBL_FS_PRIOR_STRK, decimal? ID_FRQNCY_PAY_STRK, int? ID_VRFCTN_STRK, int? ID_UNERND_INCM, string TX_VRFCTN_STRK, OutputParameter<int?> ID_STRKR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_STRKR = new SqlParameter
            {
                ParameterName = "ID_STRKR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_STRKR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DT_STRK_END",
                    Value = DT_STRK_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterID_STRKR,
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_STRKPAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_STRKPAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_STRK_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_STRK_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRK_STRT",
                    Value = DT_STRK_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_FS_PRIOR_STRK",
                    Size = 1,
                    Value = FL_ELGBL_FS_PRIOR_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PAY_STRK",
                    Precision = 1,
                    Value = ID_FRQNCY_PAY_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_STRK",
                    Value = ID_VRFCTN_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_STRK",
                    Value = TX_VRFCTN_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_STRIKE] @DT_STRK_END, @ID_STRKR OUTPUT, @ID_EMPLYMNT, @AM_STRKPAY_MNTHLY, @AM_STRK_PAY, @CD_MONTH, @DT_STRK_STRT, @FL_ELGBL_FS_PRIOR_STRK, @ID_FRQNCY_PAY_STRK, @ID_VRFCTN_STRK, @ID_UNERND_INCM, @TX_VRFCTN_STRK", sqlParameters, cancellationToken);

            ID_STRKR.SetValue(parameterID_STRKR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_STUDENTAsync(int? ID_MMBR, string CD_MONTH, string CD_CERT_ELIG, string CD_CERT_ELIG2, string FL_CHILD_CARE_PRVDR, string FL_ELGBL_STDNT, string FL_EMPLYD_PRTTM, string FL_FIT, string FL_HGHR_LRNNG, string FL_JOBS_TRNNG, string FL_MEAL_TCKT, string FL_OJT, string FL_PLUS_50_MEALS_CVRD, string FL_PRNT_OF_CHLD, string FL_RCVNG_TANF, string FL_SNGL_PRNT_STDNT, string FL_TITLE_IV, string FL_WORK_STDY_PRGRM, int? ID_VRFCTN_STUDENT, string TX_VRFCTN_STUDENT, OutputParameter<int?> ID_STDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_STDNT = new SqlParameter
            {
                ParameterName = "ID_STDNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_STDNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_STDNT,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG2",
                    Size = 1,
                    Value = CD_CERT_ELIG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CHILD_CARE_PRVDR",
                    Size = 1,
                    Value = FL_CHILD_CARE_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_STDNT",
                    Size = 1,
                    Value = FL_ELGBL_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EMPLYD_PRTTM",
                    Size = 1,
                    Value = FL_EMPLYD_PRTTM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FIT",
                    Size = 1,
                    Value = FL_FIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HGHR_LRNNG",
                    Size = 1,
                    Value = FL_HGHR_LRNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_JOBS_TRNNG",
                    Size = 1,
                    Value = FL_JOBS_TRNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MEAL_TCKT",
                    Size = 1,
                    Value = FL_MEAL_TCKT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OJT",
                    Size = 1,
                    Value = FL_OJT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PLUS_50_MEALS_CVRD",
                    Size = 1,
                    Value = FL_PLUS_50_MEALS_CVRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRNT_OF_CHLD",
                    Size = 1,
                    Value = FL_PRNT_OF_CHLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RCVNG_TANF",
                    Size = 1,
                    Value = FL_RCVNG_TANF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SNGL_PRNT_STDNT",
                    Size = 1,
                    Value = FL_SNGL_PRNT_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TITLE_IV",
                    Size = 1,
                    Value = FL_TITLE_IV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WORK_STDY_PRGRM",
                    Size = 1,
                    Value = FL_WORK_STDY_PRGRM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_STUDENT",
                    Value = ID_VRFCTN_STUDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_STUDENT",
                    Value = TX_VRFCTN_STUDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_STUDENT] @ID_STDNT OUTPUT, @ID_MMBR, @CD_MONTH, @CD_CERT_ELIG, @CD_CERT_ELIG2, @FL_CHILD_CARE_PRVDR, @FL_ELGBL_STDNT, @FL_EMPLYD_PRTTM, @FL_FIT, @FL_HGHR_LRNNG, @FL_JOBS_TRNNG, @FL_MEAL_TCKT, @FL_OJT, @FL_PLUS_50_MEALS_CVRD, @FL_PRNT_OF_CHLD, @FL_RCVNG_TANF, @FL_SNGL_PRNT_STDNT, @FL_TITLE_IV, @FL_WORK_STDY_PRGRM, @ID_VRFCTN_STUDENT, @TX_VRFCTN_STUDENT", sqlParameters, cancellationToken);

            ID_STDNT.SetValue(parameterID_STDNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_TANF_MMBR_INCLUDEDAsync(int? ID_UNERND_INCM, int? ID_MMBR, OutputParameter<int?> ID_TANF_MMBR_INCLD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_TANF_MMBR_INCLD = new SqlParameter
            {
                ParameterName = "ID_TANF_MMBR_INCLD",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_TANF_MMBR_INCLD?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_TANF_MMBR_INCLD,
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_TANF_MMBR_INCLUDED] @ID_TANF_MMBR_INCLD OUTPUT, @ID_UNERND_INCM, @ID_MMBR", sqlParameters, cancellationToken);

            ID_TANF_MMBR_INCLD.SetValue(parameterID_TANF_MMBR_INCLD.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_TRIPAsync(int? ID_PRVDR_NAME, decimal? AM_FLAT_FEE, decimal? AM_PAY_MILES_MNTHLY, string FL_DRVS_SELF, string FL_PAY_FLAT_FEE, string FL_PAY_PER_MILE, decimal? ID_VRFCTN_TRIP, decimal? NO_MILES_PER_MNTH, OutputParameter<int?> ID_TRIPS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_TRIPS = new SqlParameter
            {
                ParameterName = "ID_TRIPS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_TRIPS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_TRIPS,
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_FLAT_FEE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MILES_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MILES_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DRVS_SELF",
                    Size = 1,
                    Value = FL_DRVS_SELF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_FLAT_FEE",
                    Size = 1,
                    Value = FL_PAY_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_PER_MILE",
                    Size = 1,
                    Value = FL_PAY_PER_MILE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_TRIP",
                    Precision = 2,
                    Value = ID_VRFCTN_TRIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MILES_PER_MNTH",
                    Precision = 3,
                    Value = NO_MILES_PER_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_TRIP] @ID_TRIPS OUTPUT, @ID_PRVDR_NAME, @AM_FLAT_FEE, @AM_PAY_MILES_MNTHLY, @FL_DRVS_SELF, @FL_PAY_FLAT_FEE, @FL_PAY_PER_MILE, @ID_VRFCTN_TRIP, @NO_MILES_PER_MNTH", sqlParameters, cancellationToken);

            ID_TRIPS.SetValue(parameterID_TRIPS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UE_UNEARNAsync(int? ID_UNERND_INCM, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, int? ID_UTLTY_EXPNS_OTHR_PAYER, decimal? AM_UNERND_MNTHLY, string CD_MONTH, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UE_UNEARN] @ID_UNERND_INCM, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @ID_UTLTY_EXPNS_OTHR_PAYER, @AM_UNERND_MNTHLY, @CD_MONTH, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UNEARNED_INCOMEAsync(int? ID_CS_AMNT, int? ID_DC_OTHR_PAY, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, int? ID_SHLTR_EXPNS_OTHR_PAYER, decimal? AM_UNERND_MNTHLY, decimal? AM_UNERND_VALUE1, decimal? AM_UNERND_VALUE2, DateTime? DT_RCVD, string FL_DSBLTY, decimal? ID_FRQNCY_RECPT, int? ID_VRFCTN_UNERND_INCM, decimal? ID_WORK_CODE, string ID_WORK_CODE_FLAG, string CD_MONTH, int? NO_PYMNT_MNTHS, string TX_VRFCTN_UNERND_INCM, OutputParameter<int?> ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_INCM = new SqlParameter
            {
                ParameterName = "ID_UNERND_INCM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_INCM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_INCM,
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_VALUE1",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_VALUE1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_VALUE2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_VALUE2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RCVD",
                    Value = DT_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSBLTY",
                    Size = 1,
                    Value = FL_DSBLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_RECPT",
                    Precision = 1,
                    Value = ID_FRQNCY_RECPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UNERND_INCM",
                    Value = ID_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Precision = 2,
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE_FLAG",
                    Size = 1,
                    Value = ID_WORK_CODE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_PYMNT_MNTHS",
                    Value = NO_PYMNT_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UNEARNED_INCOME] @ID_UNERND_INCM OUTPUT, @ID_CS_AMNT, @ID_DC_OTHR_PAY, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @ID_SHLTR_EXPNS_OTHR_PAYER, @AM_UNERND_MNTHLY, @AM_UNERND_VALUE1, @AM_UNERND_VALUE2, @DT_RCVD, @FL_DSBLTY, @ID_FRQNCY_RECPT, @ID_VRFCTN_UNERND_INCM, @ID_WORK_CODE, @ID_WORK_CODE_FLAG, @CD_MONTH, @NO_PYMNT_MNTHS, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            ID_UNERND_INCM.SetValue(parameterID_UNERND_INCM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UNEARNED_INCOME_RESOURCEAsync(int? ID_MMBR, decimal? AM_UNERND_MNTHLY, decimal? AM_UNERND_VALUE1, string CD_MONTH, decimal? ID_FRQNCY_RECPT, int? ID_VRFCTN_UNERND_INCM, OutputParameter<int?> ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_INCM = new SqlParameter
            {
                ParameterName = "ID_UNERND_INCM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_INCM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_INCM,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_VALUE1",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_VALUE1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_RECPT",
                    Precision = 1,
                    Value = ID_FRQNCY_RECPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UNERND_INCM",
                    Value = ID_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UNEARNED_INCOME_RESOURCE] @ID_UNERND_INCM OUTPUT, @ID_MMBR, @AM_UNERND_MNTHLY, @AM_UNERND_VALUE1, @CD_MONTH, @ID_FRQNCY_RECPT, @ID_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            ID_UNERND_INCM.SetValue(parameterID_UNERND_INCM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UNEARNED_INCOME_STRIKEAsync(int? ID_MMBR, decimal? AM_UNERND_MNTHLY, decimal? AM_UNERND_VALUE1, string CD_MONTH, decimal? ID_FRQNCY_RECPT, int? ID_VRFCTN_UNERND_INCM, OutputParameter<int?> ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_INCM = new SqlParameter
            {
                ParameterName = "ID_UNERND_INCM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_INCM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_INCM,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_VALUE1",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_VALUE1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_RECPT",
                    Precision = 1,
                    Value = ID_FRQNCY_RECPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UNERND_INCM",
                    Value = ID_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UNEARNED_INCOME_STRIKE] @ID_UNERND_INCM OUTPUT, @ID_MMBR, @AM_UNERND_MNTHLY, @AM_UNERND_VALUE1, @CD_MONTH, @ID_FRQNCY_RECPT, @ID_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            ID_UNERND_INCM.SetValue(parameterID_UNERND_INCM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UNEARNED_PAYERAsync(int? ID_UNERND_INCM, short? ID_REF_UNERND_PAYER_TYPE, string NM_UNERND_PAYER, OutputParameter<int?> ID_UNERND_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_PAYER = new SqlParameter
            {
                ParameterName = "ID_UNERND_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_PAYER_TYPE",
                    Value = ID_REF_UNERND_PAYER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "NM_UNERND_PAYER",
                    Size = 45,
                    Value = NM_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UNEARNED_PAYER] @ID_UNERND_PAYER OUTPUT, @ID_UNERND_INCM, @ID_REF_UNERND_PAYER_TYPE, @NM_UNERND_PAYER", sqlParameters, cancellationToken);

            ID_UNERND_PAYER.SetValue(parameterID_UNERND_PAYER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UnearnedTypebyIDMmbrAsync(int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, OutputParameter<int?> ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_INCM = new SqlParameter
            {
                ParameterName = "ID_UNERND_INCM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_INCM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_INCM,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UnearnedTypebyIDMmbr] @ID_UNERND_INCM OUTPUT, @ID_MMBR, @ID_REF_UNERND_SUBTYPE", sqlParameters, cancellationToken);

            ID_UNERND_INCM.SetValue(parameterID_UNERND_INCM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UPDATE_NOTICE_TYPEAsync(int? ID_UPDT_NTC, int? ID_CASE_NMBR, int? ID_REF_NTC_TYPE, string CD_LANGUAGE_INDCTR, DateTime? DT_UPDT_NTC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UPDT_NTC",
                    Value = ID_UPDT_NTC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_NTC_TYPE",
                    Value = ID_REF_NTC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE_INDCTR",
                    Size = 1,
                    Value = CD_LANGUAGE_INDCTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_UPDT_NTC",
                    Value = DT_UPDT_NTC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UPDATE_NOTICE_TYPE] @ID_UPDT_NTC, @ID_CASE_NMBR, @ID_REF_NTC_TYPE, @CD_LANGUAGE_INDCTR, @DT_UPDT_NTC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Updt_ALIEN_STATUSAsync(int? ID_MMBR, string CD_ALIEN_RGSTRTN, string FL_QA_LPR, string FL_QA_SCTN_208, string FL_QA_SCTN_207, string FL_QA_SCTN_212, string FL_QA_SCTN_241, string FL_QA_SCTN_203, string FL_QA_SCTN_501, string FL_QA_SCTN_204, string FL_FS_SCTN_207, string FL_FS_SCTN_208, string FL_FS_SCTN_241, string FL_FS_SCTN_501, string FL_FS_SCTN_584, string FL_QAIND_LPR, string FL_QAIND_MLTRY_CNNCTN, string FL_QAIND_US__18, string FL_QAIND_US_BNFTS, string FL_QAIND_US___65, string FL_QAIND_US_QA__5, string FL_NONQAIND_HMONG, string FL_NONQAIND_LAO, string FL_NONQAIND_AMRCN_INDIAN, string FL_NONQAIND_ACT25_USC450, string FL_NONQAIND_ST_REGIS, string FL_NONQAIND_MICMAC, string FL_NONQAIND_ABENAKI, string FL_NONQAIND_KICKAPOO, OutputParameter<int?> ID_ALIEN_STATUS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ALIEN_STATUS = new SqlParameter
            {
                ParameterName = "ID_ALIEN_STATUS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ALIEN_STATUS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ALIEN_STATUS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ALIEN_RGSTRTN",
                    Size = 9,
                    Value = CD_ALIEN_RGSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_LPR",
                    Size = 1,
                    Value = FL_QA_LPR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_208",
                    Size = 1,
                    Value = FL_QA_SCTN_208 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_207",
                    Size = 1,
                    Value = FL_QA_SCTN_207 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_212",
                    Size = 1,
                    Value = FL_QA_SCTN_212 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_241",
                    Size = 1,
                    Value = FL_QA_SCTN_241 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_203",
                    Size = 1,
                    Value = FL_QA_SCTN_203 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_501",
                    Size = 1,
                    Value = FL_QA_SCTN_501 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_204",
                    Size = 1,
                    Value = FL_QA_SCTN_204 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_207",
                    Size = 1,
                    Value = FL_FS_SCTN_207 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_208",
                    Size = 1,
                    Value = FL_FS_SCTN_208 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_241",
                    Size = 1,
                    Value = FL_FS_SCTN_241 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_501",
                    Size = 1,
                    Value = FL_FS_SCTN_501 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_584",
                    Size = 1,
                    Value = FL_FS_SCTN_584 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_LPR",
                    Size = 1,
                    Value = FL_QAIND_LPR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_MLTRY_CNNCTN",
                    Size = 1,
                    Value = FL_QAIND_MLTRY_CNNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US__18",
                    Size = 1,
                    Value = FL_QAIND_US__18 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US_BNFTS",
                    Size = 1,
                    Value = FL_QAIND_US_BNFTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US___65",
                    Size = 1,
                    Value = FL_QAIND_US___65 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US_QA__5",
                    Size = 1,
                    Value = FL_QAIND_US_QA__5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_HMONG",
                    Size = 1,
                    Value = FL_NONQAIND_HMONG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_LAO",
                    Size = 1,
                    Value = FL_NONQAIND_LAO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_AMRCN_INDIAN",
                    Size = 1,
                    Value = FL_NONQAIND_AMRCN_INDIAN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ACT25_USC450",
                    Size = 1,
                    Value = FL_NONQAIND_ACT25_USC450 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ST_REGIS",
                    Size = 1,
                    Value = FL_NONQAIND_ST_REGIS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_MICMAC",
                    Size = 1,
                    Value = FL_NONQAIND_MICMAC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ABENAKI",
                    Size = 1,
                    Value = FL_NONQAIND_ABENAKI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_KICKAPOO",
                    Size = 1,
                    Value = FL_NONQAIND_KICKAPOO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Updt_ALIEN_STATUS] @ID_ALIEN_STATUS OUTPUT, @ID_MMBR, @CD_ALIEN_RGSTRTN, @FL_QA_LPR, @FL_QA_SCTN_208, @FL_QA_SCTN_207, @FL_QA_SCTN_212, @FL_QA_SCTN_241, @FL_QA_SCTN_203, @FL_QA_SCTN_501, @FL_QA_SCTN_204, @FL_FS_SCTN_207, @FL_FS_SCTN_208, @FL_FS_SCTN_241, @FL_FS_SCTN_501, @FL_FS_SCTN_584, @FL_QAIND_LPR, @FL_QAIND_MLTRY_CNNCTN, @FL_QAIND_US__18, @FL_QAIND_US_BNFTS, @FL_QAIND_US___65, @FL_QAIND_US_QA__5, @FL_NONQAIND_HMONG, @FL_NONQAIND_LAO, @FL_NONQAIND_AMRCN_INDIAN, @FL_NONQAIND_ACT25_USC450, @FL_NONQAIND_ST_REGIS, @FL_NONQAIND_MICMAC, @FL_NONQAIND_ABENAKI, @FL_NONQAIND_KICKAPOO", sqlParameters, cancellationToken);

            ID_ALIEN_STATUS.SetValue(parameterID_ALIEN_STATUS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Updt_Form657Async(decimal? NO_CASE, string NO_TELEPHONE, DateTime? DT_NOTICE, DateTime? DT_FS_END, decimal? AM_FS_RCVD_MNTH_ONE, decimal? AM_FS_RCVD_MNTH_TWO, DateTime? DT_CERT_FROM, DateTime? DT_CERT_END, DateTime? DT_FS_REAPPLY, decimal? AM_BENE_CHNGE_FROM, decimal? AM_BENE_CHNGE_TO, DateTime? DT_BENE_EFFT, DateTime? DT_FS_BENE_STOP, DateTime? DT_FS_LAST_BENE, string TXT_FS_INFO_NEEDED, string TXT_FC_OTHR_ACT, string TXT_DEP_POLICY, string TXT_ACT_BECAUSE, string FL_FS_APPRV, string FL_FS_BENE, string FL_BENE_STOP, string FL_BENE_INFO, string FL_OTHR_ACT, string FL_ACT_BECAUSE, string FL_DEPT_POLICY, string FL_REV_ACT, string UPDT_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_TELEPHONE",
                    Size = 20,
                    Value = NO_TELEPHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DT_NOTICE",
                    Value = DT_NOTICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_FS_END",
                    Value = DT_FS_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AM_FS_RCVD_MNTH_ONE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_FS_RCVD_MNTH_ONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_FS_RCVD_MNTH_TWO",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_FS_RCVD_MNTH_TWO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_FROM",
                    Value = DT_CERT_FROM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_FS_REAPPLY",
                    Value = DT_FS_REAPPLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "AM_BENE_CHNGE_FROM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_BENE_CHNGE_FROM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_BENE_CHNGE_TO",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_BENE_CHNGE_TO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BENE_EFFT",
                    Value = DT_BENE_EFFT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_FS_BENE_STOP",
                    Value = DT_FS_BENE_STOP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_FS_LAST_BENE",
                    Value = DT_FS_LAST_BENE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TXT_FS_INFO_NEEDED",
                    Value = TXT_FS_INFO_NEEDED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TXT_FC_OTHR_ACT",
                    Value = TXT_FC_OTHR_ACT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TXT_DEP_POLICY",
                    Value = TXT_DEP_POLICY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TXT_ACT_BECAUSE",
                    Value = TXT_ACT_BECAUSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_APPRV",
                    Size = 1,
                    Value = FL_FS_APPRV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_BENE",
                    Size = 1,
                    Value = FL_FS_BENE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_BENE_STOP",
                    Size = 1,
                    Value = FL_BENE_STOP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_BENE_INFO",
                    Size = 1,
                    Value = FL_BENE_INFO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OTHR_ACT",
                    Size = 1,
                    Value = FL_OTHR_ACT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACT_BECAUSE",
                    Size = 1,
                    Value = FL_ACT_BECAUSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DEPT_POLICY",
                    Size = 1,
                    Value = FL_DEPT_POLICY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REV_ACT",
                    Size = 1,
                    Value = FL_REV_ACT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UPDT_TYPE",
                    Size = 1,
                    Value = UPDT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Updt_Form657] @NO_CASE, @NO_TELEPHONE, @DT_NOTICE, @DT_FS_END, @AM_FS_RCVD_MNTH_ONE, @AM_FS_RCVD_MNTH_TWO, @DT_CERT_FROM, @DT_CERT_END, @DT_FS_REAPPLY, @AM_BENE_CHNGE_FROM, @AM_BENE_CHNGE_TO, @DT_BENE_EFFT, @DT_FS_BENE_STOP, @DT_FS_LAST_BENE, @TXT_FS_INFO_NEEDED, @TXT_FC_OTHR_ACT, @TXT_DEP_POLICY, @TXT_ACT_BECAUSE, @FL_FS_APPRV, @FL_FS_BENE, @FL_BENE_STOP, @FL_BENE_INFO, @FL_OTHR_ACT, @FL_ACT_BECAUSE, @FL_DEPT_POLICY, @FL_REV_ACT, @UPDT_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Updt_Form879Async(string NO_CASE, DateTime? DT_STAMPS_END, string FL_BENEFITS, string FL_INTERVIEW, string FL_NOTIFY, DateTime? DT_BENEFITS, DateTime? DT_INTERVIEW, string FL_OFF, string UPDT_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STAMPS_END",
                    Value = DT_STAMPS_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_BENEFITS",
                    Size = 1,
                    Value = FL_BENEFITS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INTERVIEW",
                    Size = 1,
                    Value = FL_INTERVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NOTIFY",
                    Size = 1,
                    Value = FL_NOTIFY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BENEFITS",
                    Value = DT_BENEFITS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_INTERVIEW",
                    Value = DT_INTERVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OFF",
                    Size = 1,
                    Value = FL_OFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UPDT_TYPE",
                    Size = 1,
                    Value = UPDT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Updt_Form879] @NO_CASE, @DT_STAMPS_END, @FL_BENEFITS, @FL_INTERVIEW, @FL_NOTIFY, @DT_BENEFITS, @DT_INTERVIEW, @FL_OFF, @UPDT_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Updt_FormAPPTAsync(string NO_CASE, string FL_OFFICE, DateTime? DT_OFF_IVIEW, DateTime? DT_TELE_IVIEW, string TXT_WRKR_NOTES, string UPDT_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OFFICE",
                    Size = 1,
                    Value = FL_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_OFF_IVIEW",
                    Value = DT_OFF_IVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_TELE_IVIEW",
                    Value = DT_TELE_IVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TXT_WRKR_NOTES",
                    Value = TXT_WRKR_NOTES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                new SqlParameter
                {
                    ParameterName = "UPDT_TYPE",
                    Size = 1,
                    Value = UPDT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Updt_FormAPPT] @NO_CASE, @FL_OFFICE, @DT_OFF_IVIEW, @DT_TELE_IVIEW, @TXT_WRKR_NOTES, @UPDT_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Updt_MEDICAL_NOTESAsync(int? ID_MDCL_EXPNS, decimal? ID_REF_MDCL_NOTE_TYPE, string TX_MDCL_NOTES_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_MDCL_NOTE_TYPE",
                    Precision = 2,
                    Value = ID_REF_MDCL_NOTE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Updt_MEDICAL_NOTES] @ID_MDCL_EXPNS, @ID_REF_MDCL_NOTE_TYPE, @TX_MDCL_NOTES_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_Updt_PIV_MMBR_RLTNAsync(int? ID_PIV_MMBR_RLTN, decimal? ID_RLTN, int? ID_MMBR1, int? ID_MMBR2, string FL_NRST_RLTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PIV_MMBR_RLTN",
                    Value = ID_PIV_MMBR_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NRST_RLTN",
                    Size = 1,
                    Value = FL_NRST_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_Updt_PIV_MMBR_RLTN] @ID_PIV_MMBR_RLTN, @ID_RLTN, @ID_MMBR1, @ID_MMBR2, @FL_NRST_RLTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UTILITY_EXPENSEAsync(int? ID_MMBR1, int? ID_MMBR2, int? ID_UTLTY_DDCTN, int? ID_UTLTY_TYPE, decimal? AM_ACTL_UTLTY_AVG, decimal? AM_UTLTY_EXPNS_MNTHLY, string CD_MONTH, DateTime? DT_LIHEAP_RCVD, string FL_AC_BLLD, string FL_ASSSTD_BY_OTHR, string FL_BUA, string FL_LIHEAP, string FL_NM_OUTSIDE_HH_UE, string FL_PHONE_STNDRD, string FL_SUA_ELGBL, decimal? ID_FRQNCY_UTLTY_EXPNS, int? ID_VRFCTN_UTLTY_EXPNS, string TX_VRFCTN_UTLTY_EXPNS, OutputParameter<int?> ID_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UTLTY_EXPNS = new SqlParameter
            {
                ParameterName = "ID_UTLTY_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UTLTY_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UTLTY_EXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_DDCTN",
                    Value = ID_UTLTY_DDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_UTLTY_AVG",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_UTLTY_AVG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTLTY_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UTLTY_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_LIHEAP_RCVD",
                    Value = DT_LIHEAP_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AC_BLLD",
                    Size = 1,
                    Value = FL_AC_BLLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_BUA",
                    Size = 1,
                    Value = FL_BUA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LIHEAP",
                    Size = 1,
                    Value = FL_LIHEAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NM_OUTSIDE_HH_UE",
                    Size = 1,
                    Value = FL_NM_OUTSIDE_HH_UE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PHONE_STNDRD",
                    Size = 1,
                    Value = FL_PHONE_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUA_ELGBL",
                    Size = 1,
                    Value = FL_SUA_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_UTLTY_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UTLTY_EXPNS",
                    Value = ID_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UTLTY_EXPNS",
                    Value = TX_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UTILITY_EXPENSE] @ID_UTLTY_EXPNS OUTPUT, @ID_MMBR1, @ID_MMBR2, @ID_UTLTY_DDCTN, @ID_UTLTY_TYPE, @AM_ACTL_UTLTY_AVG, @AM_UTLTY_EXPNS_MNTHLY, @CD_MONTH, @DT_LIHEAP_RCVD, @FL_AC_BLLD, @FL_ASSSTD_BY_OTHR, @FL_BUA, @FL_LIHEAP, @FL_NM_OUTSIDE_HH_UE, @FL_PHONE_STNDRD, @FL_SUA_ELGBL, @ID_FRQNCY_UTLTY_EXPNS, @ID_VRFCTN_UTLTY_EXPNS, @TX_VRFCTN_UTLTY_EXPNS", sqlParameters, cancellationToken);

            ID_UTLTY_EXPNS.SetValue(parameterID_UTLTY_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UTILITY_EXPENSE_BASICAsync(int? ID_MMBR1, int? ID_UTLTY_DDCTN, int? ID_UTLTY_TYPE, decimal? AM_ACTL_UTLTY_AVG, decimal? AM_UTLTY_EXPNS_MNTHLY, string CD_MONTH, DateTime? DT_LIHEAP_RCVD, string FL_AC_BLLD, string FL_ASSSTD_BY_OTHR, string FL_LIHEAP, string FL_SUA_ELGBL, int? ID_FRQNCY_UTLTY_EXPNS, int? ID_VRFCTN_UTLTY_EXPNS, string TX_VRFCTN_UTLTY_EXPNS, OutputParameter<int?> ID_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UTLTY_EXPNS = new SqlParameter
            {
                ParameterName = "ID_UTLTY_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UTLTY_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UTLTY_EXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_DDCTN",
                    Value = ID_UTLTY_DDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_UTLTY_AVG",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_UTLTY_AVG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTLTY_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UTLTY_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_LIHEAP_RCVD",
                    Value = DT_LIHEAP_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AC_BLLD",
                    Size = 1,
                    Value = FL_AC_BLLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LIHEAP",
                    Size = 1,
                    Value = FL_LIHEAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUA_ELGBL",
                    Size = 1,
                    Value = FL_SUA_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_UTLTY_EXPNS",
                    Value = ID_FRQNCY_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UTLTY_EXPNS",
                    Value = ID_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UTLTY_EXPNS",
                    Value = TX_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UTILITY_EXPENSE_BASIC] @ID_UTLTY_EXPNS OUTPUT, @ID_MMBR1, @ID_UTLTY_DDCTN, @ID_UTLTY_TYPE, @AM_ACTL_UTLTY_AVG, @AM_UTLTY_EXPNS_MNTHLY, @CD_MONTH, @DT_LIHEAP_RCVD, @FL_AC_BLLD, @FL_ASSSTD_BY_OTHR, @FL_LIHEAP, @FL_SUA_ELGBL, @ID_FRQNCY_UTLTY_EXPNS, @ID_VRFCTN_UTLTY_EXPNS, @TX_VRFCTN_UTLTY_EXPNS", sqlParameters, cancellationToken);

            ID_UTLTY_EXPNS.SetValue(parameterID_UTLTY_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_UTILITY_EXPENSE_OTHER_PAYERAsync(int? ID_UTLTY_EXPNS, int? ID_MMBR, decimal? AM_UTLTY_EXPNS_OTHR_PAYER, string FL_OUTSIDE_RSDNT_UE, string FL_UTLTY_PAY_MMBR, int? ID_VRFCTN_UTLTY_EXPNS_OP, string TX_VRFCTN_UTLTY_EXPNS_OP, OutputParameter<short?> ID_UTLTY_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UTLTY_EXPNS_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UTLTY_EXPNS_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UTLTY_EXPNS_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTLTY_EXPNS_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_RSDNT_UE",
                    Size = 1,
                    Value = FL_OUTSIDE_RSDNT_UE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UTLTY_PAY_MMBR",
                    Size = 1,
                    Value = FL_UTLTY_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UTLTY_EXPNS_OP",
                    Value = ID_VRFCTN_UTLTY_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UTLTY_EXPNS_OP",
                    Value = TX_VRFCTN_UTLTY_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_UTILITY_EXPENSE_OTHER_PAYER] @ID_UTLTY_EXPNS_OTHR_PAYER OUTPUT, @ID_UTLTY_EXPNS, @ID_MMBR, @AM_UTLTY_EXPNS_OTHR_PAYER, @FL_OUTSIDE_RSDNT_UE, @FL_UTLTY_PAY_MMBR, @ID_VRFCTN_UTLTY_EXPNS_OP, @TX_VRFCTN_UTLTY_EXPNS_OP", sqlParameters, cancellationToken);

            ID_UTLTY_EXPNS_OTHR_PAYER.SetValue(parameterID_UTLTY_EXPNS_OTHR_PAYER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_WAIVE_ADVERSE_ACTIONAsync(int? ID_CASE_NMBR, int? ID_REF_WAIVE_ADVRS_ACTN, DateTime? DT_ADVRS_ACTN, string FL_WAIVE_ADVRS_ACTN_10DAY, OutputParameter<int?> ID_WAIVE_ADVRS_ACTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_WAIVE_ADVRS_ACTN = new SqlParameter
            {
                ParameterName = "ID_WAIVE_ADVRS_ACTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_WAIVE_ADVRS_ACTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_WAIVE_ADVRS_ACTN,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_WAIVE_ADVRS_ACTN",
                    Value = ID_REF_WAIVE_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ADVRS_ACTN",
                    Value = DT_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WAIVE_ADVRS_ACTN_10DAY",
                    Size = 1,
                    Value = FL_WAIVE_ADVRS_ACTN_10DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_WAIVE_ADVERSE_ACTION] @ID_WAIVE_ADVRS_ACTN OUTPUT, @ID_CASE_NMBR, @ID_REF_WAIVE_ADVRS_ACTN, @DT_ADVRS_ACTN, @FL_WAIVE_ADVRS_ACTN_10DAY", sqlParameters, cancellationToken);

            ID_WAIVE_ADVRS_ACTN.SetValue(parameterID_WAIVE_ADVRS_ACTN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_WELCOME_MESSAGEAsync(string ID_MSSG_CNTY, string TX_WLCM_MSSG_DSCR, DateTime? DT_START, DateTime? DT_END, OutputParameter<short?> ID_WLCM_MSSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_WLCM_MSSG = new SqlParameter
            {
                ParameterName = "ID_WLCM_MSSG",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_WLCM_MSSG?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_WLCM_MSSG,
                new SqlParameter
                {
                    ParameterName = "ID_MSSG_CNTY",
                    Size = 2,
                    Value = ID_MSSG_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WLCM_MSSG_DSCR",
                    Value = TX_WLCM_MSSG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "DT_START",
                    Value = DT_START ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_END",
                    Value = DT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_WELCOME_MESSAGE] @ID_WLCM_MSSG OUTPUT, @ID_MSSG_CNTY, @TX_WLCM_MSSG_DSCR, @DT_START, @DT_END", sqlParameters, cancellationToken);

            ID_WLCM_MSSG.SetValue(parameterID_WLCM_MSSG.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ins_WORKER_REMINDERAsync(int? ID_CASE_NMBR, string ID_USER, DateTime? DT_RMNDR, string TX_RMNDR_SBJCT, string TX_RMNDR_DSCR, OutputParameter<int?> ID_WRKR_RMNDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_WRKR_RMNDR = new SqlParameter
            {
                ParameterName = "ID_WRKR_RMNDR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_WRKR_RMNDR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_WRKR_RMNDR,
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RMNDR",
                    Value = DT_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RMNDR_SBJCT",
                    Value = TX_RMNDR_SBJCT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RMNDR_DSCR",
                    Value = TX_RMNDR_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ins_WORKER_REMINDER] @ID_WRKR_RMNDR OUTPUT, @ID_CASE_NMBR, @ID_USER, @DT_RMNDR, @TX_RMNDR_SBJCT, @TX_RMNDR_DSCR", sqlParameters, cancellationToken);

            ID_WRKR_RMNDR.SetValue(parameterID_WRKR_RMNDR.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsContactHmAdAsync(int? ID_CNTY_STATE, int? ID_MMBR, decimal? ID_REF_ADDRSS_TYPE, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, OutputParameter<int?> ID_ADDRSS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_ADDRSS = new SqlParameter
            {
                ParameterName = "ID_ADDRSS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_ADDRSS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_ADDRSS,
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsContactHmAd] @ID_ADDRSS OUTPUT, @ID_CNTY_STATE, @ID_MMBR, @ID_REF_ADDRSS_TYPE, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4", sqlParameters, cancellationToken);

            ID_ADDRSS.SetValue(parameterID_ADDRSS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<OACIS_OIL_EXTRACTResult>> OACIS_OIL_EXTRACTAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<OACIS_OIL_EXTRACTResult>("EXEC @returnValue = [dbo].[OACIS_OIL_EXTRACT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Proration_CR_Test_1Result>> Proration_CR_Test_1Async(int? ID_CASE_NMBR, string CASE_TYPE, string EXP_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_TYPE",
                    Size = 1,
                    Value = CASE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXP_TYPE",
                    Size = 1,
                    Value = EXP_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Proration_CR_Test_1Result>("EXEC @returnValue = [dbo].[Proration_CR_Test_1] @ID_CASE_NMBR, @CASE_TYPE, @EXP_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SampleSprocResult>> SampleSprocAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SampleSprocResult>("EXEC @returnValue = [dbo].[SampleSproc]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SumNmbrBoardersHHAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SumNmbrBoardersHH] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetAppIDResult>> TempGetAppIDAsync(string appName, OutputParameter<string> appId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterappId = new SqlParameter
            {
                ParameterName = "appId",
                Size = 36,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = appId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "appName",
                    Size = 280,
                    Value = appName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterappId,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempGetAppIDResult>("EXEC @returnValue = [dbo].[TempGetAppID] @appName, @appId OUTPUT", sqlParameters, cancellationToken);

            appId.SetValue(parameterappId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemResult>> TempGetStateItemAsync(string id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<DateTime?> lockDate, OutputParameter<int?> lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = itemShort?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = locked?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterlockDate = new SqlParameter
            {
                ParameterName = "lockDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockCookie?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockDate,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempGetStateItemResult>("EXEC @returnValue = [dbo].[TempGetStateItem] @id, @itemShort OUTPUT, @locked OUTPUT, @lockDate OUTPUT, @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort.SetValue(parameteritemShort.Value);
            locked.SetValue(parameterlocked.Value);
            lockDate.SetValue(parameterlockDate.Value);
            lockCookie.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItem2Result>> TempGetStateItem2Async(string id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = itemShort?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = locked?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockAge?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockCookie?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempGetStateItem2Result>("EXEC @returnValue = [dbo].[TempGetStateItem2] @id, @itemShort OUTPUT, @locked OUTPUT, @lockAge OUTPUT, @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort.SetValue(parameteritemShort.Value);
            locked.SetValue(parameterlocked.Value);
            lockAge.SetValue(parameterlockAge.Value);
            lockCookie.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItem3Result>> TempGetStateItem3Async(string id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int?> actionFlags, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = itemShort?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = locked?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockAge?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockCookie?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteractionFlags = new SqlParameter
            {
                ParameterName = "actionFlags",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = actionFlags?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameteractionFlags,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempGetStateItem3Result>("EXEC @returnValue = [dbo].[TempGetStateItem3] @id, @itemShort OUTPUT, @locked OUTPUT, @lockAge OUTPUT, @lockCookie OUTPUT, @actionFlags OUTPUT", sqlParameters, cancellationToken);

            itemShort.SetValue(parameteritemShort.Value);
            locked.SetValue(parameterlocked.Value);
            lockAge.SetValue(parameterlockAge.Value);
            lockCookie.SetValue(parameterlockCookie.Value);
            actionFlags.SetValue(parameteractionFlags.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemExclusiveResult>> TempGetStateItemExclusiveAsync(string id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<DateTime?> lockDate, OutputParameter<int?> lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = itemShort?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = locked?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterlockDate = new SqlParameter
            {
                ParameterName = "lockDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockCookie?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockDate,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempGetStateItemExclusiveResult>("EXEC @returnValue = [dbo].[TempGetStateItemExclusive] @id, @itemShort OUTPUT, @locked OUTPUT, @lockDate OUTPUT, @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort.SetValue(parameteritemShort.Value);
            locked.SetValue(parameterlocked.Value);
            lockDate.SetValue(parameterlockDate.Value);
            lockCookie.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemExclusive2Result>> TempGetStateItemExclusive2Async(string id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = itemShort?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = locked?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockAge?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockCookie?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempGetStateItemExclusive2Result>("EXEC @returnValue = [dbo].[TempGetStateItemExclusive2] @id, @itemShort OUTPUT, @locked OUTPUT, @lockAge OUTPUT, @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort.SetValue(parameteritemShort.Value);
            locked.SetValue(parameterlocked.Value);
            lockAge.SetValue(parameterlockAge.Value);
            lockCookie.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemExclusive3Result>> TempGetStateItemExclusive3Async(string id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int?> actionFlags, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = itemShort?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = locked?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockAge?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = lockCookie?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameteractionFlags = new SqlParameter
            {
                ParameterName = "actionFlags",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = actionFlags?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameteractionFlags,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempGetStateItemExclusive3Result>("EXEC @returnValue = [dbo].[TempGetStateItemExclusive3] @id, @itemShort OUTPUT, @locked OUTPUT, @lockAge OUTPUT, @lockCookie OUTPUT, @actionFlags OUTPUT", sqlParameters, cancellationToken);

            itemShort.SetValue(parameteritemShort.Value);
            locked.SetValue(parameterlocked.Value);
            lockAge.SetValue(parameterlockAge.Value);
            lockCookie.SetValue(parameterlockCookie.Value);
            actionFlags.SetValue(parameteractionFlags.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempGetVersionAsync(OutputParameter<string> ver, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterver = new SqlParameter
            {
                ParameterName = "ver",
                Size = 10,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ver?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterver,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempGetVersion] @ver OUTPUT", sqlParameters, cancellationToken);

            ver.SetValue(parameterver.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempInsertStateItemLongResult>> TempInsertStateItemLongAsync(string id, byte[] itemLong, int? timeout, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemLong",
                    Value = itemLong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempInsertStateItemLongResult>("EXEC @returnValue = [dbo].[TempInsertStateItemLong] @id, @itemLong, @timeout", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempInsertStateItemShortResult>> TempInsertStateItemShortAsync(string id, byte[] itemShort, int? timeout, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempInsertStateItemShortResult>("EXEC @returnValue = [dbo].[TempInsertStateItemShort] @id, @itemShort, @timeout", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempInsertUninitializedItemResult>> TempInsertUninitializedItemAsync(string id, byte[] itemShort, int? timeout, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempInsertUninitializedItemResult>("EXEC @returnValue = [dbo].[TempInsertUninitializedItem] @id, @itemShort, @timeout", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempReleaseStateItemExclusiveResult>> TempReleaseStateItemExclusiveAsync(string id, int? lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempReleaseStateItemExclusiveResult>("EXEC @returnValue = [dbo].[TempReleaseStateItemExclusive] @id, @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempRemoveStateItemResult>> TempRemoveStateItemAsync(string id, int? lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempRemoveStateItemResult>("EXEC @returnValue = [dbo].[TempRemoveStateItem] @id, @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempResetTimeoutResult>> TempResetTimeoutAsync(string id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempResetTimeoutResult>("EXEC @returnValue = [dbo].[TempResetTimeout] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempUpdateStateItemLongResult>> TempUpdateStateItemLongAsync(string id, byte[] itemLong, int? timeout, int? lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemLong",
                    Value = itemLong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempUpdateStateItemLongResult>("EXEC @returnValue = [dbo].[TempUpdateStateItemLong] @id, @itemLong, @timeout, @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempUpdateStateItemLongNullShortResult>> TempUpdateStateItemLongNullShortAsync(string id, byte[] itemLong, int? timeout, int? lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemLong",
                    Value = itemLong ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempUpdateStateItemLongNullShortResult>("EXEC @returnValue = [dbo].[TempUpdateStateItemLongNullShort] @id, @itemLong, @timeout, @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempUpdateStateItemShortResult>> TempUpdateStateItemShortAsync(string id, byte[] itemShort, int? timeout, int? lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempUpdateStateItemShortResult>("EXEC @returnValue = [dbo].[TempUpdateStateItemShort] @id, @itemShort, @timeout, @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempUpdateStateItemShortNullLongResult>> TempUpdateStateItemShortNullLongAsync(string id, byte[] itemShort, int? timeout, int? lockCookie, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TempUpdateStateItemShortNullLongResult>("EXEC @returnValue = [dbo].[TempUpdateStateItemShortNullLong] @id, @itemShort, @timeout, @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TEST_EXECUTE_Del_MEM_N_T_EOMAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TEST_EXECUTE_Del_MEM_N_T_EOM]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Upd_CASE_WORKFLOW_STATUSALLAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Upd_CASE_WORKFLOW_STATUSALL] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdatContactAddressAsync(int? ID_ADDRSS, int? ID_MMBR, decimal? ID_REF_ADDRSS_TYPE, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdatContactAddress] @ID_ADDRSS, @ID_MMBR, @ID_REF_ADDRSS_TYPE, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ADDRESSAsync(int? ID_ADDRSS, short? ID_CNTY_STATE, int? ID_MMBR, int? ID_EMPLYMNT, int? ID_PRVDR_NAME, decimal? ID_REF_ADDRSS_TYPE, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ADDRESS] @ID_ADDRSS, @ID_CNTY_STATE, @ID_MMBR, @ID_EMPLYMNT, @ID_PRVDR_NAME, @ID_REF_ADDRSS_TYPE, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ADVERSE_ACTION_REMINDERAsync(int? ID_WRKR_RMNDR, DateTime? DT_RMNDR, string TX_RMNDR_SBJCT, string TX_RMNDR_DSCR, string FL_ADVRS_ACTN_RMNDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_RMNDR",
                    Value = ID_WRKR_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RMNDR",
                    Value = DT_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RMNDR_SBJCT",
                    Value = TX_RMNDR_SBJCT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RMNDR_DSCR",
                    Value = TX_RMNDR_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADVRS_ACTN_RMNDR",
                    Size = 1,
                    Value = FL_ADVRS_ACTN_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ADVERSE_ACTION_REMINDER] @ID_WRKR_RMNDR, @DT_RMNDR, @TX_RMNDR_SBJCT, @TX_RMNDR_DSCR, @FL_ADVRS_ACTN_RMNDR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ALIEN_STATUSAsync(int? ID_ALIEN_STATUS, int? ID_MMBR, string CD_ALIEN_RGSTRTN, string FL_QA_LPR, string FL_QA_SCTN_208, string FL_QA_SCTN_207, string FL_QA_SCTN_212, string FL_QA_SCTN_241, string FL_QA_SCTN_203, string FL_QA_SCTN_501, string FL_QA_SCTN_204, string FL_FS_SCTN_207, string FL_FS_SCTN_208, string FL_FS_SCTN_241, string FL_FS_SCTN_501, string FL_FS_SCTN_584, string FL_QAIND_LPR, string FL_QAIND_MLTRY_CNNCTN, string FL_QAIND_US__18, string FL_QAIND_US_BNFTS, string FL_QAIND_US___65, string FL_QAIND_US_QA__5, string FL_NONQAIND_HMONG, string FL_NONQAIND_LAO, string FL_NONQAIND_AMRCN_INDIAN, string FL_NONQAIND_ACT25_USC450, string FL_NONQAIND_ST_REGIS, string FL_NONQAIND_MICMAC, string FL_NONQAIND_ABENAKI, string FL_NONQAIND_KICKAPOO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ALIEN_STATUS",
                    Value = ID_ALIEN_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ALIEN_RGSTRTN",
                    Size = 9,
                    Value = CD_ALIEN_RGSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_LPR",
                    Size = 1,
                    Value = FL_QA_LPR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_208",
                    Size = 1,
                    Value = FL_QA_SCTN_208 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_207",
                    Size = 1,
                    Value = FL_QA_SCTN_207 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_212",
                    Size = 1,
                    Value = FL_QA_SCTN_212 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_241",
                    Size = 1,
                    Value = FL_QA_SCTN_241 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_203",
                    Size = 1,
                    Value = FL_QA_SCTN_203 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_501",
                    Size = 1,
                    Value = FL_QA_SCTN_501 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QA_SCTN_204",
                    Size = 1,
                    Value = FL_QA_SCTN_204 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_207",
                    Size = 1,
                    Value = FL_FS_SCTN_207 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_208",
                    Size = 1,
                    Value = FL_FS_SCTN_208 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_241",
                    Size = 1,
                    Value = FL_FS_SCTN_241 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_501",
                    Size = 1,
                    Value = FL_FS_SCTN_501 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FS_SCTN_584",
                    Size = 1,
                    Value = FL_FS_SCTN_584 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_LPR",
                    Size = 1,
                    Value = FL_QAIND_LPR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_MLTRY_CNNCTN",
                    Size = 1,
                    Value = FL_QAIND_MLTRY_CNNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US__18",
                    Size = 1,
                    Value = FL_QAIND_US__18 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US_BNFTS",
                    Size = 1,
                    Value = FL_QAIND_US_BNFTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US___65",
                    Size = 1,
                    Value = FL_QAIND_US___65 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QAIND_US_QA__5",
                    Size = 1,
                    Value = FL_QAIND_US_QA__5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_HMONG",
                    Size = 1,
                    Value = FL_NONQAIND_HMONG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_LAO",
                    Size = 1,
                    Value = FL_NONQAIND_LAO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_AMRCN_INDIAN",
                    Size = 1,
                    Value = FL_NONQAIND_AMRCN_INDIAN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ACT25_USC450",
                    Size = 1,
                    Value = FL_NONQAIND_ACT25_USC450 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ST_REGIS",
                    Size = 1,
                    Value = FL_NONQAIND_ST_REGIS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_MICMAC",
                    Size = 1,
                    Value = FL_NONQAIND_MICMAC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_ABENAKI",
                    Size = 1,
                    Value = FL_NONQAIND_ABENAKI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NONQAIND_KICKAPOO",
                    Size = 1,
                    Value = FL_NONQAIND_KICKAPOO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ALIEN_STATUS] @ID_ALIEN_STATUS, @ID_MMBR, @CD_ALIEN_RGSTRTN, @FL_QA_LPR, @FL_QA_SCTN_208, @FL_QA_SCTN_207, @FL_QA_SCTN_212, @FL_QA_SCTN_241, @FL_QA_SCTN_203, @FL_QA_SCTN_501, @FL_QA_SCTN_204, @FL_FS_SCTN_207, @FL_FS_SCTN_208, @FL_FS_SCTN_241, @FL_FS_SCTN_501, @FL_FS_SCTN_584, @FL_QAIND_LPR, @FL_QAIND_MLTRY_CNNCTN, @FL_QAIND_US__18, @FL_QAIND_US_BNFTS, @FL_QAIND_US___65, @FL_QAIND_US_QA__5, @FL_NONQAIND_HMONG, @FL_NONQAIND_LAO, @FL_NONQAIND_AMRCN_INDIAN, @FL_NONQAIND_ACT25_USC450, @FL_NONQAIND_ST_REGIS, @FL_NONQAIND_MICMAC, @FL_NONQAIND_ABENAKI, @FL_NONQAIND_KICKAPOO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ALL_VERIFICATIONSAsync(int? ID_TABLE, int? ID_VRFCTN, string SQLTYPE, string txtDtl, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_TABLE",
                    Value = ID_TABLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN",
                    Value = ID_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 4,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "txtDtl",
                    Value = txtDtl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ALL_VERIFICATIONS] @ID_TABLE, @ID_VRFCTN, @SQLTYPE, @txtDtl", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ALL_VERIFICATIONS_07_09_2009Async(int? ID_CRT_ORDRD_AMNT, int? ID_VRFCTN_CRT_ORDRD_AMT, int? ID_DPNDNT_CARE, int? ID_VRFCTN_DC, int? ID_UTLTY_EXPNS, int? ID_VRFCTN_UTLTY_EXPNS, int? ID_SHLTR_EXPNS, int? ID_VRFCTN_SHLTR_EXPNS, int? ID_INSRNC, int? ID_VRFCTN_INSRNC, int? ID_MDCL_EXPNS, int? ID_VRFCTN_MDCL_EXPNS, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_CRT_ORDRD_AMT",
                    Value = ID_VRFCTN_CRT_ORDRD_AMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC",
                    Value = ID_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UTLTY_EXPNS",
                    Value = ID_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS",
                    Value = ID_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INSRNC",
                    Value = ID_VRFCTN_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ALL_VERIFICATIONS_07_09_2009] @ID_CRT_ORDRD_AMNT, @ID_VRFCTN_CRT_ORDRD_AMT, @ID_DPNDNT_CARE, @ID_VRFCTN_DC, @ID_UTLTY_EXPNS, @ID_VRFCTN_UTLTY_EXPNS, @ID_SHLTR_EXPNS, @ID_VRFCTN_SHLTR_EXPNS, @ID_INSRNC, @ID_VRFCTN_INSRNC, @ID_MDCL_EXPNS, @ID_VRFCTN_MDCL_EXPNS, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_APPT_DATE_REGAsync(string NO_CASE, DateTime? DT_REGISTRATION_MODIFIED, DateTime? DT_CASE_APPTDATETIME, string FL_APPTMADE, string FL_OFFICEINT, string TX_APPT_NOTES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_APPTDATETIME",
                    Value = DT_CASE_APPTDATETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_APPTMADE",
                    Size = 1,
                    Value = FL_APPTMADE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OFFICEINT",
                    Size = 1,
                    Value = FL_OFFICEINT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_APPT_NOTES",
                    Value = TX_APPT_NOTES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_APPT_DATE_REG] @NO_CASE, @DT_REGISTRATION_MODIFIED, @DT_CASE_APPTDATETIME, @FL_APPTMADE, @FL_OFFICEINT, @TX_APPT_NOTES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_AR_RPRSNTTVAsync(int? ID_AR_RPRSNTTV, int? ID_CASE_NMBR, string FL_EBT_RPRSNTTV, string NM_RPRSNTTV_FRST, string NM_RPRSNTTV_LAST, string NM_RPRSNTTV_MDL, string NM_RPRSNTTV_SFX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_AR_RPRSNTTV",
                    Value = ID_AR_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EBT_RPRSNTTV",
                    Size = 1,
                    Value = FL_EBT_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_FRST",
                    Size = 15,
                    Value = NM_RPRSNTTV_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_LAST",
                    Size = 15,
                    Value = NM_RPRSNTTV_LAST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_MDL",
                    Size = 15,
                    Value = NM_RPRSNTTV_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RPRSNTTV_SFX",
                    Size = 3,
                    Value = NM_RPRSNTTV_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_AR_RPRSNTTV] @ID_AR_RPRSNTTV, @ID_CASE_NMBR, @FL_EBT_RPRSNTTV, @NM_RPRSNTTV_FRST, @NM_RPRSNTTV_LAST, @NM_RPRSNTTV_MDL, @NM_RPRSNTTV_SFX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ARREARS_CSAsync(int? ID_ARRRS_CS, int? ID_CRT_ORDRD_AMNT, decimal? AM_OWED_ARRRS, decimal? AM_PAID_ARRRS, decimal? ID_FRQNCY_ARRRS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ARRRS_CS",
                    Value = ID_ARRRS_CS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_OWED_ARRRS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_OWED_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID_ARRRS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_ARRRS",
                    Precision = 1,
                    Value = ID_FRQNCY_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ARREARS_CS] @ID_ARRRS_CS, @ID_CRT_ORDRD_AMNT, @AM_OWED_ARRRS, @AM_PAID_ARRRS, @ID_FRQNCY_ARRRS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_aspnet_ApplicationsResult>> Updt_aspnet_ApplicationsAsync(string ApplicationName, string LoweredApplicationName, Guid? ApplicationId, string Description, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationName",
                    Size = 512,
                    Value = ApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoweredApplicationName",
                    Size = 512,
                    Value = LoweredApplicationName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 512,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_aspnet_ApplicationsResult>("EXEC @returnValue = [dbo].[Updt_aspnet_Applications] @ApplicationName, @LoweredApplicationName, @ApplicationId, @Description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_aspnet_MembershipResult>> Updt_aspnet_MembershipAsync(Guid? ApplicationId, Guid? UserId, string Password, int? PasswordFormat, string PasswordSalt, string MobilePIN, string Email, string LoweredEmail, string PasswordQuestion, string PasswordAnswer, bool? IsApproved, bool? IsLockedOut, DateTime? CreateDate, DateTime? LastLoginDate, DateTime? LastPasswordChangedDate, DateTime? LastLockoutDate, int? FailedPasswordAttemptCount, DateTime? FailedPasswordAttemptWindowStart, int? FailedPasswordAnswerAttemptCount, DateTime? FailedPasswordAnswerAttemptWindowStart, string Comment, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 256,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordFormat",
                    Value = PasswordFormat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordSalt",
                    Size = 256,
                    Value = PasswordSalt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobilePIN",
                    Size = 32,
                    Value = MobilePIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 512,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoweredEmail",
                    Size = 512,
                    Value = LoweredEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordQuestion",
                    Size = 512,
                    Value = PasswordQuestion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PasswordAnswer",
                    Size = 256,
                    Value = PasswordAnswer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsApproved",
                    Value = IsApproved ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IsLockedOut",
                    Value = IsLockedOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreateDate",
                    Value = CreateDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastLoginDate",
                    Value = LastLoginDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastPasswordChangedDate",
                    Value = LastPasswordChangedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastLockoutDate",
                    Value = LastLockoutDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAttemptCount",
                    Value = FailedPasswordAttemptCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAttemptWindowStart",
                    Value = FailedPasswordAttemptWindowStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAnswerAttemptCount",
                    Value = FailedPasswordAnswerAttemptCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FailedPasswordAnswerAttemptWindowStart",
                    Value = FailedPasswordAnswerAttemptWindowStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Comment",
                    Value = Comment ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NText,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_aspnet_MembershipResult>("EXEC @returnValue = [dbo].[Updt_aspnet_Membership] @ApplicationId, @UserId, @Password, @PasswordFormat, @PasswordSalt, @MobilePIN, @Email, @LoweredEmail, @PasswordQuestion, @PasswordAnswer, @IsApproved, @IsLockedOut, @CreateDate, @LastLoginDate, @LastPasswordChangedDate, @LastLockoutDate, @FailedPasswordAttemptCount, @FailedPasswordAttemptWindowStart, @FailedPasswordAnswerAttemptCount, @FailedPasswordAnswerAttemptWindowStart, @Comment", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_aspnet_SchemaVersionsResult>> Updt_aspnet_SchemaVersionsAsync(string Feature, string CompatibleSchemaVersion, bool? IsCurrentVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Feature",
                    Size = 256,
                    Value = Feature ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompatibleSchemaVersion",
                    Size = 256,
                    Value = CompatibleSchemaVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsCurrentVersion",
                    Value = IsCurrentVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_aspnet_SchemaVersionsResult>("EXEC @returnValue = [dbo].[Updt_aspnet_SchemaVersions] @Feature, @CompatibleSchemaVersion, @IsCurrentVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_aspnet_UsersResult>> Updt_aspnet_UsersAsync(Guid? ApplicationId, Guid? UserId, string UserName, string LoweredUserName, string MobileAlias, bool? IsAnonymous, DateTime? LastActivityDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ApplicationId",
                    Value = ApplicationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 512,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LoweredUserName",
                    Size = 512,
                    Value = LoweredUserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileAlias",
                    Size = 32,
                    Value = MobileAlias ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsAnonymous",
                    Value = IsAnonymous ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LastActivityDate",
                    Value = LastActivityDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_aspnet_UsersResult>("EXEC @returnValue = [dbo].[Updt_aspnet_Users] @ApplicationId, @UserId, @UserName, @LoweredUserName, @MobileAlias, @IsAnonymous, @LastActivityDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_Attach_MYDHRAPPAsync(int? ID_NEWCASE, string NO_CASE, string NO_CASE_CHCKDGT, string DATE_REGISTRATION, string DATE_AWARD, string DATE_DENY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Size = 1,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_REGISTRATION",
                    Size = 16,
                    Value = DATE_REGISTRATION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_AWARD",
                    Size = 16,
                    Value = DATE_AWARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DENY",
                    Size = 16,
                    Value = DATE_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_Attach_MYDHRAPP] @ID_NEWCASE, @NO_CASE, @NO_CASE_CHCKDGT, @DATE_REGISTRATION, @DATE_AWARD, @DATE_DENY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_AU_VOTER_POPUPAsync(int? ID_AU_VOTER_POPUP, string NO_CASE, string ID_USER, int? ID_NMBR_LOGIN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_AU_VOTER_POPUP",
                    Value = ID_AU_VOTER_POPUP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 8,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_LOGIN",
                    Value = ID_NMBR_LOGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_AU_VOTER_POPUP] @ID_AU_VOTER_POPUP, @NO_CASE, @ID_USER, @ID_NMBR_LOGIN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASEAsync(int? ID_CASE_NMBR, short? ID_CNTY_STATE, string CD_INTRVWEE_DSGNTN, decimal? CD_HH_TYPE, string CD_MTHD_INTRVW, decimal? CD_PRCSSN_STNDRD, decimal? CD_TRCKNG_OFFC, DateTime? DT_ADVRS_ACTN, DateTime? DT_APPLD, DateTime? DT_APPNTMNT, DateTime? DT_APPRVL, DateTime? DT_EXPRTN, DateTime? DT_RQRD_VRCTN, DateTime? DT_SPCL_DUE, string EM_HOH, string FL_ADVRS_WV, string FL_AR_FORM_SGND, string FL_CNTNUE_FA_SCRN, string FL_CNTNUE_VOLQUIT_SCRN, string FL_EMPLYD, string FL_EXPCT_STRT_WRK, string FL_EXPCT_VAC_HOL_BNUS_PAY, string FL_HH_CMPSTN_QSTNBL, string FL_HH_HMLS, string FL_JOBS_CHILD_SNCTN, string FL_NEW_EBT_CARD, string FL_ON_STRK, string FL_ONE_PRSN_HH, string FL_PAY_CS_NON_RSDNT, string FL_PAY_DC_BABYSIT, string FL_PAY_DC_BILL_NONHH, string FL_PAY_ROOM_MEAL, string FL_RSDNCY_QSTNBL, string FL_WRK_TRMNTD, string ID_WRKR_SSN, int? ID_VRFCTN_ATHRZD_RPRSNTTV, int? ID_VRFCTN_HH, int? ID_VRFCTN_HH_CMPSTN, int? ID_VRFCTN_HH_RSDNCY, int? ID_VRFCTN_INTRVWEE, int? ID_VRFCTN_RSDNCY, decimal? NO_CASE, decimal? NO_CASE_CHCKDGT, string NO_HOME_TEL, string NO_WRKR_NMBR, string TX_HOME_DRCTNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INTRVWEE_DSGNTN",
                    Size = 2,
                    Value = CD_INTRVWEE_DSGNTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_HH_TYPE",
                    Precision = 1,
                    Value = CD_HH_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MTHD_INTRVW",
                    Size = 6,
                    Value = CD_MTHD_INTRVW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PRCSSN_STNDRD",
                    Precision = 1,
                    Value = CD_PRCSSN_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRCKNG_OFFC",
                    Precision = 2,
                    Value = CD_TRCKNG_OFFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ADVRS_ACTN",
                    Value = DT_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPLD",
                    Value = DT_APPLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPNTMNT",
                    Value = DT_APPNTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPRVL",
                    Value = DT_APPRVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EXPRTN",
                    Value = DT_EXPRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RQRD_VRCTN",
                    Value = DT_RQRD_VRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SPCL_DUE",
                    Value = DT_SPCL_DUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EM_HOH",
                    Value = EM_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADVRS_WV",
                    Size = 1,
                    Value = FL_ADVRS_WV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AR_FORM_SGND",
                    Size = 1,
                    Value = FL_AR_FORM_SGND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CNTNUE_FA_SCRN",
                    Size = 1,
                    Value = FL_CNTNUE_FA_SCRN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CNTNUE_VOLQUIT_SCRN",
                    Size = 1,
                    Value = FL_CNTNUE_VOLQUIT_SCRN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EMPLYD",
                    Size = 1,
                    Value = FL_EMPLYD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPCT_STRT_WRK",
                    Size = 1,
                    Value = FL_EXPCT_STRT_WRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPCT_VAC_HOL_BNUS_PAY",
                    Size = 1,
                    Value = FL_EXPCT_VAC_HOL_BNUS_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HH_CMPSTN_QSTNBL",
                    Size = 1,
                    Value = FL_HH_CMPSTN_QSTNBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HH_HMLS",
                    Size = 1,
                    Value = FL_HH_HMLS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_JOBS_CHILD_SNCTN",
                    Size = 1,
                    Value = FL_JOBS_CHILD_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NEW_EBT_CARD",
                    Size = 1,
                    Value = FL_NEW_EBT_CARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ON_STRK",
                    Size = 1,
                    Value = FL_ON_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONE_PRSN_HH",
                    Size = 1,
                    Value = FL_ONE_PRSN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_CS_NON_RSDNT",
                    Size = 1,
                    Value = FL_PAY_CS_NON_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_DC_BABYSIT",
                    Size = 1,
                    Value = FL_PAY_DC_BABYSIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_DC_BILL_NONHH",
                    Size = 1,
                    Value = FL_PAY_DC_BILL_NONHH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_ROOM_MEAL",
                    Size = 1,
                    Value = FL_PAY_ROOM_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RSDNCY_QSTNBL",
                    Size = 1,
                    Value = FL_RSDNCY_QSTNBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRK_TRMNTD",
                    Size = 1,
                    Value = FL_WRK_TRMNTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_SSN",
                    Size = 9,
                    Value = ID_WRKR_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ATHRZD_RPRSNTTV",
                    Value = ID_VRFCTN_ATHRZD_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH",
                    Value = ID_VRFCTN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH_CMPSTN",
                    Value = ID_VRFCTN_HH_CMPSTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH_RSDNCY",
                    Value = ID_VRFCTN_HH_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INTRVWEE",
                    Value = ID_VRFCTN_INTRVWEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RSDNCY",
                    Value = ID_VRFCTN_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Precision = 1,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOME_TEL",
                    Size = 10,
                    Value = NO_HOME_TEL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_HOME_DRCTNS",
                    Value = TX_HOME_DRCTNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE] @ID_CASE_NMBR, @ID_CNTY_STATE, @CD_INTRVWEE_DSGNTN, @CD_HH_TYPE, @CD_MTHD_INTRVW, @CD_PRCSSN_STNDRD, @CD_TRCKNG_OFFC, @DT_ADVRS_ACTN, @DT_APPLD, @DT_APPNTMNT, @DT_APPRVL, @DT_EXPRTN, @DT_RQRD_VRCTN, @DT_SPCL_DUE, @EM_HOH, @FL_ADVRS_WV, @FL_AR_FORM_SGND, @FL_CNTNUE_FA_SCRN, @FL_CNTNUE_VOLQUIT_SCRN, @FL_EMPLYD, @FL_EXPCT_STRT_WRK, @FL_EXPCT_VAC_HOL_BNUS_PAY, @FL_HH_CMPSTN_QSTNBL, @FL_HH_HMLS, @FL_JOBS_CHILD_SNCTN, @FL_NEW_EBT_CARD, @FL_ON_STRK, @FL_ONE_PRSN_HH, @FL_PAY_CS_NON_RSDNT, @FL_PAY_DC_BABYSIT, @FL_PAY_DC_BILL_NONHH, @FL_PAY_ROOM_MEAL, @FL_RSDNCY_QSTNBL, @FL_WRK_TRMNTD, @ID_WRKR_SSN, @ID_VRFCTN_ATHRZD_RPRSNTTV, @ID_VRFCTN_HH, @ID_VRFCTN_HH_CMPSTN, @ID_VRFCTN_HH_RSDNCY, @ID_VRFCTN_INTRVWEE, @ID_VRFCTN_RSDNCY, @NO_CASE, @NO_CASE_CHCKDGT, @NO_HOME_TEL, @NO_WRKR_NMBR, @TX_HOME_DRCTNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_ALT_OFFICE_NOAsync(int? NO_CASE, string ALT_OFFICE_NO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ALT_OFFICE_NO",
                    Size = 10,
                    Value = ALT_OFFICE_NO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_ALT_OFFICE_NO] @NO_CASE, @ALT_OFFICE_NO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_AwdDnyAsync(int? ID_CASE_NMBR, string FL_NEW_EBT_CARD, DateTime? DT_APPRVL, string NO_WRKR_NMBR, decimal? CD_TRCKNG_OFFC, string ID_WRKR_SSN, string SQLTYPE, decimal? CD_CTY_RESIDING, decimal? CD_OFF_RESIDING, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NEW_EBT_CARD",
                    Size = 1,
                    Value = FL_NEW_EBT_CARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPRVL",
                    Value = DT_APPRVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRCKNG_OFFC",
                    Precision = 2,
                    Value = CD_TRCKNG_OFFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_SSN",
                    Size = 9,
                    Value = ID_WRKR_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CTY_RESIDING",
                    Precision = 3,
                    Value = CD_CTY_RESIDING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_OFF_RESIDING",
                    Precision = 2,
                    Value = CD_OFF_RESIDING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_AwdDny] @ID_CASE_NMBR, @FL_NEW_EBT_CARD, @DT_APPRVL, @NO_WRKR_NMBR, @CD_TRCKNG_OFFC, @ID_WRKR_SSN, @SQLTYPE, @CD_CTY_RESIDING, @CD_OFF_RESIDING", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_CHKDGTAsync(int? CD_CASE_CHKDGT, int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CHKDGT",
                    Value = CD_CASE_CHKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_CHKDGT] @CD_CASE_CHKDGT, @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_ForCSExpenseAsync(int? ID_CASE_NMBR, string FL_PAY_CS_NON_RSDNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_CS_NON_RSDNT",
                    Size = 1,
                    Value = FL_PAY_CS_NON_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_ForCSExpense] @ID_CASE_NMBR, @FL_PAY_CS_NON_RSDNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_ForUnearnedIncomeTANFAsync(int? ID_CASE_NMBR, string FL_JOBS_CHILD_SNCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_JOBS_CHILD_SNCTN",
                    Size = 1,
                    Value = FL_JOBS_CHILD_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_ForUnearnedIncomeTANF] @ID_CASE_NMBR, @FL_JOBS_CHILD_SNCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_HOHAsync(int? NO_CASE, int? OLD_HOH_ID_MMBR, int? NEW_HOH_ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OLD_HOH_ID_MMBR",
                    Value = OLD_HOH_ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NEW_HOH_ID_MMBR",
                    Value = NEW_HOH_ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_HOH] @NO_CASE, @OLD_HOH_ID_MMBR, @NEW_HOH_ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_ID_CNTY_STATEAsync(int? NO_CASE, int? ID_CNTY_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_ID_CNTY_STATE] @NO_CASE, @ID_CNTY_STATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_MyDHRAsync(int? ID_CASE_NMBR, DateTime? MYDHR_LINKDATE, string MYDHR_USERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_LINKDATE",
                    Value = MYDHR_LINKDATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_USERID",
                    Size = 36,
                    Value = MYDHR_USERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_MyDHR] @ID_CASE_NMBR, @MYDHR_LINKDATE, @MYDHR_USERID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_NOTESAsync(int? ID_CASE_NOTE, int? ID_MMBR, short? ID_CASE_CTGRY, string NM_MDFD, string TX_CASE_NOTE_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NOTE",
                    Value = ID_CASE_NOTE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MDFD",
                    Size = 50,
                    Value = NM_MDFD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CASE_NOTE_DSCR",
                    Value = TX_CASE_NOTE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_NOTES] @ID_CASE_NOTE, @ID_MMBR, @ID_CASE_CTGRY, @NM_MDFD, @TX_CASE_NOTE_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_PS_ADAsync(int? ID_CASE_NMBR, decimal? CD_PRCSSN_STNDRD, DateTime? DT_APPLD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PRCSSN_STNDRD",
                    Precision = 1,
                    Value = CD_PRCSSN_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPLD",
                    Value = DT_APPLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_PS_AD] @ID_CASE_NMBR, @CD_PRCSSN_STNDRD, @DT_APPLD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_REGAsync(int? ID_CASE_NMBR, decimal? CD_PRCSSN_STNDRD, decimal? CD_TRCKNG_OFFC, DateTime? DT_APPLD, DateTime? DT_APPNTMNT, DateTime? DT_SPCL_DUE, string FL_HH_HMLS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PRCSSN_STNDRD",
                    Precision = 1,
                    Value = CD_PRCSSN_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRCKNG_OFFC",
                    Precision = 2,
                    Value = CD_TRCKNG_OFFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPLD",
                    Value = DT_APPLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPNTMNT",
                    Value = DT_APPNTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SPCL_DUE",
                    Value = DT_SPCL_DUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HH_HMLS",
                    Size = 1,
                    Value = FL_HH_HMLS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_REG] @ID_CASE_NMBR, @CD_PRCSSN_STNDRD, @CD_TRCKNG_OFFC, @DT_APPLD, @DT_APPNTMNT, @DT_SPCL_DUE, @FL_HH_HMLS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_REOPEN_RECERTAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_REOPEN_RECERT] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_SPCLDTAsync(DateTime? DT_SPCL_DUE, int? NO_CASE, string NO_WRKR_NMBR, string ID_WRKR_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DT_SPCL_DUE",
                    Value = DT_SPCL_DUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_SSN",
                    Size = 9,
                    Value = ID_WRKR_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_SPCLDT] @DT_SPCL_DUE, @NO_CASE, @NO_WRKR_NMBR, @ID_WRKR_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_SPECIAL_REOPENAsync(int? NO_CASE, string FL_SPECIAL_REOPEN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SPECIAL_REOPEN",
                    Size = 1,
                    Value = FL_SPECIAL_REOPEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_SPECIAL_REOPEN] @NO_CASE, @FL_SPECIAL_REOPEN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_STATUSAsync(int? ID_CASE_NMBR, decimal? ID_REF_CASE_STATUS_TYPE, int? ID_SPCL_REOPEN_RSN, string CD_PAST_DUE_RSN, string CD_RJCTN_CLSR, string CD_DENIAL, string CD_TRMNTN, decimal? AM_ALLTMNT, decimal? AM_AWRD_ALLTMNT, decimal? AM_PEND_ALLTMNT, string CD_ADVRS_GUARD, string CD_ALLTMNT_TYPE, DateTime? DT_CASE_STTS, DateTime? DT_CERT_END, DateTime? DT_CERT_STRT, DateTime? DT_STRT_ISSNC, string TX_PND_RSN, string SQL_TYPE, decimal? AM_RCPMNT, string CD_ISS_TYPE, string CD_EXPEDITE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS_TYPE",
                    Precision = 18,
                    Value = ID_REF_CASE_STATUS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SPCL_REOPEN_RSN",
                    Value = ID_SPCL_REOPEN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DENIAL",
                    Size = 2,
                    Value = CD_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRMNTN",
                    Size = 2,
                    Value = CD_TRMNTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AWRD_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AWRD_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PEND_ALLTMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PEND_ALLTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ADVRS_GUARD",
                    Size = 1,
                    Value = CD_ADVRS_GUARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ALLTMNT_TYPE",
                    Size = 1,
                    Value = CD_ALLTMNT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_STTS",
                    Value = DT_CASE_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PND_RSN",
                    Value = TX_PND_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "SQL_TYPE",
                    Size = 2,
                    Value = SQL_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RCPMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RCPMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ISS_TYPE",
                    Size = 1,
                    Value = CD_ISS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EXPEDITE",
                    Size = 1,
                    Value = CD_EXPEDITE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_STATUS] @ID_CASE_NMBR, @ID_REF_CASE_STATUS_TYPE, @ID_SPCL_REOPEN_RSN, @CD_PAST_DUE_RSN, @CD_RJCTN_CLSR, @CD_DENIAL, @CD_TRMNTN, @AM_ALLTMNT, @AM_AWRD_ALLTMNT, @AM_PEND_ALLTMNT, @CD_ADVRS_GUARD, @CD_ALLTMNT_TYPE, @DT_CASE_STTS, @DT_CERT_END, @DT_CERT_STRT, @DT_STRT_ISSNC, @TX_PND_RSN, @SQL_TYPE, @AM_RCPMNT, @CD_ISS_TYPE, @CD_EXPEDITE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_STATUS_BYTYPEAsync(int? ID_CASE_NMBR, int? ID_REF_CASE_STATUS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS_TYPE",
                    Value = ID_REF_CASE_STATUS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_STATUS_BYTYPE] @ID_CASE_NMBR, @ID_REF_CASE_STATUS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_STATUS_DATESAsync(int? ID_CASE_NMBR, DateTime? DT_CERT_END, DateTime? DT_CERT_STRT, DateTime? DT_STRT_ISSNC, string FL_SPECIAL_REOPEN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SPECIAL_REOPEN",
                    Size = 1,
                    Value = FL_SPECIAL_REOPEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_STATUS_DATES] @ID_CASE_NMBR, @DT_CERT_END, @DT_CERT_STRT, @DT_STRT_ISSNC, @FL_SPECIAL_REOPEN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_StrikerAsync(int? ID_CASE_NMBR, string FL_ON_STRK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ON_STRK",
                    Size = 1,
                    Value = FL_ON_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_Striker] @ID_CASE_NMBR, @FL_ON_STRK", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_TRKOFFAsync(int? CD_TRCKNG_OFFC, int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_TRCKNG_OFFC",
                    Value = CD_TRCKNG_OFFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_TRKOFF] @CD_TRCKNG_OFFC, @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_USCITIZENSAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_USCITIZENS] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_VOTERANSAsync(int? IDCASENMBR, string YESORNO, string ANSTEXT, string LUSER, string NOCASE, int? AULOGIN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IDCASENMBR",
                    Value = IDCASENMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "YESORNO",
                    Size = 1,
                    Value = YESORNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ANSTEXT",
                    Value = ANSTEXT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "LUSER",
                    Size = 8,
                    Value = LUSER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NOCASE",
                    Size = 9,
                    Value = NOCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AULOGIN",
                    Value = AULOGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_VOTERANS] @IDCASENMBR, @YESORNO, @ANSTEXT, @LUSER, @NOCASE, @AULOGIN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_withMYDHR_IDAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_withMYDHR_ID]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_WORKFLOWAsync(int? NO_CASE, int? CD_REF_MODULE, string FL_INTRVW, string FL_CMPLTD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_MODULE",
                    Value = CD_REF_MODULE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INTRVW",
                    Size = 1,
                    Value = FL_INTRVW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CMPLTD",
                    Size = 1,
                    Value = FL_CMPLTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_WORKFLOW] @NO_CASE, @CD_REF_MODULE, @FL_INTRVW, @FL_CMPLTD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_WORKFLOW_FlCMPAsync(int? NO_CASE, string CD_REF_MODULE, string FL_CMPLTD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_MODULE",
                    Size = 5,
                    Value = CD_REF_MODULE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CMPLTD",
                    Size = 1,
                    Value = FL_CMPLTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_WORKFLOW_FlCMP] @NO_CASE, @CD_REF_MODULE, @FL_CMPLTD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CASE_WORKFLOW_IntFlAsync(int? NO_CASE, string CD_REF_MODULE, string FL_INTRVW, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_MODULE",
                    Size = 5,
                    Value = CD_REF_MODULE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INTRVW",
                    Size = 1,
                    Value = FL_INTRVW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CASE_WORKFLOW_IntFl] @NO_CASE, @CD_REF_MODULE, @FL_INTRVW", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CD_TRCKNG_OFFCAsync(int? ID_CASE_NMBR, short? CD_TRCKNG_OFFC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRCKNG_OFFC",
                    Value = CD_TRCKNG_OFFC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CD_TRCKNG_OFFC] @ID_CASE_NMBR, @CD_TRCKNG_OFFC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CDMNTH_FA_STATUSAsync(int? ID_FA_STTS, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_STTS",
                    Value = ID_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CDMNTH_FA_STATUS] @ID_FA_STTS, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_CERT_ELIGResult>> Updt_CERT_ELIGAsync(decimal? ID_CERT_ELGBLTY, int? ID_MMBR, decimal? ID_REF_CERT_ELIG, string CD_SPCL_REOPEN_RSN, DateTime? DT_CERT_END, DateTime? DT_CERT_STRT, DateTime? DT_STRT_ISSNC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CERT_ELGBLTY",
                    Precision = 2,
                    Value = ID_CERT_ELGBLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Precision = 2,
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SPCL_REOPEN_RSN",
                    Size = 2,
                    Value = CD_SPCL_REOPEN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_CERT_ELIGResult>("EXEC @returnValue = [dbo].[Updt_CERT_ELIG] @ID_CERT_ELGBLTY, @ID_MMBR, @ID_REF_CERT_ELIG, @CD_SPCL_REOPEN_RSN, @DT_CERT_END, @DT_CERT_STRT, @DT_STRT_ISSNC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ContactInfo_CASEAsync(int? ID_CASE_NMBR, string EM_HOH, string NO_HOME_TEL, string TX_HOME_DRCTNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EM_HOH",
                    Value = EM_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOME_TEL",
                    Value = NO_HOME_TEL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_HOME_DRCTNS",
                    Value = TX_HOME_DRCTNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ContactInfo_CASE] @ID_CASE_NMBR, @EM_HOH, @NO_HOME_TEL, @TX_HOME_DRCTNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_COURT_ORDERD_AMOUNTAsync(int? ID_CRT_ORDRD_AMNT, decimal? ID_CRT_ORDRD, int? ID_CS_PAYER_RCPNT, decimal? AM_CLCLTD_CRRNT_MNTHLY, decimal? AM_CRT_ORDR_MNTHLY, decimal? AM_PAY_CRRNT_CS, decimal? AM_PAY_HLTH_INS_MNTHLY, decimal? AM_PAY_LNDLRD_MNTHLY, decimal? AM_PAY_MDBLLS_MNTHLY, decimal? AM_PAY_MRTGG_MNTHLY, decimal? AM_PAY_UTLTY_MNTHLY, string FL_HLTH_INS_MNTHLY, string FL_LNDLRD_MNTHLY, string FL_MDBLLS_MNTHLY, string FL_MRTGG_MNTHLY, string FL_UTLTY_MNTHLY, decimal? ID_FRQNCY_CRRNT, decimal? ID_FRQNCY_CRT_ORDR, int? ID_VRFCTN_CRT_ORDRD_AMT, string NO_CRT_ORDR, decimal? AM_TTL_ALLWBL_CS, string CD_MONTH, string TX_VRFCTN_CRT_ORDRD_AMT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD",
                    Precision = 1,
                    Value = ID_CRT_ORDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CS_PAYER_RCPNT",
                    Value = ID_CS_PAYER_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CLCLTD_CRRNT_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CLCLTD_CRRNT_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CRT_ORDR_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CRT_ORDR_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_CRRNT_CS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_CRRNT_CS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_HLTH_INS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_HLTH_INS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_LNDLRD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_LNDLRD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MDBLLS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MDBLLS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MRTGG_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MRTGG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_UTLTY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_UTLTY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HLTH_INS_MNTHLY",
                    Size = 1,
                    Value = FL_HLTH_INS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LNDLRD_MNTHLY",
                    Size = 1,
                    Value = FL_LNDLRD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MDBLLS_MNTHLY",
                    Size = 1,
                    Value = FL_MDBLLS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MRTGG_MNTHLY",
                    Size = 1,
                    Value = FL_MRTGG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UTLTY_MNTHLY",
                    Size = 1,
                    Value = FL_UTLTY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_CRRNT",
                    Precision = 1,
                    Value = ID_FRQNCY_CRRNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_CRT_ORDR",
                    Precision = 1,
                    Value = ID_FRQNCY_CRT_ORDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_CRT_ORDRD_AMT",
                    Value = ID_VRFCTN_CRT_ORDRD_AMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CRT_ORDR",
                    Size = 12,
                    Value = NO_CRT_ORDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_ALLWBL_CS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_ALLWBL_CS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_CRT_ORDRD_AMT",
                    Value = TX_VRFCTN_CRT_ORDRD_AMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_COURT_ORDERD_AMOUNT] @ID_CRT_ORDRD_AMNT, @ID_CRT_ORDRD, @ID_CS_PAYER_RCPNT, @AM_CLCLTD_CRRNT_MNTHLY, @AM_CRT_ORDR_MNTHLY, @AM_PAY_CRRNT_CS, @AM_PAY_HLTH_INS_MNTHLY, @AM_PAY_LNDLRD_MNTHLY, @AM_PAY_MDBLLS_MNTHLY, @AM_PAY_MRTGG_MNTHLY, @AM_PAY_UTLTY_MNTHLY, @FL_HLTH_INS_MNTHLY, @FL_LNDLRD_MNTHLY, @FL_MDBLLS_MNTHLY, @FL_MRTGG_MNTHLY, @FL_UTLTY_MNTHLY, @ID_FRQNCY_CRRNT, @ID_FRQNCY_CRT_ORDR, @ID_VRFCTN_CRT_ORDRD_AMT, @NO_CRT_ORDR, @AM_TTL_ALLWBL_CS, @CD_MONTH, @TX_VRFCTN_CRT_ORDRD_AMT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_COURT_ORDERED_AMOUNT_CdMonthAsync(int? ID_CRT_ORDRD_AMNT, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CRT_ORDRD_AMNT",
                    Value = ID_CRT_ORDRD_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_COURT_ORDERED_AMOUNT_CdMonth] @ID_CRT_ORDRD_AMNT, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_COVERED_ITEMSAsync(int? ID_CVRD_ITEMS, int? ID_CASE_NMBR, string FL_SGND_SUD, string FL_UNDRSTNDS_GOOD, string FL_UNDRSTNDS_LMTD, string FL_UNDRSTNDS_POOR, string FL_UNDRSTNDS_NOT_CPBL, string TX_UNDRSTNDS_WHY, string FL_DSCSSD_PRMPTNSS, string FL_DSCSSD_VRBLE_ISSNC, string FL_DSCSSD_ISS_HOURS, string FL_DSCSSD_CHNG_RPRTNG_RQRMNTS, string FL_DSCSSD_CHNG_RPRT_GVN, string FL_DSCSSD_ATHRZD_RPRSNTTV, string FL_DSCSSD_ELGBL_FOODS, string FL_DSCSSD_CVL_RGHTS, string FL_DSCSSD_WORK_RGSTRTN, string FL_DSCSSD_VLNTRY_QUIT, string FL_DSCSSD_SEMI_ANNL_RPRTNG, string FL_DSCSSD_VNDR_PYMNT_RMBRSMNT, string TX_DSCSSD_OTHR, string FL_DSCSSD_EXPNS_VRFCTNS, string TX_SRGiven, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CVRD_ITEMS",
                    Value = ID_CVRD_ITEMS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SGND_SUD",
                    Size = 1,
                    Value = FL_SGND_SUD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_GOOD",
                    Size = 1,
                    Value = FL_UNDRSTNDS_GOOD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_LMTD",
                    Size = 1,
                    Value = FL_UNDRSTNDS_LMTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_POOR",
                    Size = 1,
                    Value = FL_UNDRSTNDS_POOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UNDRSTNDS_NOT_CPBL",
                    Size = 1,
                    Value = FL_UNDRSTNDS_NOT_CPBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_UNDRSTNDS_WHY",
                    Value = TX_UNDRSTNDS_WHY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_PRMPTNSS",
                    Size = 1,
                    Value = FL_DSCSSD_PRMPTNSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_VRBLE_ISSNC",
                    Size = 1,
                    Value = FL_DSCSSD_VRBLE_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_ISS_HOURS",
                    Size = 1,
                    Value = FL_DSCSSD_ISS_HOURS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_CHNG_RPRTNG_RQRMNTS",
                    Size = 1,
                    Value = FL_DSCSSD_CHNG_RPRTNG_RQRMNTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_CHNG_RPRT_GVN",
                    Size = 1,
                    Value = FL_DSCSSD_CHNG_RPRT_GVN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_ATHRZD_RPRSNTTV",
                    Size = 1,
                    Value = FL_DSCSSD_ATHRZD_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_ELGBL_FOODS",
                    Size = 1,
                    Value = FL_DSCSSD_ELGBL_FOODS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_CVL_RGHTS",
                    Size = 1,
                    Value = FL_DSCSSD_CVL_RGHTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_WORK_RGSTRTN",
                    Size = 1,
                    Value = FL_DSCSSD_WORK_RGSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_VLNTRY_QUIT",
                    Size = 1,
                    Value = FL_DSCSSD_VLNTRY_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_SEMI_ANNL_RPRTNG",
                    Size = 1,
                    Value = FL_DSCSSD_SEMI_ANNL_RPRTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_VNDR_PYMNT_RMBRSMNT",
                    Size = 1,
                    Value = FL_DSCSSD_VNDR_PYMNT_RMBRSMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DSCSSD_OTHR",
                    Value = TX_DSCSSD_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_EXPNS_VRFCTNS",
                    Size = 1,
                    Value = FL_DSCSSD_EXPNS_VRFCTNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SRGiven",
                    Size = 50,
                    Value = TX_SRGiven ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_COVERED_ITEMS] @ID_CVRD_ITEMS, @ID_CASE_NMBR, @FL_SGND_SUD, @FL_UNDRSTNDS_GOOD, @FL_UNDRSTNDS_LMTD, @FL_UNDRSTNDS_POOR, @FL_UNDRSTNDS_NOT_CPBL, @TX_UNDRSTNDS_WHY, @FL_DSCSSD_PRMPTNSS, @FL_DSCSSD_VRBLE_ISSNC, @FL_DSCSSD_ISS_HOURS, @FL_DSCSSD_CHNG_RPRTNG_RQRMNTS, @FL_DSCSSD_CHNG_RPRT_GVN, @FL_DSCSSD_ATHRZD_RPRSNTTV, @FL_DSCSSD_ELGBL_FOODS, @FL_DSCSSD_CVL_RGHTS, @FL_DSCSSD_WORK_RGSTRTN, @FL_DSCSSD_VLNTRY_QUIT, @FL_DSCSSD_SEMI_ANNL_RPRTNG, @FL_DSCSSD_VNDR_PYMNT_RMBRSMNT, @TX_DSCSSD_OTHR, @FL_DSCSSD_EXPNS_VRFCTNS, @TX_SRGiven", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_COVERED_ITEMS_AwardDenyAsync(int? ID_CASE_NMBR, string FL_DSCSSD_CHNG_RPRT_GVN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSCSSD_CHNG_RPRT_GVN",
                    Size = 1,
                    Value = FL_DSCSSD_CHNG_RPRT_GVN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_COVERED_ITEMS_AwardDeny] @ID_CASE_NMBR, @FL_DSCSSD_CHNG_RPRT_GVN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CS_AMOUNTAsync(int? ID_CS_PAYER_RCPNT, int? ID_MMBR, decimal? AM_CS_CRT_ORDRD_MNTHLY, decimal? AM_CS_MNTHLY, decimal? AM_NON_RCRRNG_RSRC, string DT_DAY_OF_MNTH, DateTime? DT_PYMNT_RCVD, string FL_ARRRS, decimal? ID_FRQNCY_PAY_CS_AMNT, int? ID_VRFCTN_CS_AMNT, OutputParameter<int?> ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CS_AMNT = new SqlParameter
            {
                ParameterName = "ID_CS_AMNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CS_AMNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CS_AMNT,
                new SqlParameter
                {
                    ParameterName = "ID_CS_PAYER_RCPNT",
                    Value = ID_CS_PAYER_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_CRT_ORDRD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CS_CRT_ORDRD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_NON_RCRRNG_RSRC",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_NON_RCRRNG_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DAY_OF_MNTH",
                    Size = 2,
                    Value = DT_DAY_OF_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PYMNT_RCVD",
                    Value = DT_PYMNT_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ARRRS",
                    Size = 1,
                    Value = FL_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PAY_CS_AMNT",
                    Precision = 2,
                    Value = ID_FRQNCY_PAY_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_CS_AMNT",
                    Value = ID_VRFCTN_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CS_AMOUNT] @ID_CS_AMNT OUTPUT, @ID_CS_PAYER_RCPNT, @ID_MMBR, @AM_CS_CRT_ORDRD_MNTHLY, @AM_CS_MNTHLY, @AM_NON_RCRRNG_RSRC, @DT_DAY_OF_MNTH, @DT_PYMNT_RCVD, @FL_ARRRS, @ID_FRQNCY_PAY_CS_AMNT, @ID_VRFCTN_CS_AMNT", sqlParameters, cancellationToken);

            ID_CS_AMNT.SetValue(parameterID_CS_AMNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CS_PAYER_RECIPIENTAsync(int? ID_CS_PAYER_RCPNT, int? ID_OBLGTN_RSN, string FL_PAYER, string NM_PAYER_RCPNT_LST, string NM_PAYER_RCPNT_FRST, string NM_PAYER_RCPNT_MDL, string NM_PAYER_RCPNT_SFX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_PAYER_RCPNT",
                    Value = ID_CS_PAYER_RCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OBLGTN_RSN",
                    Value = ID_OBLGTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYER",
                    Size = 1,
                    Value = FL_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_LST",
                    Size = 15,
                    Value = NM_PAYER_RCPNT_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_FRST",
                    Size = 15,
                    Value = NM_PAYER_RCPNT_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_MDL",
                    Size = 10,
                    Value = NM_PAYER_RCPNT_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PAYER_RCPNT_SFX",
                    Size = 3,
                    Value = NM_PAYER_RCPNT_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CS_PAYER_RECIPIENT] @ID_CS_PAYER_RCPNT, @ID_OBLGTN_RSN, @FL_PAYER, @NM_PAYER_RCPNT_LST, @NM_PAYER_RCPNT_FRST, @NM_PAYER_RCPNT_MDL, @NM_PAYER_RCPNT_SFX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_CS_PAYMENTSAsync(int? ID_CS_PYMNT, int? ID_CS_AMNT, decimal? AM_CS_PYMNT, DateTime? DT_CS_PYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CS_PYMNT",
                    Value = ID_CS_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_PYMNT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CS_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CS_PYMNT",
                    Value = DT_CS_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_CS_PAYMENTS] @ID_CS_PYMNT, @ID_CS_AMNT, @AM_CS_PYMNT, @DT_CS_PYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_DENIALResult>> Updt_DENIALAsync(int? ID_DENIAL, decimal? ID_DENIAL_CODES, int? ID_CASE_NMBR, DateTime? DT_DENIAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL",
                    Value = ID_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL_CODES",
                    Precision = 2,
                    Value = ID_DENIAL_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DENIAL",
                    Value = DT_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_DENIALResult>("EXEC @returnValue = [dbo].[Updt_DENIAL] @ID_DENIAL, @ID_DENIAL_CODES, @ID_CASE_NMBR, @DT_DENIAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_DEPENDENTResult>> Updt_DEPENDENTAsync(int? ID_DPNDNT, int? ID_MMBR, DateTime? DT_DPNDNT_DOB, string FL_CHILD, string NM_DPNDNT_LST, string NM_DPNDNT_FRST, string NM_DPNDNT_MDL, string NM_DPNDNT_SFX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DPNDNT_DOB",
                    Value = DT_DPNDNT_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CHILD",
                    Size = 1,
                    Value = FL_CHILD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_LST",
                    Size = 20,
                    Value = NM_DPNDNT_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_FRST",
                    Size = 20,
                    Value = NM_DPNDNT_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_MDL",
                    Size = 20,
                    Value = NM_DPNDNT_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DPNDNT_SFX",
                    Size = 3,
                    Value = NM_DPNDNT_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_DEPENDENTResult>("EXEC @returnValue = [dbo].[Updt_DEPENDENT] @ID_DPNDNT, @ID_MMBR, @DT_DPNDNT_DOB, @FL_CHILD, @NM_DPNDNT_LST, @NM_DPNDNT_FRST, @NM_DPNDNT_MDL, @NM_DPNDNT_SFX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_DEPENDENT_CAREAsync(int? ID_DPNDNT_CARE, int? ID_DPNDNT, int? ID_MMBR, int? ID_MMBR1, int? ID_PRVDR_NAME, decimal? AM_DPNDNT_CARE_EXPNS, decimal? AM_PAID, decimal? AM_PAID_MNTHLY, string FL_ASSSTD_BY_OTHR, decimal? ID_FRQNCY_DC_EXPNS, int? ID_VRFCTN_DC, decimal? AM_DC_OTHR_PAY, string FL_DC_PAY_MMBR, int? ID_VRFCTN_DC_OTHR_PAYER, int? ID_UNERND_INCM, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_MNTHLY, OutputParameter<int?> ID_DC_OTHR_PAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DC_OTHR_PAY = new SqlParameter
            {
                ParameterName = "ID_DC_OTHR_PAY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DC_OTHR_PAY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DPNDNT_CARE_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DPNDNT_CARE_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_DC_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_DC_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC",
                    Value = ID_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_DC_OTHR_PAY,
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DC_PAY_MMBR",
                    Size = 1,
                    Value = FL_DC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC_OTHR_PAYER",
                    Value = ID_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_DEPENDENT_CARE] @ID_DPNDNT_CARE, @ID_DPNDNT, @ID_MMBR, @ID_MMBR1, @ID_PRVDR_NAME, @AM_DPNDNT_CARE_EXPNS, @AM_PAID, @AM_PAID_MNTHLY, @FL_ASSSTD_BY_OTHR, @ID_FRQNCY_DC_EXPNS, @ID_VRFCTN_DC, @ID_DC_OTHR_PAY OUTPUT, @AM_DC_OTHR_PAY, @FL_DC_PAY_MMBR, @ID_VRFCTN_DC_OTHR_PAYER, @ID_UNERND_INCM, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_MNTHLY", sqlParameters, cancellationToken);

            ID_DC_OTHR_PAY.SetValue(parameterID_DC_OTHR_PAY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_DEPENDENT_CARE_NOHELPAsync(int? ID_DPNDNT_CARE, int? ID_DPNDNT, int? ID_MMBR, int? ID_MMBR1, int? ID_PRVDR_NAME, decimal? AM_DPNDNT_CARE_EXPNS, decimal? AM_PAID, decimal? AM_PAID_MNTHLY, string FL_ASSSTD_BY_OTHR, decimal? ID_FRQNCY_DC_EXPNS, int? ID_VRFCTN_DC, string CD_MONTH, string FL_OUTSIDE_DEP_PYMNT, string TX_VRFCTN_DC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DPNDNT_CARE_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DPNDNT_CARE_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_DC_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_DC_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC",
                    Value = ID_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_DEP_PYMNT",
                    Size = 1,
                    Value = FL_OUTSIDE_DEP_PYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_DC",
                    Value = TX_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_DEPENDENT_CARE_NOHELP] @ID_DPNDNT_CARE, @ID_DPNDNT, @ID_MMBR, @ID_MMBR1, @ID_PRVDR_NAME, @AM_DPNDNT_CARE_EXPNS, @AM_PAID, @AM_PAID_MNTHLY, @FL_ASSSTD_BY_OTHR, @ID_FRQNCY_DC_EXPNS, @ID_VRFCTN_DC, @CD_MONTH, @FL_OUTSIDE_DEP_PYMNT, @TX_VRFCTN_DC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_DEPENDENT_CARE_OTHER_PAYERAsync(short? ID_DC_OTHR_PAY, int? ID_DPNDNT_CARE, int? ID_MMBR, decimal? AM_DC_OTHR_PAY, decimal? AM_DC_OTHR_PAY_CLIENT_MNTHLY, decimal? AM_DC_OTHR_PAY_VNDR_MNTHLY, DateTime? DT_DC_OTHR_PAYER, string FL_DC_PAY_MMBR, decimal? ID_FRQNCY_DC_OTHR_PAYER, decimal? ID_VRFCTN_DC_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY_CLIENT_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY_CLIENT_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY_VNDR_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY_VNDR_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DC_OTHR_PAYER",
                    Value = DT_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DC_PAY_MMBR",
                    Size = 1,
                    Value = FL_DC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_DC_OTHR_PAYER",
                    Precision = 2,
                    Value = ID_FRQNCY_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC_OTHR_PAYER",
                    Precision = 2,
                    Value = ID_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_DEPENDENT_CARE_OTHER_PAYER] @ID_DC_OTHR_PAY, @ID_DPNDNT_CARE, @ID_MMBR, @AM_DC_OTHR_PAY, @AM_DC_OTHR_PAY_CLIENT_MNTHLY, @AM_DC_OTHR_PAY_VNDR_MNTHLY, @DT_DC_OTHR_PAYER, @FL_DC_PAY_MMBR, @ID_FRQNCY_DC_OTHR_PAYER, @ID_VRFCTN_DC_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_DEPENDENT_CARE_UPDTAsync(int? ID_DPNDNT_CARE, int? ID_DPNDNT, int? ID_MMBR, int? ID_MMBR1, int? ID_PRVDR_NAME, decimal? AM_DPNDNT_CARE_EXPNS, decimal? AM_PAID, decimal? AM_PAID_MNTHLY, string FL_ASSSTD_BY_OTHR, decimal? ID_FRQNCY_DC_EXPNS, decimal? ID_VRFCTN_DC, decimal? AM_DC_OTHR_PAY, string FL_DC_PAY_MMBR, int? ID_VRFCTN_DC_OTHR_PAYER, int? ID_UNERND_INCM, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_MNTHLY, OutputParameter<int?> ID_DC_OTHR_PAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_DC_OTHR_PAY = new SqlParameter
            {
                ParameterName = "ID_DC_OTHR_PAY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_DC_OTHR_PAY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT",
                    Value = ID_DPNDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DPNDNT_CARE_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DPNDNT_CARE_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAID_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAID_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_DC_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_DC_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC",
                    Precision = 2,
                    Value = ID_VRFCTN_DC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterID_DC_OTHR_PAY,
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DC_PAY_MMBR",
                    Size = 1,
                    Value = FL_DC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC_OTHR_PAYER",
                    Value = ID_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_DEPENDENT_CARE_UPDT] @ID_DPNDNT_CARE, @ID_DPNDNT, @ID_MMBR, @ID_MMBR1, @ID_PRVDR_NAME, @AM_DPNDNT_CARE_EXPNS, @AM_PAID, @AM_PAID_MNTHLY, @FL_ASSSTD_BY_OTHR, @ID_FRQNCY_DC_EXPNS, @ID_VRFCTN_DC, @ID_DC_OTHR_PAY OUTPUT, @AM_DC_OTHR_PAY, @FL_DC_PAY_MMBR, @ID_VRFCTN_DC_OTHR_PAYER, @ID_UNERND_INCM, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_MNTHLY", sqlParameters, cancellationToken);

            ID_DC_OTHR_PAY.SetValue(parameterID_DC_OTHR_PAY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_DISASTERAsync(int? ID_DISASTER, string NM_DISASTER, DateTime? DT_DISASTER_BEGIN, DateTime? DT_DISASTER_END, string TX_DISASTER_DESC, string FL_CANCELLED, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DISASTER",
                    Size = 100,
                    Value = NM_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DISASTER_BEGIN",
                    Value = DT_DISASTER_BEGIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DISASTER_END",
                    Value = DT_DISASTER_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DISASTER_DESC",
                    Size = 100,
                    Value = TX_DISASTER_DESC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CANCELLED",
                    Size = 1,
                    Value = FL_CANCELLED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_DISASTER] @ID_DISASTER, @NM_DISASTER, @DT_DISASTER_BEGIN, @DT_DISASTER_END, @TX_DISASTER_DESC, @FL_CANCELLED", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_DISASTER_COUNTIESAsync(int? ID_DISASTER_CNTY, int? ID_DISASTER, string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER_CNTY",
                    Value = ID_DISASTER_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_DISASTER_COUNTIES] @ID_DISASTER_CNTY, @ID_DISASTER, @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_DPNDNT_CARE_OPAsync(int? ID_DC_OTHR_PAY, int? ID_DPNDNT_CARE, int? ID_MMBR, decimal? AM_DC_OTHR_PAY, string FL_DC_PAY_MMBR, int? ID_VRFCTN_DC_OTHR_PAYER, string TX_VRFCTN_DC_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DC_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DC_PAY_MMBR",
                    Size = 1,
                    Value = FL_DC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DC_OTHR_PAYER",
                    Value = ID_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_DC_OTHR_PAYER",
                    Value = TX_VRFCTN_DC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_DPNDNT_CARE_OP] @ID_DC_OTHR_PAY, @ID_DPNDNT_CARE, @ID_MMBR, @AM_DC_OTHR_PAY, @FL_DC_PAY_MMBR, @ID_VRFCTN_DC_OTHR_PAYER, @TX_VRFCTN_DC_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_DPNDNT_CARE_UNEARNAsync(int? ID_UNERND_INCM, int? ID_DC_OTHR_PAY, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_MNTHLY, string CD_MONTH, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DC_OTHR_PAY",
                    Value = ID_DC_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_DPNDNT_CARE_UNEARN] @ID_UNERND_INCM, @ID_DC_OTHR_PAY, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_MNTHLY, @CD_MONTH, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_DpndntCR_CDMTHAsync(int? ID_DPNDNT_CARE, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE",
                    Value = ID_DPNDNT_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_DpndntCR_CDMTH] @ID_DPNDNT_CARE, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EmployerAsync(int? ID_EMPLOYER, decimal? CD_CNTY, string NM_EMPLYR, string NO_EMPLYR_PHONE, string AD_STREET1, string AD_CITY, string AD_STATE, string AD_ZIP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLOYER",
                    Value = ID_EMPLOYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Precision = 18,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_Employer] @ID_EMPLOYER, @CD_CNTY, @NM_EMPLYR, @NO_EMPLYR_PHONE, @AD_STREET1, @AD_CITY, @AD_STATE, @AD_ZIP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_Employer_in_EmploymentAsync(int? ID_EMPLYMNT, int? ID_EMPLOYER, string NM_EMPLYR, string NO_EMPLYR_PHONE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLOYER",
                    Value = ID_EMPLOYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_Employer_in_Employment] @ID_EMPLYMNT, @ID_EMPLOYER, @NM_EMPLYR, @NO_EMPLYR_PHONE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENTAsync(int? ID_EMPLYMNT, int? ID_MMBR, int? ID_INCM_TYPE, decimal? AM_AVG_MNTHLY, decimal? AM_CNTRCT_INCM_MNTHLY, decimal? AM_ERND_SELF_EMPLYMNT_INCM, decimal? AM_INCM_PER_FREQ, decimal? AM_INCM_MNTHLY, decimal? AM_TTL_INCM, decimal? AM_TTL_INCM_NXT_MNTH, decimal? AM_TTL_INCM_PRVS_MNTH, decimal? AM_UNERND_SELF_EMPLYMNT_INCM, decimal? AM_YRLY_SLRY, DateTime? DT_EMPLYMNT_END, DateTime? DT_EMPLYMNT_STRT, string FL_GOOD_RSN_QUIT, string FL_QLFY_STMPS, string FL_SELF_EMPLYD, string FL_TTL_RPRSNTTV_PAY, string FL_VLNTRY_QUIT, decimal? ID_FRQNCY_EMPLYMNT, int? ID_VRFCTN_EMPLYMNT, string NM_EMPLYR, string NM_INSRNC_WCOMP, string NM_PRPRTY, decimal? NO_HOURS_MNG_PRPRTY, string NO_EMPLYR_PHONE, decimal? NO_MNTHS, string TX_BSNSS_TYPE, string TX_PAY_DAY, string TX_RSN_QUIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AVG_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AVG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CNTRCT_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CNTRCT_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_NXT_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_PRVS_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_PRVS_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_YRLY_SLRY",
                    Precision = 5,
                    Scale = 2,
                    Value = AM_YRLY_SLRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_STRT",
                    Value = DT_EMPLYMNT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GOOD_RSN_QUIT",
                    Size = 1,
                    Value = FL_GOOD_RSN_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_QLFY_STMPS",
                    Size = 1,
                    Value = FL_QLFY_STMPS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SELF_EMPLYD",
                    Size = 1,
                    Value = FL_SELF_EMPLYD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TTL_RPRSNTTV_PAY",
                    Size = 1,
                    Value = FL_TTL_RPRSNTTV_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_VLNTRY_QUIT",
                    Size = 1,
                    Value = FL_VLNTRY_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 1,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_INSRNC_WCOMP",
                    Size = 50,
                    Value = NM_INSRNC_WCOMP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRPRTY",
                    Size = 50,
                    Value = NM_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_MNG_PRPRTY",
                    Precision = 3,
                    Value = NO_HOURS_MNG_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS",
                    Precision = 2,
                    Value = NO_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_BSNSS_TYPE",
                    Value = TX_BSNSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAY_DAY",
                    Size = 10,
                    Value = TX_PAY_DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RSN_QUIT",
                    Value = TX_RSN_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT] @ID_EMPLYMNT, @ID_MMBR, @ID_INCM_TYPE, @AM_AVG_MNTHLY, @AM_CNTRCT_INCM_MNTHLY, @AM_ERND_SELF_EMPLYMNT_INCM, @AM_INCM_PER_FREQ, @AM_INCM_MNTHLY, @AM_TTL_INCM, @AM_TTL_INCM_NXT_MNTH, @AM_TTL_INCM_PRVS_MNTH, @AM_UNERND_SELF_EMPLYMNT_INCM, @AM_YRLY_SLRY, @DT_EMPLYMNT_END, @DT_EMPLYMNT_STRT, @FL_GOOD_RSN_QUIT, @FL_QLFY_STMPS, @FL_SELF_EMPLYD, @FL_TTL_RPRSNTTV_PAY, @FL_VLNTRY_QUIT, @ID_FRQNCY_EMPLYMNT, @ID_VRFCTN_EMPLYMNT, @NM_EMPLYR, @NM_INSRNC_WCOMP, @NM_PRPRTY, @NO_HOURS_MNG_PRPRTY, @NO_EMPLYR_PHONE, @NO_MNTHS, @TX_BSNSS_TYPE, @TX_PAY_DAY, @TX_RSN_QUIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENT_EarnedAsync(int? ID_EMPLYMNT, int? ID_INCM_TYPE, decimal? AM_AVG_MNTHLY, decimal? AM_CNTRCT_INCM_MNTHLY, decimal? AM_INCM_PER_FREQ, decimal? AM_INCM_MNTHLY, decimal? AM_TTL_INCM_NXT_MNTH, decimal? AM_TTL_INCM_PRVS_MNTH, string DT_EMPLYMNT_END, string DT_EMPLYMNT_STRT, int? ID_VRFCTN_EMPLYMNT, string NM_EMPLYR, string NO_EMPLYR_PHONE, decimal? NO_MNTHS, string TX_PAY_DAY, int? HRS_WORKED, int? HRS_WORKED2, string TX_SLCTD_FLDS, string TX_VRFCTN_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AVG_MNTHLY",
                    Precision = 18,
                    Value = AM_AVG_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CNTRCT_INCM_MNTHLY",
                    Precision = 18,
                    Value = AM_CNTRCT_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 18,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_MNTHLY",
                    Precision = 18,
                    Value = AM_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_NXT_MNTH",
                    Precision = 18,
                    Value = AM_TTL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_PRVS_MNTH",
                    Precision = 18,
                    Value = AM_TTL_INCM_PRVS_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Size = 20,
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_STRT",
                    Size = 20,
                    Value = DT_EMPLYMNT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS",
                    Precision = 2,
                    Value = NO_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAY_DAY",
                    Size = 10,
                    Value = TX_PAY_DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_WORKED",
                    Value = HRS_WORKED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HRS_WORKED2",
                    Value = HRS_WORKED2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SLCTD_FLDS",
                    Value = TX_SLCTD_FLDS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT_Earned] @ID_EMPLYMNT, @ID_INCM_TYPE, @AM_AVG_MNTHLY, @AM_CNTRCT_INCM_MNTHLY, @AM_INCM_PER_FREQ, @AM_INCM_MNTHLY, @AM_TTL_INCM_NXT_MNTH, @AM_TTL_INCM_PRVS_MNTH, @DT_EMPLYMNT_END, @DT_EMPLYMNT_STRT, @ID_VRFCTN_EMPLYMNT, @NM_EMPLYR, @NO_EMPLYR_PHONE, @NO_MNTHS, @TX_PAY_DAY, @HRS_WORKED, @HRS_WORKED2, @TX_SLCTD_FLDS, @TX_VRFCTN_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENT_Earned_AddressAsync(int? ID_EMPLYMNT, string DT_EMPLYMNT_END, string DT_EMPLYMNT_STRT, int? ID_VRFCTN_EMPLYMNT, string NM_EMPLYR, string NO_EMPLYR_PHONE, string ADDRLN1, string ADDRLN2, string CITY, string STATE, string ZIP, int? ID_MMBR, int? ID_CNTY_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Size = 20,
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_STRT",
                    Size = 20,
                    Value = DT_EMPLYMNT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN1",
                    Size = 25,
                    Value = ADDRLN1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRLN2",
                    Size = 25,
                    Value = ADDRLN2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CITY",
                    Size = 25,
                    Value = CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STATE",
                    Size = 2,
                    Value = STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ZIP",
                    Size = 5,
                    Value = ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT_Earned_Address] @ID_EMPLYMNT, @DT_EMPLYMNT_END, @DT_EMPLYMNT_STRT, @ID_VRFCTN_EMPLYMNT, @NM_EMPLYR, @NO_EMPLYR_PHONE, @ADDRLN1, @ADDRLN2, @CITY, @STATE, @ZIP, @ID_MMBR, @ID_CNTY_STATE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENT_Earned_CtrAsync(int? ID_EMPLYMNT, decimal? ID_INCM_TYPE, decimal? AM_CNTRCT_INCM_MNTHLY, decimal? AM_INCM_PER_FREQ, decimal? NO_MNTHS, int? IDVER, string TX_SLCTD_FLDS, string TX_VRFCTN_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Precision = 2,
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CNTRCT_INCM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CNTRCT_INCM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS",
                    Precision = 2,
                    Value = NO_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IDVER",
                    Value = IDVER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SLCTD_FLDS",
                    Value = TX_SLCTD_FLDS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT_Earned_Ctr] @ID_EMPLYMNT, @ID_INCM_TYPE, @AM_CNTRCT_INCM_MNTHLY, @AM_INCM_PER_FREQ, @NO_MNTHS, @IDVER, @TX_SLCTD_FLDS, @TX_VRFCTN_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENT_RBAsync(int? ID_MMBR, decimal? AM_INCM_PER_FREQ, decimal? AM_TTL_INCM_NXT_MNTH, decimal? AM_TTL_INCM_PRVS_MNTH, int? ID_VRFCTN_EMPLYMNT, string SQLTYPE, string TX_VRFCTN_EMPLYMNT, OutputParameter<int?> IDEMPLOY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIDEMPLOY = new SqlParameter
            {
                ParameterName = "IDEMPLOY",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IDEMPLOY?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterIDEMPLOY,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_NXT_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_PRVS_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_PRVS_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT_RB] @IDEMPLOY OUTPUT, @ID_MMBR, @AM_INCM_PER_FREQ, @AM_TTL_INCM_NXT_MNTH, @AM_TTL_INCM_PRVS_MNTH, @ID_VRFCTN_EMPLYMNT, @SQLTYPE, @TX_VRFCTN_EMPLYMNT", sqlParameters, cancellationToken);

            IDEMPLOY.SetValue(parameterIDEMPLOY.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENT_ReminderAsync(int? ID_EMPLYMNT, int? ID_WRKR_RMNDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_RMNDR",
                    Value = ID_WRKR_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT_Reminder] @ID_EMPLYMNT, @ID_WRKR_RMNDR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENT_SelfAsync(int? ID_EMPLYMNT, int? ID_INCM_TYPE, string TX_BSNSS_TYPE, string NM_EMPLYR, int? ID_VRFCTN_EMPLYMNT, decimal? ID_FRQNCY_EMPLYMNT, decimal? AM_INCM_PER_FREQ, decimal? AM_ERND_SELF_EMPLYMNT_INCM, decimal? AM_UNERND_SELF_EMPLYMNT_INCM, string NM_PRPRTY, decimal? NO_HOURS_MNG_PRPRTY, decimal? NO_HOURS_MNG_PRPRTY2, string FL_TTL_RPRSNTTV_PAY, decimal? AM_ERND_SELF_EMPLYMNT_INCM2, decimal? AM_UNERND_SELF_EMPLYMNT_INCM2, string TX_SLCTD_FLDS, string TX_VRFCTN_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INCM_TYPE",
                    Value = ID_INCM_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_BSNSS_TYPE",
                    Value = TX_BSNSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 2,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_SELF_EMPLYMNT_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_SELF_EMPLYMNT_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRPRTY",
                    Size = 50,
                    Value = NM_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_MNG_PRPRTY",
                    Precision = 3,
                    Value = NO_HOURS_MNG_PRPRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS_MNG_PRPRTY2",
                    Precision = 3,
                    Value = NO_HOURS_MNG_PRPRTY2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TTL_RPRSNTTV_PAY",
                    Size = 1,
                    Value = FL_TTL_RPRSNTTV_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ERND_SELF_EMPLYMNT_INCM2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ERND_SELF_EMPLYMNT_INCM2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_SELF_EMPLYMNT_INCM2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_SELF_EMPLYMNT_INCM2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SLCTD_FLDS",
                    Value = TX_SLCTD_FLDS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT_Self] @ID_EMPLYMNT, @ID_INCM_TYPE, @TX_BSNSS_TYPE, @NM_EMPLYR, @ID_VRFCTN_EMPLYMNT, @ID_FRQNCY_EMPLYMNT, @AM_INCM_PER_FREQ, @AM_ERND_SELF_EMPLYMNT_INCM, @AM_UNERND_SELF_EMPLYMNT_INCM, @NM_PRPRTY, @NO_HOURS_MNG_PRPRTY, @NO_HOURS_MNG_PRPRTY2, @FL_TTL_RPRSNTTV_PAY, @AM_ERND_SELF_EMPLYMNT_INCM2, @AM_UNERND_SELF_EMPLYMNT_INCM2, @TX_SLCTD_FLDS, @TX_VRFCTN_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EMPLOYMENT_StrikerAsync(int? ID_EMPLYMNT, int? ID_MMBR, decimal? AM_INCM_PER_FREQ, decimal? AM_TTL_INCM_NXT_MNTH, decimal? AM_TTL_INCM_PRVS_MNTH, decimal? ID_FRQNCY_EMPLYMNT, string NM_EMPLYR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_PER_FREQ",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_PER_FREQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_NXT_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_INCM_PRVS_MNTH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_INCM_PRVS_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_EMPLYMNT",
                    Precision = 1,
                    Value = ID_FRQNCY_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EMPLOYMENT_Striker] @ID_EMPLYMNT, @ID_MMBR, @AM_INCM_PER_FREQ, @AM_TTL_INCM_NXT_MNTH, @AM_TTL_INCM_PRVS_MNTH, @ID_FRQNCY_EMPLYMNT, @NM_EMPLYR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_EXCLUDE_MMBR_FLGAsync(int? ID_NEWMBR, string FL_INVALID_MEMBER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INVALID_MEMBER",
                    Size = 1,
                    Value = FL_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_EXCLUDE_MMBR_FLG] @ID_NEWMBR, @FL_INVALID_MEMBER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_FA_STATUSAsync(int? ID_FA_STTS, int? ID_MMBR, short? ID_CNTY_STATE, DateTime? DT_CASE_CLSD_WILLORHAS, string FL_FA_CASE_CLSD, string FL_LAST_MNTH_FA, string FL_RECERT, string FL_THIS_CNTY, int? ID_VRFCTN_FA_STTS, string TX_CNTCT_INFO, string TX_CNTY_OTHR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_STTS",
                    Value = ID_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_CLSD_WILLORHAS",
                    Value = DT_CASE_CLSD_WILLORHAS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FA_CASE_CLSD",
                    Size = 1,
                    Value = FL_FA_CASE_CLSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LAST_MNTH_FA",
                    Size = 1,
                    Value = FL_LAST_MNTH_FA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RECERT",
                    Size = 1,
                    Value = FL_RECERT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_THIS_CNTY",
                    Size = 1,
                    Value = FL_THIS_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_FA_STTS",
                    Value = ID_VRFCTN_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTCT_INFO",
                    Value = TX_CNTCT_INFO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTY_OTHR",
                    Value = TX_CNTY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_FA_STATUS] @ID_FA_STTS, @ID_MMBR, @ID_CNTY_STATE, @DT_CASE_CLSD_WILLORHAS, @FL_FA_CASE_CLSD, @FL_LAST_MNTH_FA, @FL_RECERT, @FL_THIS_CNTY, @ID_VRFCTN_FA_STTS, @TX_CNTCT_INFO, @TX_CNTY_OTHR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_FA_STATUS_2ndMonthAsync(int? ID_FA_STTS, int? ID_MMBR, short? ID_CNTY_STATE, DateTime? DT_CASE_CLSD_WILLORHAS, string FL_FA_CASE_CLSD, string FL_LAST_MNTH_FA, string FL_RECERT, string FL_THIS_CNTY, int? ID_VRFCTN_FA_STTS, string TX_CNTCT_INFO, string TX_CNTY_OTHR, int? ID_WORK_CODE, int? ID_REF_CERT_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FA_STTS",
                    Value = ID_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_CLSD_WILLORHAS",
                    Value = DT_CASE_CLSD_WILLORHAS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FA_CASE_CLSD",
                    Size = 1,
                    Value = FL_FA_CASE_CLSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LAST_MNTH_FA",
                    Size = 1,
                    Value = FL_LAST_MNTH_FA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RECERT",
                    Size = 1,
                    Value = FL_RECERT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_THIS_CNTY",
                    Size = 1,
                    Value = FL_THIS_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_FA_STTS",
                    Value = ID_VRFCTN_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTCT_INFO",
                    Value = TX_CNTCT_INFO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTY_OTHR",
                    Value = TX_CNTY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_FA_STATUS_2ndMonth] @ID_FA_STTS, @ID_MMBR, @ID_CNTY_STATE, @DT_CASE_CLSD_WILLORHAS, @FL_FA_CASE_CLSD, @FL_LAST_MNTH_FA, @FL_RECERT, @FL_THIS_CNTY, @ID_VRFCTN_FA_STTS, @TX_CNTCT_INFO, @TX_CNTY_OTHR, @ID_WORK_CODE, @ID_REF_CERT_ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_FL_NON_MMBRAsync(int? ID_MMBR, string FL_NON_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_FL_NON_MMBR] @ID_MMBR, @FL_NON_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_INSRNCE_CD_MONTHAsync(int? ID_INSRNC, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_INSRNCE_CD_MONTH] @ID_INSRNC, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_INSURANCEAsync(int? ID_INSRNC, decimal? ID_INSRNC_PAYER, decimal? AM_PREMIUM, decimal? AM_PREMIUM_MNTHLY, decimal? AM_PREMIUM_PAID, decimal? AM_TTL_PREMIUM_PAID, DateTime? DT_PREMIUM_PAID, string FL_INSRNC_PAY_ONGOING, decimal? ID_FRQNCY_PREMIUM, decimal? NO_HH_MMBR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC_PAYER",
                    Precision = 1,
                    Value = ID_INSRNC_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_PREMIUM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_PREMIUM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PREMIUM_PAID",
                    Value = DT_PREMIUM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAY_ONGOING",
                    Size = 1,
                    Value = FL_INSRNC_PAY_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PREMIUM",
                    Precision = 1,
                    Value = ID_FRQNCY_PREMIUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_MMBR",
                    Precision = 1,
                    Value = NO_HH_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_INSURANCE] @ID_INSRNC, @ID_INSRNC_PAYER, @AM_PREMIUM, @AM_PREMIUM_MNTHLY, @AM_PREMIUM_PAID, @AM_TTL_PREMIUM_PAID, @DT_PREMIUM_PAID, @FL_INSRNC_PAY_ONGOING, @ID_FRQNCY_PREMIUM, @NO_HH_MMBR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_IntervieweeInfo_CASEAsync(int? ID_CASE_NMBR, string CD_INTRVWEE_DSGNTN, string CD_MTHD_INTRVW, string FL_AR_FORM_SGND, string FL_CNTNUE_FA_SCRN, string FL_HH_CMPSTN_QSTNBL, string FL_HH_HMLS, int? ID_VRFCTN_HH, int? ID_VRFCTN_HH_CMPSTN, int? ID_VRFCTN_HH_RSDNCY, int? ID_VRFCTN_INTRVWEE, int? ID_MMBR, string FL_RM, string FL_LIFELINE, string TX_VRFCTN_HH, string TX_VRFCTN_HH_CMPSTN, string TX_VRFCTN_INTRVWEE, string TX_VRFCTN_RSDNCY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INTRVWEE_DSGNTN",
                    Size = 2,
                    Value = CD_INTRVWEE_DSGNTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MTHD_INTRVW",
                    Size = 6,
                    Value = CD_MTHD_INTRVW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AR_FORM_SGND",
                    Size = 1,
                    Value = FL_AR_FORM_SGND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CNTNUE_FA_SCRN",
                    Size = 1,
                    Value = FL_CNTNUE_FA_SCRN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HH_CMPSTN_QSTNBL",
                    Size = 1,
                    Value = FL_HH_CMPSTN_QSTNBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HH_HMLS",
                    Size = 1,
                    Value = FL_HH_HMLS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH",
                    Value = ID_VRFCTN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH_CMPSTN",
                    Value = ID_VRFCTN_HH_CMPSTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH_RSDNCY",
                    Value = ID_VRFCTN_HH_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INTRVWEE",
                    Value = ID_VRFCTN_INTRVWEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RM",
                    Size = 1,
                    Value = FL_RM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LIFELINE",
                    Size = 1,
                    Value = FL_LIFELINE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_HH",
                    Value = TX_VRFCTN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_HH_CMPSTN",
                    Value = TX_VRFCTN_HH_CMPSTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_INTRVWEE",
                    Value = TX_VRFCTN_INTRVWEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_RSDNCY",
                    Value = TX_VRFCTN_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_IntervieweeInfo_CASE] @ID_CASE_NMBR, @CD_INTRVWEE_DSGNTN, @CD_MTHD_INTRVW, @FL_AR_FORM_SGND, @FL_CNTNUE_FA_SCRN, @FL_HH_CMPSTN_QSTNBL, @FL_HH_HMLS, @ID_VRFCTN_HH, @ID_VRFCTN_HH_CMPSTN, @ID_VRFCTN_HH_RSDNCY, @ID_VRFCTN_INTRVWEE, @ID_MMBR, @FL_RM, @FL_LIFELINE, @TX_VRFCTN_HH, @TX_VRFCTN_HH_CMPSTN, @TX_VRFCTN_INTRVWEE, @TX_VRFCTN_RSDNCY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UPDT_MDCL_EXP_RXAsync(int? ID_MDCL_EXPNS, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_TTL_ONETIME_RX, decimal? AM_TTL_ONGOING_RX, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_INSRNC_PAID_ALL, string FL_ONETIME, string FL_ONETIME_USE, string FL_PAY_BILL_MNTHLY, string FL_AVG_ONETIME, int? ID_VRFCTN_MDCL_EXPNS, string NO_ACCT_MDCL, decimal? NO_MNTHS_RMNNG, int? ID_ME_OTHR_PAYER, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, int? ID_PRVDR_NAME, string NM_PRVDR, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_ONETIME_RX",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_ONETIME_RX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_ONGOING_RX",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_ONGOING_RX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME_USE",
                    Size = 1,
                    Value = FL_ONETIME_USE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_BILL_MNTHLY",
                    Size = 1,
                    Value = FL_PAY_BILL_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AVG_ONETIME",
                    Size = 1,
                    Value = FL_AVG_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UPDT_MDCL_EXP_RX] @ID_MDCL_EXPNS, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_TTL_ONETIME_RX, @AM_TTL_ONGOING_RX, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @FL_ONETIME_USE, @FL_PAY_BILL_MNTHLY, @FL_AVG_ONETIME, @ID_VRFCTN_MDCL_EXPNS, @NO_ACCT_MDCL, @NO_MNTHS_RMNNG, @ID_ME_OTHR_PAYER, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_PRVDR_NAME, @NM_PRVDR, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_MDCL_INSURANCEResult>> Updt_MDCL_INSURANCEAsync(int? ID_PRVDR_NAME, string NM_PRVDR, int? ID_INSRNC, decimal? ID_INSRNC_PAYER, decimal? AM_PREMIUM, decimal? AM_PREMIUM_MNTHLY, decimal? AM_TTL_PREMIUM_PAID, DateTime? DT_PREMIUM_PAID, decimal? ID_FRQNCY_PREMIUM, int? ID_VRFCTN_INSRNC, decimal? NO_HH_MMBR, int? ID_INSRNC_OTHR_PAYER, int? ID_MMBR, decimal? AM_PREMIUM_OTHR_PAYER, DateTime? DT_INSRNC_OTHR_PAYER, string FL_INSRNC_PAY_MMBR, string FL_INSRNC_PAY_ONGOING, string FL_PAY_HH_MMBR_MNTHLY, string FL_PAY_PREMIUM_CRRNT_MNTH, int? ID_VRFCTN_INSRNC_OTHR_PAYER, string CD_MONTH, string TX_VRFCTN_INSRNC, string TX_VRFCTN_INSRNC_OTHR_PAYER, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC",
                    Value = ID_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC_PAYER",
                    Precision = 1,
                    Value = ID_INSRNC_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TTL_PREMIUM_PAID",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TTL_PREMIUM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PREMIUM_PAID",
                    Value = DT_PREMIUM_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PREMIUM",
                    Precision = 1,
                    Value = ID_FRQNCY_PREMIUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INSRNC",
                    Value = ID_VRFCTN_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_MMBR",
                    Precision = 1,
                    Value = NO_HH_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSRNC_OTHR_PAYER",
                    Value = ID_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PREMIUM_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PREMIUM_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_INSRNC_OTHR_PAYER",
                    Value = DT_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAY_MMBR",
                    Size = 1,
                    Value = FL_INSRNC_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAY_ONGOING",
                    Size = 1,
                    Value = FL_INSRNC_PAY_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_HH_MMBR_MNTHLY",
                    Size = 1,
                    Value = FL_PAY_HH_MMBR_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_PREMIUM_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_PAY_PREMIUM_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INSRNC_OTHR_PAYER",
                    Value = ID_VRFCTN_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_INSRNC",
                    Value = TX_VRFCTN_INSRNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_INSRNC_OTHR_PAYER",
                    Value = TX_VRFCTN_INSRNC_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_MDCL_INSURANCEResult>("EXEC @returnValue = [dbo].[Updt_MDCL_INSURANCE] @ID_PRVDR_NAME, @NM_PRVDR, @ID_INSRNC, @ID_INSRNC_PAYER, @AM_PREMIUM, @AM_PREMIUM_MNTHLY, @AM_TTL_PREMIUM_PAID, @DT_PREMIUM_PAID, @ID_FRQNCY_PREMIUM, @ID_VRFCTN_INSRNC, @NO_HH_MMBR, @ID_INSRNC_OTHR_PAYER, @ID_MMBR, @AM_PREMIUM_OTHR_PAYER, @DT_INSRNC_OTHR_PAYER, @FL_INSRNC_PAY_MMBR, @FL_INSRNC_PAY_ONGOING, @FL_PAY_HH_MMBR_MNTHLY, @FL_PAY_PREMIUM_CRRNT_MNTH, @ID_VRFCTN_INSRNC_OTHR_PAYER, @CD_MONTH, @TX_VRFCTN_INSRNC, @TX_VRFCTN_INSRNC_OTHR_PAYER, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEALAsync(int? ID_MEAL, int? ID_MMBR, decimal? AM_MEAL_MMBR_PAY, decimal? NO_MEALS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL",
                    Value = ID_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MMBR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MMBR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS",
                    Precision = 2,
                    Value = NO_MEALS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEAL] @ID_MEAL, @ID_MMBR, @AM_MEAL_MMBR_PAY, @NO_MEALS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEAL_OTHERAsync(short? ID_MEAL_OTHER, int? ID_CASE_NMBR, string NM_MEAL_OTHR_LST, string NM_MEAL_OTHR_FRST, string NM_MEAL_OTHR_MDL, string NM_MEAL_OTHR_SFX, string CD_MONTH, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL_OTHER",
                    Value = ID_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_LST",
                    Size = 20,
                    Value = NM_MEAL_OTHR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_FRST",
                    Size = 20,
                    Value = NM_MEAL_OTHR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_MDL",
                    Size = 20,
                    Value = NM_MEAL_OTHR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MEAL_OTHR_SFX",
                    Size = 3,
                    Value = NM_MEAL_OTHR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEAL_OTHER] @ID_MEAL_OTHER, @ID_CASE_NMBR, @NM_MEAL_OTHR_LST, @NM_MEAL_OTHR_FRST, @NM_MEAL_OTHR_MDL, @NM_MEAL_OTHR_SFX, @CD_MONTH, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEAL_ROOM_EMPIDAsync(int? ID_MEAL, int? ID_ROOM, int? ID_EMPLYMNT, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL",
                    Value = ID_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ROOM",
                    Value = ID_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEAL_ROOM_EMPID] @ID_MEAL, @ID_ROOM, @ID_EMPLYMNT, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEAL_ROOM_RSRCIDAsync(int? ID_MEAL, int? ID_ROOM, int? ID_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL",
                    Value = ID_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ROOM",
                    Value = ID_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSRC",
                    Value = ID_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEAL_ROOM_RSRCID] @ID_MEAL, @ID_ROOM, @ID_RSRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEAL_RoomerBoarderAsync(int? ID_MMBR, short? ID_MEAL_OTHER, decimal? AM_MEAL_COST_HOH, decimal? AM_MEAL_MMBR_PAY, decimal? ID_FRQNCY_MEAL_COST, decimal? ID_FRQNCY_MEAL_PAY, int? ID_VRFCTN_MEAL, decimal? NO_MEALS, string CD_MONTH, string SQLTYPE, string TX_VRFCTN_MEAL, OutputParameter<int?> ID_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_MEAL = new SqlParameter
            {
                ParameterName = "ID_MEAL",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_MEAL?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_MEAL,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MEAL_OTHER",
                    Value = ID_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_COST_HOH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_COST_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MMBR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MMBR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_COST",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_PAY",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MEAL",
                    Value = ID_VRFCTN_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS",
                    Precision = 2,
                    Value = NO_MEALS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_MEAL",
                    Value = TX_VRFCTN_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEAL_RoomerBoarder] @ID_MEAL OUTPUT, @ID_MMBR, @ID_MEAL_OTHER, @AM_MEAL_COST_HOH, @AM_MEAL_MMBR_PAY, @ID_FRQNCY_MEAL_COST, @ID_FRQNCY_MEAL_PAY, @ID_VRFCTN_MEAL, @NO_MEALS, @CD_MONTH, @SQLTYPE, @TX_VRFCTN_MEAL", sqlParameters, cancellationToken);

            ID_MEAL.SetValue(parameterID_MEAL.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MED_EXP_CD_MONTHAsync(int? ID_MDCL_EXPNS, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MED_EXP_CD_MONTH] @ID_MDCL_EXPNS, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MED_EXP_TRIPSAsync(int? ID_MDCL_EXPNS, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_ONETIME, decimal? ID_VRFCTN_MDCL_EXPNS, int? ID_VRFCTN_RMNNG, decimal? NO_MNTHS_RMNNG, int? ID_ME_OTHR_PAYER, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, int? ID_PRVDR_NAME, string NM_PRVDR, decimal? AM_FLAT_FEE, string FL_DRVS_SELF, string FL_PAY_FLAT_FEE, int? NO_MILES_PER_MNTH, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Precision = 2,
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RMNNG",
                    Value = ID_VRFCTN_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_FLAT_FEE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DRVS_SELF",
                    Size = 1,
                    Value = FL_DRVS_SELF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_FLAT_FEE",
                    Size = 1,
                    Value = FL_PAY_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MILES_PER_MNTH",
                    Value = NO_MILES_PER_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MED_EXP_TRIPS] @ID_MDCL_EXPNS, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_ONETIME, @ID_VRFCTN_MDCL_EXPNS, @ID_VRFCTN_RMNNG, @NO_MNTHS_RMNNG, @ID_ME_OTHR_PAYER, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_PRVDR_NAME, @NM_PRVDR, @AM_FLAT_FEE, @FL_DRVS_SELF, @FL_PAY_FLAT_FEE, @NO_MILES_PER_MNTH, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEDICAL_EXPENSEAsync(int? ID_MDCL_EXPNS, decimal? AM_AGREED_MNTHLY, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_INSRNC_PAID_ALL, string FL_ONETIME, string FL_RPYMNT_AGRMNT, int? ID_VRFCTN_MDCL_EXPNS, string NO_ACCT_MDCL, decimal? NO_MNTHS_OWED, decimal? NO_MNTHS_RMNNG, int? ID_ME_OTHR_PAYER, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, int? ID_PRVDR_NAME, string NM_PRVDR, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AGREED_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AGREED_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPYMNT_AGRMNT",
                    Size = 1,
                    Value = FL_RPYMNT_AGRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_OWED",
                    Precision = 3,
                    Value = NO_MNTHS_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEDICAL_EXPENSE] @ID_MDCL_EXPNS, @AM_AGREED_MNTHLY, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @FL_RPYMNT_AGRMNT, @ID_VRFCTN_MDCL_EXPNS, @NO_ACCT_MDCL, @NO_MNTHS_OWED, @NO_MNTHS_RMNNG, @ID_ME_OTHR_PAYER, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_PRVDR_NAME, @NM_PRVDR, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEDICAL_EXPENSE_OTHER_PAYERAsync(int? ID_MMBR, int? ID_MDCL_EXPNS, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEDICAL_EXPENSE_OTHER_PAYER] @ID_MMBR, @ID_MDCL_EXPNS, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEDICAL_NOTESAsync(int? ID_MDCL_NOTES, int? ID_MDCL_EXPNS, decimal? ID_REF_MDCL_NOTE_TYPE, string TX_MDCL_NOTES_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_NOTES",
                    Value = ID_MDCL_NOTES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_MDCL_NOTE_TYPE",
                    Precision = 2,
                    Value = ID_REF_MDCL_NOTE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MDCL_NOTES_DSCR",
                    Size = 100,
                    Value = TX_MDCL_NOTES_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEDICAL_NOTES] @ID_MDCL_NOTES, @ID_MDCL_EXPNS, @ID_REF_MDCL_NOTE_TYPE, @TX_MDCL_NOTES_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEDL_EXP_APPLNCAsync(int? ID_MDCL_EXPNS, decimal? AM_AGREED_MNTHLY, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_INSRNC_PAID_ALL, string FL_ONETIME, string FL_RPYMNT_AGRMNT, int? ID_VRFCTN_MDCL_EXPNS, string NO_ACCT_MDCL, decimal? NO_MNTHS_OWED, decimal? NO_MNTHS_RMNNG, int? ID_ME_OTHR_PAYER, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, int? ID_PRVDR_NAME, string NM_PRVDR, string TX_MDCTN_APPLNC_DSCR, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AGREED_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AGREED_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPYMNT_AGRMNT",
                    Size = 1,
                    Value = FL_RPYMNT_AGRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_OWED",
                    Precision = 3,
                    Value = NO_MNTHS_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MDCTN_APPLNC_DSCR",
                    Size = 100,
                    Value = TX_MDCTN_APPLNC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEDL_EXP_APPLNC] @ID_MDCL_EXPNS, @AM_AGREED_MNTHLY, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @FL_RPYMNT_AGRMNT, @ID_VRFCTN_MDCL_EXPNS, @NO_ACCT_MDCL, @NO_MNTHS_OWED, @NO_MNTHS_RMNNG, @ID_ME_OTHR_PAYER, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_PRVDR_NAME, @NM_PRVDR, @TX_MDCTN_APPLNC_DSCR, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEDL_EXP_ONGOINGAsync(int? ID_ME_ONGOING, decimal? AM_MNTHLY_ONGOING, DateTime? DT_TRNSCTN, decimal? NO_OF_MNTHS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ME_ONGOING",
                    Value = ID_ME_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MNTHLY_ONGOING",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MNTHLY_ONGOING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_TRNSCTN",
                    Value = DT_TRNSCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_OF_MNTHS",
                    Precision = 2,
                    Value = NO_OF_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEDL_EXP_ONGOING] @ID_ME_ONGOING, @AM_MNTHLY_ONGOING, @DT_TRNSCTN, @NO_OF_MNTHS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBERAsync(int? ID_MMBR, int? ID_CASE_NMBR, short? ID_RACE_CODE, short? ID_REF_CERT_ELIG, short? ID_WORK_CODE, short? ID_REF_CERT_ELIG2, short? ID_WORK_CODE2, string CD_CASE_CRTD, decimal? CD_EDCTN_LVL, string CD_SEX, DateTime? DT_BRTH, string FL_ABAWD, string CD_CNVCTD_FLN, string FL_CTGRCLLY_ELGBL, string FL_CRRNT_FS_CRTFD, string FL_DHR_EMPL, string CD_DSQLFD_PRTCPNT, string FL_ELGBL_ALIEN, string CD_FLEEING_VLTR, string FL_FRMR_HH_MMBR, string CD_FRDLNT_MSRPRSNTTN, string FL_GIVE_FA_MONEY, string FL_GROUP_HOME, string FL_HOH, string FL_IN_SCHOOL, string FL_MGRNT_SSNL, string FL_NON_MMBR, string FL_NON_MMBR_RSDNT, string FL_PAYS_BILLS, string FL_PAYS_MEAL, string FL_PAYS_ROOM, string FL_PRNTL_GDNC, string FL_PRCHS_PRPRS, string CD_QLTY_SLLNG, string FL_RM, string CD_RSDNT_TRTMNT, string FL_SNCTN, string CD_STMPS_MISUSE, string FL_US_CTZN, string FL_WRK_RGSTRTN_EXMPT, string FL_WRKNG, int? ID_VRFCTN_ALIEN_STTS, int? ID_VRFCTN_EXPDT, string NO_SSN, string NO_CELLPHONE, string NM_MMBR_LST, string NM_MMBR_FRST, string NM_MMBR_MDL, string NM_MMBR_SFX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG2",
                    Value = ID_REF_CERT_ELIG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE2",
                    Value = ID_WORK_CODE2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CRTD",
                    Size = 1,
                    Value = CD_CASE_CRTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EDCTN_LVL",
                    Precision = 2,
                    Value = CD_EDCTN_LVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SEX",
                    Size = 1,
                    Value = CD_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BRTH",
                    Value = DT_BRTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ABAWD",
                    Size = 1,
                    Value = FL_ABAWD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNVCTD_FLN",
                    Size = 1,
                    Value = CD_CNVCTD_FLN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CTGRCLLY_ELGBL",
                    Size = 1,
                    Value = FL_CTGRCLLY_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CRRNT_FS_CRTFD",
                    Size = 1,
                    Value = FL_CRRNT_FS_CRTFD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DHR_EMPL",
                    Size = 1,
                    Value = FL_DHR_EMPL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DSQLFD_PRTCPNT",
                    Size = 1,
                    Value = CD_DSQLFD_PRTCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_ALIEN",
                    Size = 1,
                    Value = FL_ELGBL_ALIEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FLEEING_VLTR",
                    Size = 1,
                    Value = CD_FLEEING_VLTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FRMR_HH_MMBR",
                    Size = 1,
                    Value = FL_FRMR_HH_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FRDLNT_MSRPRSNTTN",
                    Size = 1,
                    Value = CD_FRDLNT_MSRPRSNTTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GIVE_FA_MONEY",
                    Size = 1,
                    Value = FL_GIVE_FA_MONEY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GROUP_HOME",
                    Size = 1,
                    Value = FL_GROUP_HOME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HOH",
                    Size = 1,
                    Value = FL_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_IN_SCHOOL",
                    Size = 1,
                    Value = FL_IN_SCHOOL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MGRNT_SSNL",
                    Size = 1,
                    Value = FL_MGRNT_SSNL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR_RSDNT",
                    Size = 1,
                    Value = FL_NON_MMBR_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_BILLS",
                    Size = 1,
                    Value = FL_PAYS_BILLS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_MEAL",
                    Size = 1,
                    Value = FL_PAYS_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_ROOM",
                    Size = 1,
                    Value = FL_PAYS_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRNTL_GDNC",
                    Size = 1,
                    Value = FL_PRNTL_GDNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRCHS_PRPRS",
                    Size = 1,
                    Value = FL_PRCHS_PRPRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_QLTY_SLLNG",
                    Size = 1,
                    Value = CD_QLTY_SLLNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RM",
                    Size = 1,
                    Value = FL_RM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSDNT_TRTMNT",
                    Size = 1,
                    Value = CD_RSDNT_TRTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SNCTN",
                    Size = 1,
                    Value = FL_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_STMPS_MISUSE",
                    Size = 1,
                    Value = CD_STMPS_MISUSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_US_CTZN",
                    Size = 1,
                    Value = FL_US_CTZN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRK_RGSTRTN_EXMPT",
                    Size = 1,
                    Value = FL_WRK_RGSTRTN_EXMPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRKNG",
                    Size = 1,
                    Value = FL_WRKNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ALIEN_STTS",
                    Value = ID_VRFCTN_ALIEN_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EXPDT",
                    Value = ID_VRFCTN_EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CELLPHONE",
                    Size = 10,
                    Value = NO_CELLPHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_MDL",
                    Size = 20,
                    Value = NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_SFX",
                    Size = 3,
                    Value = NM_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER] @ID_MMBR, @ID_CASE_NMBR, @ID_RACE_CODE, @ID_REF_CERT_ELIG, @ID_WORK_CODE, @ID_REF_CERT_ELIG2, @ID_WORK_CODE2, @CD_CASE_CRTD, @CD_EDCTN_LVL, @CD_SEX, @DT_BRTH, @FL_ABAWD, @CD_CNVCTD_FLN, @FL_CTGRCLLY_ELGBL, @FL_CRRNT_FS_CRTFD, @FL_DHR_EMPL, @CD_DSQLFD_PRTCPNT, @FL_ELGBL_ALIEN, @CD_FLEEING_VLTR, @FL_FRMR_HH_MMBR, @CD_FRDLNT_MSRPRSNTTN, @FL_GIVE_FA_MONEY, @FL_GROUP_HOME, @FL_HOH, @FL_IN_SCHOOL, @FL_MGRNT_SSNL, @FL_NON_MMBR, @FL_NON_MMBR_RSDNT, @FL_PAYS_BILLS, @FL_PAYS_MEAL, @FL_PAYS_ROOM, @FL_PRNTL_GDNC, @FL_PRCHS_PRPRS, @CD_QLTY_SLLNG, @FL_RM, @CD_RSDNT_TRTMNT, @FL_SNCTN, @CD_STMPS_MISUSE, @FL_US_CTZN, @FL_WRK_RGSTRTN_EXMPT, @FL_WRKNG, @ID_VRFCTN_ALIEN_STTS, @ID_VRFCTN_EXPDT, @NO_SSN, @NO_CELLPHONE, @NM_MMBR_LST, @NM_MMBR_FRST, @NM_MMBR_MDL, @NM_MMBR_SFX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_ADDEDAsync(int? ID_MMBR1, int? ID_MMBR2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_ADDED] @ID_MMBR1, @ID_MMBR2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_CD_CASE_CRTDAsync(int? NO_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_CD_CASE_CRTD] @NO_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_CertEligAsync(int? ID_MMBR, string CD_CERT_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_CertElig] @ID_MMBR, @CD_CERT_ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_RoomerBoarderAsync(int? ID_MMBR, int? ID_REF_CERT_ELIG, int? ID_REF_CERT_ELIG_MNTH2, string FL_PAYS_MEAL, string FL_PAYS_ROOM, int? NO_BRDR_HH, string FL_NON_MMBR, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG_MNTH2",
                    Value = ID_REF_CERT_ELIG_MNTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_MEAL",
                    Size = 1,
                    Value = FL_PAYS_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAYS_ROOM",
                    Size = 1,
                    Value = FL_PAYS_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_BRDR_HH",
                    Value = NO_BRDR_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_RoomerBoarder] @ID_MMBR, @ID_REF_CERT_ELIG, @ID_REF_CERT_ELIG_MNTH2, @FL_PAYS_MEAL, @FL_PAYS_ROOM, @NO_BRDR_HH, @FL_NON_MMBR, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SCIANDMMBRAsync(int? ID_MMBR, int? DPNDNT_SCINBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DPNDNT_SCINBR",
                    Value = DPNDNT_SCINBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SCIANDMMBR] @ID_MMBR, @DPNDNT_SCINBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SCINBRAsync(int? ID_MMBR, int? DPNDNT_SCINBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DPNDNT_SCINBR",
                    Value = DPNDNT_SCINBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SCINBR] @ID_MMBR, @DPNDNT_SCINBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SCINBR_TO_AAsync(int? ID_MMBR, int? DPNDNT_SCINBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DPNDNT_SCINBR",
                    Value = DPNDNT_SCINBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SCINBR_TO_A] @ID_MMBR, @DPNDNT_SCINBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SCINBRAAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SCINBRA] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SCINBRSAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SCINBRS] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SCINBRTO99Async(int? ID_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE",
                    Value = ID_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SCINBRTO99] @ID_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SEXRACEAsync(int? ID_MMBR, short? ID_RACE_CODE, string CD_SEX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SEX",
                    Size = 1,
                    Value = CD_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SEXRACE] @ID_MMBR, @ID_RACE_CODE, @CD_SEX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_SSNAsync(int? ID_MMBR, string NO_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_SSN] @ID_MMBR, @NO_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_STATUS_SSNAsync(int? ID_MMBR, string NO_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_STATUS_SSN] @ID_MMBR, @NO_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_TRNSFR_RSRCAsync(int? ID_MMBR_RSRC, short? ID_RSRC_CODE, int? ID_MMBR, decimal? AM_TRNSFR_RSRC_RCVD, decimal? AM_VALUE, DateTime? DT_ACTN_TRNSFR_RSRC, string FL_EXCLD, string FL_TRNSFR_QLFY_FA, string TX_DSPSL_RSN, string CD_MONTH, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR_RSRC",
                    Value = ID_MMBR_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TRNSFR_RSRC_RCVD",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TRNSFR_RSRC_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_VALUE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_VALUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ACTN_TRNSFR_RSRC",
                    Value = DT_ACTN_TRNSFR_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXCLD",
                    Size = 1,
                    Value = FL_EXCLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TRNSFR_QLFY_FA",
                    Size = 1,
                    Value = FL_TRNSFR_QLFY_FA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DSPSL_RSN",
                    Value = TX_DSPSL_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_TRNSFR_RSRC] @ID_MMBR_RSRC, @ID_RSRC_CODE, @ID_MMBR, @AM_TRNSFR_RSRC_RCVD, @AM_VALUE, @DT_ACTN_TRNSFR_RSRC, @FL_EXCLD, @FL_TRNSFR_QLFY_FA, @TX_DSPSL_RSN, @CD_MONTH, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBER_VOTERANSAsync(int? ID_MMBR, string YESORNO, string ANSTEXT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "YESORNO",
                    Size = 1,
                    Value = YESORNO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ANSTEXT",
                    Value = ANSTEXT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBER_VOTERANS] @ID_MMBR, @YESORNO, @ANSTEXT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBERDISQUALIFYAsync(int? ID_MMBR, int? ID_CASE_NMBR, int? ID_REF_CERT_ELIG, int? ID_REF_CERT_ELIG2, string CD_CNVCTD_FLN, string CD_DSQLFD_PRTCPNT, string CD_FLEEING_VLTR, string CD_FRDLNT_MSRPRSNTTN, string CD_QLTY_SLLNG, string CD_RSDNT_TRTMNT, string CD_STMPS_MISUSE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG2",
                    Value = ID_REF_CERT_ELIG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNVCTD_FLN",
                    Size = 1,
                    Value = CD_CNVCTD_FLN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DSQLFD_PRTCPNT",
                    Size = 1,
                    Value = CD_DSQLFD_PRTCPNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FLEEING_VLTR",
                    Size = 1,
                    Value = CD_FLEEING_VLTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FRDLNT_MSRPRSNTTN",
                    Size = 1,
                    Value = CD_FRDLNT_MSRPRSNTTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_QLTY_SLLNG",
                    Size = 1,
                    Value = CD_QLTY_SLLNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSDNT_TRTMNT",
                    Size = 1,
                    Value = CD_RSDNT_TRTMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_STMPS_MISUSE",
                    Size = 1,
                    Value = CD_STMPS_MISUSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBERDISQUALIFY] @ID_MMBR, @ID_CASE_NMBR, @ID_REF_CERT_ELIG, @ID_REF_CERT_ELIG2, @CD_CNVCTD_FLN, @CD_DSQLFD_PRTCPNT, @CD_FLEEING_VLTR, @CD_FRDLNT_MSRPRSNTTN, @CD_QLTY_SLLNG, @CD_RSDNT_TRTMNT, @CD_STMPS_MISUSE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBERINFOAsync(int? ID_MMBR, string FL_GROUP_HOME, string FL_PRNTL_GDNC, string FL_PRCHS_PRPRS, string FL_NON_MMBR, string FL_IN_SCHOOL, decimal? CD_EDCTN_LVL, string FL_WRKNG, string FL_US_CTZN, string FL_ELGBL_ALIEN, int? ID_VRFCTN_ALIEN_STTS, string FL_MGRNT_SSNL, string FL_CLOSE_RLTN, short? ID_REF_CERT_ELIG, string TX_VRFCTN_ALIEN_STTS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GROUP_HOME",
                    Size = 1,
                    Value = FL_GROUP_HOME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRNTL_GDNC",
                    Size = 1,
                    Value = FL_PRNTL_GDNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRCHS_PRPRS",
                    Size = 1,
                    Value = FL_PRCHS_PRPRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_IN_SCHOOL",
                    Size = 1,
                    Value = FL_IN_SCHOOL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EDCTN_LVL",
                    Precision = 2,
                    Value = CD_EDCTN_LVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRKNG",
                    Size = 1,
                    Value = FL_WRKNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_US_CTZN",
                    Size = 1,
                    Value = FL_US_CTZN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_ALIEN",
                    Size = 1,
                    Value = FL_ELGBL_ALIEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ALIEN_STTS",
                    Value = ID_VRFCTN_ALIEN_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MGRNT_SSNL",
                    Size = 1,
                    Value = FL_MGRNT_SSNL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CLOSE_RLTN",
                    Size = 1,
                    Value = FL_CLOSE_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_ALIEN_STTS",
                    Value = TX_VRFCTN_ALIEN_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBERINFO] @ID_MMBR, @FL_GROUP_HOME, @FL_PRNTL_GDNC, @FL_PRCHS_PRPRS, @FL_NON_MMBR, @FL_IN_SCHOOL, @CD_EDCTN_LVL, @FL_WRKNG, @FL_US_CTZN, @FL_ELGBL_ALIEN, @ID_VRFCTN_ALIEN_STTS, @FL_MGRNT_SSNL, @FL_CLOSE_RLTN, @ID_REF_CERT_ELIG, @TX_VRFCTN_ALIEN_STTS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBERInitialAsync(int? ID_MMBR, int? ID_CASE_NMBR, short? ID_RACE_CODE, short? ID_REF_CERT_ELIG, short? ID_WORK_CODE, short? ID_REF_CERT_ELIG2, short? ID_WORK_CODE2, string CD_CASE_CRTD, string CD_SEX, DateTime? DT_BRTH, string FL_NON_MMBR, string NO_SSN, string NM_MMBR_LST, string NM_MMBR_FRST, string NM_MMBR_MDL, string NM_MMBR_SFX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG2",
                    Value = ID_REF_CERT_ELIG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE2",
                    Value = ID_WORK_CODE2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CRTD",
                    Size = 1,
                    Value = CD_CASE_CRTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SEX",
                    Size = 1,
                    Value = CD_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_BRTH",
                    Value = DT_BRTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_LST",
                    Size = 20,
                    Value = NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_FRST",
                    Size = 20,
                    Value = NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_MDL",
                    Size = 20,
                    Value = NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_MMBR_SFX",
                    Size = 3,
                    Value = NM_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBERInitial] @ID_MMBR, @ID_CASE_NMBR, @ID_RACE_CODE, @ID_REF_CERT_ELIG, @ID_WORK_CODE, @ID_REF_CERT_ELIG2, @ID_WORK_CODE2, @CD_CASE_CRTD, @CD_SEX, @DT_BRTH, @FL_NON_MMBR, @NO_SSN, @NM_MMBR_LST, @NM_MMBR_FRST, @NM_MMBR_MDL, @NM_MMBR_SFX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMBERS_SCICRTD_TOAAsync(int? ID_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE",
                    Value = ID_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMBERS_SCICRTD_TOA] @ID_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MEMPrchPrepAsync(int? ID_MMBR, string FL_GROUP_HOME, string FL_PRNTL_GDNC, string FL_PRCHS_PRPRS, string FL_NON_MMBR, string FL_IN_SCHOOL, decimal? CD_EDCTN_LVL, string FL_WRKNG, string FL_US_CTZN, string FL_ELGBL_ALIEN, int? ID_VRFCTN_ALIEN_STTS, string FL_MGRNT_SSNL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GROUP_HOME",
                    Size = 1,
                    Value = FL_GROUP_HOME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRNTL_GDNC",
                    Size = 1,
                    Value = FL_PRNTL_GDNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRCHS_PRPRS",
                    Size = 1,
                    Value = FL_PRCHS_PRPRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NON_MMBR",
                    Size = 1,
                    Value = FL_NON_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_IN_SCHOOL",
                    Size = 1,
                    Value = FL_IN_SCHOOL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EDCTN_LVL",
                    Precision = 2,
                    Value = CD_EDCTN_LVL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRKNG",
                    Size = 1,
                    Value = FL_WRKNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_US_CTZN",
                    Size = 1,
                    Value = FL_US_CTZN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_ALIEN",
                    Size = 1,
                    Value = FL_ELGBL_ALIEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ALIEN_STTS",
                    Value = ID_VRFCTN_ALIEN_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MGRNT_SSNL",
                    Size = 1,
                    Value = FL_MGRNT_SSNL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MEMPrchPrep] @ID_MMBR, @FL_GROUP_HOME, @FL_PRNTL_GDNC, @FL_PRCHS_PRPRS, @FL_NON_MMBR, @FL_IN_SCHOOL, @CD_EDCTN_LVL, @FL_WRKNG, @FL_US_CTZN, @FL_ELGBL_ALIEN, @ID_VRFCTN_ALIEN_STTS, @FL_MGRNT_SSNL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MMBR_MED_UNEARNEDAsync(int? ID_MMBR, decimal? AM_UNERND_MNTHLY, int? ID_ME_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MMBR_MED_UNEARNED] @ID_MMBR, @AM_UNERND_MNTHLY, @ID_ME_OTHR_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MMBR_WORKREG_AND_CERTELIGAsync(int? ID_MMBR, short? ID_REF_CERT_ELIG, short? ID_WORK_CODE, short? ID_WORK_CODE_MNTH2, short? ID_REF_CERT_ELIG_MNTH2, string CD_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE_MNTH2",
                    Value = ID_WORK_CODE_MNTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG_MNTH2",
                    Value = ID_REF_CERT_ELIG_MNTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MNTH",
                    Size = 2,
                    Value = CD_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MMBR_WORKREG_AND_CERTELIG] @ID_MMBR, @ID_REF_CERT_ELIG, @ID_WORK_CODE, @ID_WORK_CODE_MNTH2, @ID_REF_CERT_ELIG_MNTH2, @CD_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_MYDHR_PINAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_MYDHR_PIN]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_NC_MEDICAL_EXPENSEAsync(int? ID_MDCL_EXPNS, decimal? AM_AGREED_MNTHLY, decimal? AM_CALCLTD_MNTHLY, decimal? AM_UNERND_INCM, decimal? AM_PAY_MNTHLY, decimal? AM_RECALCLTD_MNTHLY, decimal? AM_RMNNG_OWED, decimal? AM_ME_TTL_ALLWBL, string CD_MONTH, DateTime? DT_SRVC, string FL_ASSSTD_BY_OTHR, string FL_INSRNC_PAID_ALL, string FL_ONETIME, string FL_RPYMNT_AGRMNT, int? ID_VRFCTN_MDCL_EXPNS, string NO_ACCT_MDCL, decimal? NO_MEALS_MNTHLY, decimal? NO_MNTHS_OWED, decimal? NO_MNTHS_RMNNG, int? ID_ME_OTHR_PAYER, int? ID_MMBR1, decimal? AM_ME_OTHR_PAY, DateTime? DT_ME_OTHR_PAYER, string FL_ME_ONETIME, string FL_ME_PAID_BFR_AMNT_DTRMND, string FL_ME_PAY_CRRNT_MNTH, string FL_ME_PAY_MMBR, int? ID_VRFCTN_ME_OTHR_PAYER, int? ID_PRVDR_NAME, string NM_PRVDR, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_EXPNS",
                    Value = ID_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_AGREED_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_AGREED_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_CALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECALCLTD_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RECALCLTD_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RMNNG_OWED",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RMNNG_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_TTL_ALLWBL",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_TTL_ALLWBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SRVC",
                    Value = DT_SRVC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INSRNC_PAID_ALL",
                    Size = 1,
                    Value = FL_INSRNC_PAID_ALL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ONETIME",
                    Size = 1,
                    Value = FL_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPYMNT_AGRMNT",
                    Size = 1,
                    Value = FL_RPYMNT_AGRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MDCL_EXPNS",
                    Value = ID_VRFCTN_MDCL_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT_MDCL",
                    Size = 10,
                    Value = NO_ACCT_MDCL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS_MNTHLY",
                    Precision = 2,
                    Value = NO_MEALS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_OWED",
                    Precision = 3,
                    Value = NO_MNTHS_OWED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MNTHS_RMNNG",
                    Precision = 3,
                    Value = NO_MNTHS_RMNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ME_OTHR_PAYER",
                    Value = ID_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ME_OTHR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ME_OTHR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ME_OTHR_PAYER",
                    Value = DT_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_ONETIME",
                    Size = 1,
                    Value = FL_ME_ONETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAID_BFR_AMNT_DTRMND",
                    Size = 1,
                    Value = FL_ME_PAID_BFR_AMNT_DTRMND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_CRRNT_MNTH",
                    Size = 1,
                    Value = FL_ME_PAY_CRRNT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ME_PAY_MMBR",
                    Size = 1,
                    Value = FL_ME_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ME_OTHR_PAYER",
                    Value = ID_VRFCTN_ME_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_NC_MEDICAL_EXPENSE] @ID_MDCL_EXPNS, @AM_AGREED_MNTHLY, @AM_CALCLTD_MNTHLY, @AM_UNERND_INCM, @AM_PAY_MNTHLY, @AM_RECALCLTD_MNTHLY, @AM_RMNNG_OWED, @AM_ME_TTL_ALLWBL, @CD_MONTH, @DT_SRVC, @FL_ASSSTD_BY_OTHR, @FL_INSRNC_PAID_ALL, @FL_ONETIME, @FL_RPYMNT_AGRMNT, @ID_VRFCTN_MDCL_EXPNS, @NO_ACCT_MDCL, @NO_MEALS_MNTHLY, @NO_MNTHS_OWED, @NO_MNTHS_RMNNG, @ID_ME_OTHR_PAYER, @ID_MMBR1, @AM_ME_OTHR_PAY, @DT_ME_OTHR_PAYER, @FL_ME_ONETIME, @FL_ME_PAID_BFR_AMNT_DTRMND, @FL_ME_PAY_CRRNT_MNTH, @FL_ME_PAY_MMBR, @ID_VRFCTN_ME_OTHR_PAYER, @ID_PRVDR_NAME, @NM_PRVDR, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_NOMA_REGAsync(string NO_CASE, string DATE_NOMA, DateTime? DT_REGISTRATION_MODIFIED, string SCI_DUEDT, string TX_APPT_NOTES, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_NOMA",
                    Size = 8,
                    Value = DATE_NOMA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DUEDT",
                    Size = 8,
                    Value = SCI_DUEDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_APPT_NOTES",
                    Value = TX_APPT_NOTES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_NOMA_REG] @NO_CASE, @DATE_NOMA, @DT_REGISTRATION_MODIFIED, @SCI_DUEDT, @TX_APPT_NOTES", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UPDT_OACIS_CASE_BEING_WORKEDAsync(int? NO_CASE, string ID_USER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UPDT_OACIS_CASE_BEING_WORKED] @NO_CASE, @ID_USER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_PIV_MMBR_RLTNAsync(decimal? ID_RLTN, int? ID_MMBR1, int? ID_MMBR2, string FL_NRST_RLTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NRST_RLTN",
                    Size = 1,
                    Value = FL_NRST_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_PIV_MMBR_RLTN] @ID_RLTN, @ID_MMBR1, @ID_MMBR2, @FL_NRST_RLTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_PROVIDER_INFOAsync(int? ID_PRVDR_NAME, int? ID_PRVDR_TYPE, string NM_PRVDR, string NO_PRVDR_PHONE, int? ID_ADDRSS, short? ID_CNTY_STATE, int? ID_MMBR, decimal? ID_REF_ADDRSS_TYPE, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_STATE, string AD_ZIP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_PRVDR_PHONE",
                    Size = 10,
                    Value = NO_PRVDR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_PROVIDER_INFO] @ID_PRVDR_NAME, @ID_PRVDR_TYPE, @NM_PRVDR, @NO_PRVDR_PHONE, @ID_ADDRSS, @ID_CNTY_STATE, @ID_MMBR, @ID_REF_ADDRSS_TYPE, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_STATE, @AD_ZIP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_RB_MEALResult>> Updt_RB_MEALAsync(int? ID_RB_MEAL, int? ID_MMBR, short? ID_REF_RB_MEAL, short? ID_RB_MEAL_OTHER, decimal? AM_DAILY_MEAL_PAY, decimal? AM_MEAL_COST, decimal? AM_MEAL_MNTHLY_PAY, decimal? AM_ROOM_PAY, decimal? ID_FRQNCY_MEAL_COST, decimal? ID_FRQNCY_MEAL_PAY, decimal? ID_FRQNCY_ROOM_PAY, decimal? NO_BRDR_HH, decimal? NO_MEALS_DAILY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL",
                    Value = ID_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_RB_MEAL",
                    Value = ID_REF_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL_OTHER",
                    Value = ID_RB_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DAILY_MEAL_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DAILY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_COST",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MNTHLY_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MNTHLY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ROOM_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_COST",
                    Precision = 1,
                    Value = ID_FRQNCY_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_PAY",
                    Precision = 1,
                    Value = ID_FRQNCY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_ROOM_PAY",
                    Precision = 1,
                    Value = ID_FRQNCY_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_BRDR_HH",
                    Precision = 2,
                    Value = NO_BRDR_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS_DAILY",
                    Precision = 1,
                    Value = NO_MEALS_DAILY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_RB_MEALResult>("EXEC @returnValue = [dbo].[Updt_RB_MEAL] @ID_RB_MEAL, @ID_MMBR, @ID_REF_RB_MEAL, @ID_RB_MEAL_OTHER, @AM_DAILY_MEAL_PAY, @AM_MEAL_COST, @AM_MEAL_MNTHLY_PAY, @AM_ROOM_PAY, @ID_FRQNCY_MEAL_COST, @ID_FRQNCY_MEAL_PAY, @ID_FRQNCY_ROOM_PAY, @NO_BRDR_HH, @NO_MEALS_DAILY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_RB_MEAL_OTHERResult>> Updt_RB_MEAL_OTHERAsync(short? ID_RB_MEAL_OTHER, int? ID_CASE_NMBR, string NM_RBML_LST, string NM_RBML_FRST, string NM_RBML_MDL, string NM_RBML_SFX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RB_MEAL_OTHER",
                    Value = ID_RB_MEAL_OTHER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_LST",
                    Size = 20,
                    Value = NM_RBML_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_FRST",
                    Size = 20,
                    Value = NM_RBML_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_MDL",
                    Size = 20,
                    Value = NM_RBML_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_RBML_SFX",
                    Size = 3,
                    Value = NM_RBML_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_RB_MEAL_OTHERResult>("EXEC @returnValue = [dbo].[Updt_RB_MEAL_OTHER] @ID_RB_MEAL_OTHER, @ID_CASE_NMBR, @NM_RBML_LST, @NM_RBML_FRST, @NM_RBML_MDL, @NM_RBML_SFX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_RBMEALAsync(int? ID_MEAL, int? ID_MMBR, decimal? AM_MEAL_COST_HOH, decimal? AM_MEAL_MMBR_PAY, decimal? ID_FRQNCY_MEAL_COST, decimal? ID_FRQNCY_MEAL_PAY, int? ID_VRFCTN_MEAL, decimal? NO_MEALS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MEAL",
                    Value = ID_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_COST_HOH",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_COST_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEAL_MMBR_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MEAL_MMBR_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_COST",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_COST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_MEAL_PAY",
                    Precision = 2,
                    Value = ID_FRQNCY_MEAL_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_MEAL",
                    Value = ID_VRFCTN_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MEALS",
                    Precision = 2,
                    Value = NO_MEALS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_RBMEAL] @ID_MEAL, @ID_MMBR, @AM_MEAL_COST_HOH, @AM_MEAL_MMBR_PAY, @ID_FRQNCY_MEAL_COST, @ID_FRQNCY_MEAL_PAY, @ID_VRFCTN_MEAL, @NO_MEALS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_ADDRESS_TYPEAsync(decimal? ID_REF_ADDRSS_TYPE, string CD_REF_ADDRSS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_ADDRSS_TYPE",
                    Precision = 2,
                    Value = ID_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_ADDRSS_TYPE",
                    Size = 15,
                    Value = CD_REF_ADDRSS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_ADDRESS_TYPE] @ID_REF_ADDRSS_TYPE, @CD_REF_ADDRSS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UPDT_REF_ALLAsync(short? ID_WORK_CODE, string CD_WORK, string TX_WORK_DSCR, short? ID_REF_WAIVE_ADVRS_ACTN, string CD_WAIVE_ADVRS_ACTN_RSN, string TX_ADVRS_ACTN_DSCR, short? ID_RACE_CODE, decimal? CD_RACE, string TX_RACE_DSCR, short? ID_INSTRCTN, string CD_INSTRCTN_TYPE, string TX_INSTRCTN_TYPE, decimal? ID_REF_CERT_ELIG, string CD_CERT_ELIG, string TX_CERT_ELIG_DSCR, string CD_RJCTN_CLSR, string CD_DEN_TER, string TX_RJCTN_DNL_TERM, decimal? ID_RSTRTN_RSN, string CD_RSTRTN_RSN, string TX_RSTRTN_RSN_DSCR, short? ID_VRFCTN_DETAIL, string CD_VRFCTN_DETAIL_DSCR, short? ID_REF_NTC_TYPE, string CD_REF_NTC_TYPE, string TX_REF_NTC_DSCR, string TX_EMAIL, string INPUT, OutputParameter<short?> ID_CNTY_STATE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CNTY_STATE = new SqlParameter
            {
                ParameterName = "ID_CNTY_STATE",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CNTY_STATE?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WORK",
                    Size = 1,
                    Value = CD_WORK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WORK_DSCR",
                    Value = TX_WORK_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_WAIVE_ADVRS_ACTN",
                    Value = ID_REF_WAIVE_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WAIVE_ADVRS_ACTN_RSN",
                    Size = 2,
                    Value = CD_WAIVE_ADVRS_ACTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_ADVRS_ACTN_DSCR",
                    Value = TX_ADVRS_ACTN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Precision = 9,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RACE_DSCR",
                    Size = 100,
                    Value = TX_RACE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_INSTRCTN",
                    Value = ID_INSTRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INSTRCTN_TYPE",
                    Size = 7,
                    Value = CD_INSTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_INSTRCTN_TYPE",
                    Value = TX_INSTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Precision = 2,
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CERT_ELIG_DSCR",
                    Value = TX_CERT_ELIG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DEN_TER",
                    Size = 2,
                    Value = CD_DEN_TER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RJCTN_DNL_TERM",
                    Value = TX_RJCTN_DNL_TERM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN_RSN",
                    Precision = 2,
                    Value = ID_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSTRTN_RSN",
                    Size = 2,
                    Value = CD_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RSTRTN_RSN_DSCR",
                    Value = TX_RSTRTN_RSN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DETAIL",
                    Value = ID_VRFCTN_DETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_VRFCTN_DETAIL_DSCR",
                    Size = 30,
                    Value = CD_VRFCTN_DETAIL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_NTC_TYPE",
                    Value = ID_REF_NTC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_NTC_TYPE",
                    Size = 2,
                    Value = CD_REF_NTC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_REF_NTC_DSCR",
                    Value = TX_REF_NTC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterID_CNTY_STATE,
                new SqlParameter
                {
                    ParameterName = "TX_EMAIL",
                    Size = 50,
                    Value = TX_EMAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "INPUT",
                    Size = 3,
                    Value = INPUT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UPDT_REF_ALL] @ID_WORK_CODE, @CD_WORK, @TX_WORK_DSCR, @ID_REF_WAIVE_ADVRS_ACTN, @CD_WAIVE_ADVRS_ACTN_RSN, @TX_ADVRS_ACTN_DSCR, @ID_RACE_CODE, @CD_RACE, @TX_RACE_DSCR, @ID_INSTRCTN, @CD_INSTRCTN_TYPE, @TX_INSTRCTN_TYPE, @ID_REF_CERT_ELIG, @CD_CERT_ELIG, @TX_CERT_ELIG_DSCR, @CD_RJCTN_CLSR, @CD_DEN_TER, @TX_RJCTN_DNL_TERM, @ID_RSTRTN_RSN, @CD_RSTRTN_RSN, @TX_RSTRTN_RSN_DSCR, @ID_VRFCTN_DETAIL, @CD_VRFCTN_DETAIL_DSCR, @ID_REF_NTC_TYPE, @CD_REF_NTC_TYPE, @TX_REF_NTC_DSCR, @ID_CNTY_STATE OUTPUT, @TX_EMAIL, @INPUT", sqlParameters, cancellationToken);

            ID_CNTY_STATE.SetValue(parameterID_CNTY_STATE.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_APPLIANCE_TYPEResult>> Updt_REF_APPLIANCE_TYPEAsync(short? ID_APPLNC_TYPE, string CD_APPLNC_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_APPLNC_TYPE",
                    Value = ID_APPLNC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_APPLNC_DSCR",
                    Size = 30,
                    Value = CD_APPLNC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_APPLIANCE_TYPEResult>("EXEC @returnValue = [dbo].[Updt_REF_APPLIANCE_TYPE] @ID_APPLNC_TYPE, @CD_APPLNC_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_CASE_CTGRYAsync(short? ID_CASE_CTGRY, string CD_CASE_CTGRY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_CTGRY_DSCR",
                    Size = 15,
                    Value = CD_CASE_CTGRY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_CASE_CTGRY] @ID_CASE_CTGRY, @CD_CASE_CTGRY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_CASE_STATUSResult>> Updt_REF_CASE_STATUSAsync(decimal? ID_REF_CASE_STATUS, string CD_CASE_STTS_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS",
                    Precision = 1,
                    Value = ID_REF_CASE_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_STTS_DSCR",
                    Size = 7,
                    Value = CD_CASE_STTS_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_CASE_STATUSResult>("EXEC @returnValue = [dbo].[Updt_REF_CASE_STATUS] @ID_REF_CASE_STATUS, @CD_CASE_STTS_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_CASE_STATUS_TYPEAsync(decimal? ID_REF_CASE_STATUS_TYPE, string CD_CASE_STTS_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CASE_STATUS_TYPE",
                    Precision = 1,
                    Value = ID_REF_CASE_STATUS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_STTS_DSCR",
                    Size = 7,
                    Value = CD_CASE_STTS_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_CASE_STATUS_TYPE] @ID_REF_CASE_STATUS_TYPE, @CD_CASE_STTS_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_CASE_SUB_CTGRYResult>> Updt_REF_CASE_SUB_CTGRYAsync(short? ID_CASE_SUB_CTGRY, short? ID_CASE_CTGRY, string CD_CASE_SUB_CTGRY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_SUB_CTGRY",
                    Value = ID_CASE_SUB_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_CTGRY",
                    Value = ID_CASE_CTGRY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CASE_SUB_CTGRY_DSCR",
                    Size = 20,
                    Value = CD_CASE_SUB_CTGRY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_CASE_SUB_CTGRYResult>("EXEC @returnValue = [dbo].[Updt_REF_CASE_SUB_CTGRY] @ID_CASE_SUB_CTGRY, @ID_CASE_CTGRY, @CD_CASE_SUB_CTGRY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_CERT_ELIGAsync(decimal? ID_REF_CERT_ELIG, string CD_CERT_ELIG, string TX_CERT_ELIG_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Precision = 2,
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CERT_ELIG_DSCR",
                    Size = 15,
                    Value = TX_CERT_ELIG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_CERT_ELIG] @ID_REF_CERT_ELIG, @CD_CERT_ELIG, @TX_CERT_ELIG_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_CNTY_ADDRESSAsync(int? ID_CNTY_ADDRESS, string AD_STREET1, string AD_STREET2, string AD_CITY, string AD_ZIP, string AD_ZIP4, string NO_OFFICE_PHONE, string NO_OFFICE_FAX, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_ADDRESS",
                    Value = ID_CNTY_ADDRESS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET2",
                    Size = 25,
                    Value = AD_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP4",
                    Size = 4,
                    Value = AD_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_OFFICE_PHONE",
                    Size = 10,
                    Value = NO_OFFICE_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_OFFICE_FAX",
                    Size = 10,
                    Value = NO_OFFICE_FAX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_CNTY_ADDRESS] @ID_CNTY_ADDRESS, @AD_STREET1, @AD_STREET2, @AD_CITY, @AD_ZIP, @AD_ZIP4, @NO_OFFICE_PHONE, @NO_OFFICE_FAX", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_DENIAL_CODESResult>> Updt_REF_DENIAL_CODESAsync(decimal? ID_DENIAL_CODES, string CD_DENIAL, string TX_DENIAL_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DENIAL_CODES",
                    Precision = 2,
                    Value = ID_DENIAL_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DENIAL",
                    Size = 2,
                    Value = CD_DENIAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_DENIAL_DSCR",
                    Value = TX_DENIAL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_DENIAL_CODESResult>("EXEC @returnValue = [dbo].[Updt_REF_DENIAL_CODES] @ID_DENIAL_CODES, @CD_DENIAL, @TX_DENIAL_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_DEPENDENT_CARE_LIMITAsync(decimal? ID_DPNDNT_CARE_LIMIT, decimal? AM_DPNDNT_LIMIT, string CD_DPNDNT_CARE_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_DPNDNT_CARE_LIMIT",
                    Precision = 1,
                    Value = ID_DPNDNT_CARE_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DPNDNT_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_DPNDNT_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_DPNDNT_CARE_DSCR",
                    Size = 30,
                    Value = CD_DPNDNT_CARE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_DEPENDENT_CARE_LIMIT] @ID_DPNDNT_CARE_LIMIT, @AM_DPNDNT_LIMIT, @CD_DPNDNT_CARE_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_FA_STATUSResult>> Updt_REF_FA_STATUSAsync(short? ID_REF_FA_STTS, string CD_WHEN_CASE_CLSD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_FA_STTS",
                    Value = ID_REF_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WHEN_CASE_CLSD",
                    Size = 15,
                    Value = CD_WHEN_CASE_CLSD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_FA_STATUSResult>("EXEC @returnValue = [dbo].[Updt_REF_FA_STATUS] @ID_REF_FA_STTS, @CD_WHEN_CASE_CLSD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_FDRL_MLGE_RTAsync(short? ID_REF_FDRL_MLG_RATE, decimal? AM_FDRL_MLG_RATE, DateTime? DT_EFFCTV, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_FDRL_MLG_RATE",
                    Value = ID_REF_FDRL_MLG_RATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AM_FDRL_MLG_RATE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_FDRL_MLG_RATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EFFCTV",
                    Value = DT_EFFCTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_FDRL_MLGE_RT] @ID_REF_FDRL_MLG_RATE, @AM_FDRL_MLG_RATE, @DT_EFFCTV", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_FREQUENCYAsync(decimal? ID_FRQNCY_REF, string CD_FRQNCY_DSCR, decimal? NO_FRQNCY_FACTOR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_REF",
                    Precision = 2,
                    Value = ID_FRQNCY_REF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FRQNCY_DSCR",
                    Size = 15,
                    Value = CD_FRQNCY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_FRQNCY_FACTOR",
                    Precision = 7,
                    Scale = 5,
                    Value = NO_FRQNCY_FACTOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_FREQUENCY] @ID_FRQNCY_REF, @CD_FRQNCY_DSCR, @NO_FRQNCY_FACTOR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_HLDYAsync(int? ID_HLDY_DATES, DateTime? DT_HLDY, string TX_HLDY_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_HLDY_DATES",
                    Value = ID_HLDY_DATES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_HLDY",
                    Value = DT_HLDY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_HLDY_DSCR",
                    Value = TX_HLDY_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_HLDY] @ID_HLDY_DATES, @DT_HLDY, @TX_HLDY_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_IEVS_TRAKAsync(string ID_SSN_IEVS, string CD_SSN_VRFY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN_IEVS",
                    Size = 9,
                    Value = ID_SSN_IEVS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SSN_VRFY",
                    Size = 1,
                    Value = CD_SSN_VRFY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_IEVS_TRAK] @ID_SSN_IEVS, @CD_SSN_VRFY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_INACTIVE_SCIIIAsync(string ID_SSN, decimal? CD_CHCK_DIGIT, decimal? CD_CNTY_SCIII, decimal? NO_INACTV_CASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SSN",
                    Size = 9,
                    Value = ID_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CHCK_DIGIT",
                    Precision = 1,
                    Value = CD_CHCK_DIGIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_SCIII",
                    Precision = 3,
                    Value = CD_CNTY_SCIII ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_INACTV_CASE",
                    Precision = 9,
                    Value = NO_INACTV_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_INACTIVE_SCIII] @ID_SSN, @CD_CHCK_DIGIT, @CD_CNTY_SCIII, @NO_INACTV_CASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_INCOME_LIMITAsync(decimal? ID_REF_INCM_LIMIT, decimal? AM_INCM_LIMIT, decimal? NO_HH_SIZE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_INCM_LIMIT",
                    Precision = 2,
                    Value = ID_REF_INCM_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_INCM_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_INCM_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_SIZE",
                    Precision = 2,
                    Value = NO_HH_SIZE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_INCOME_LIMIT] @ID_REF_INCM_LIMIT, @AM_INCM_LIMIT, @NO_HH_SIZE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_INSTRUCTIONSAsync(short? ID_INSTRCTN, string CD_INTRCTN_TYPE, string TX_INSTRCTN_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_INSTRCTN",
                    Value = ID_INSTRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INTRCTN_TYPE",
                    Size = 7,
                    Value = CD_INTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_INSTRCTN_TYPE",
                    Value = TX_INSTRCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_INSTRUCTIONS] @ID_INSTRCTN, @CD_INTRCTN_TYPE, @TX_INSTRCTN_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_MEDICAL_LIMITAsync(decimal? ID_MDCL_LMT, decimal? AM_MDCL_LIMIT, string CD_MDCL_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCL_LMT",
                    Precision = 1,
                    Value = ID_MDCL_LMT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MDCL_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_MDCL_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MDCL_DSCR",
                    Size = 30,
                    Value = CD_MDCL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_MEDICAL_LIMIT] @ID_MDCL_LMT, @AM_MDCL_LIMIT, @CD_MDCL_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_MEDICATIONResult>> Updt_REF_MEDICATIONAsync(int? ID_MDCTN, int? ID_PRVDR_NAME, string TX_MDCTN_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MDCTN",
                    Value = ID_MDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MDCTN_NAME",
                    Size = 40,
                    Value = TX_MDCTN_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_MEDICATIONResult>("EXEC @returnValue = [dbo].[Updt_REF_MEDICATION] @ID_MDCTN, @ID_PRVDR_NAME, @TX_MDCTN_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_MESSAGEAsync(short? ID_MESSAGES, string CD_MSSG_TYPE, string TX_MSSG_DSCR, string FL_SEARCH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MESSAGES",
                    Value = ID_MESSAGES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MSSG_TYPE",
                    Size = 7,
                    Value = CD_MSSG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_MSSG_DSCR",
                    Value = TX_MSSG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SEARCH",
                    Size = 1,
                    Value = FL_SEARCH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_MESSAGE] @ID_MESSAGES, @CD_MSSG_TYPE, @TX_MSSG_DSCR, @FL_SEARCH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_PAST_DUE_RSNAsync(string CD_PAST_DUE_RSN, string TX_PAST_DUE_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_PAST_DUE_RSN",
                    Value = TX_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_PAST_DUE_RSN] @CD_PAST_DUE_RSN, @TX_PAST_DUE_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_PAY_DATESAsync(int? ID_UNERND_INCM, decimal? AM_GROSS_MNTHLY, decimal? AM_GROSS_PER_PAY, decimal? AM_HRLY_PAY, decimal? AM_NET_MNTHLY, DateTime? DT_PAY_DATE, string FL_INCM_NXT_MNTH, string FL_RPRSNTTV_PAY, int? ID_FRQNCY_PAY, int? NO_HOURS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_GROSS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_GROSS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_GROSS_PER_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_GROSS_PER_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_HRLY_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_HRLY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_NET_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_NET_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PAY_DATE",
                    Value = DT_PAY_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INCM_NXT_MNTH",
                    Size = 1,
                    Value = FL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPRSNTTV_PAY",
                    Size = 1,
                    Value = FL_RPRSNTTV_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PAY",
                    Value = ID_FRQNCY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS",
                    Value = NO_HOURS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_PAY_DATES] @ID_UNERND_INCM, @AM_GROSS_MNTHLY, @AM_GROSS_PER_PAY, @AM_HRLY_PAY, @AM_NET_MNTHLY, @DT_PAY_DATE, @FL_INCM_NXT_MNTH, @FL_RPRSNTTV_PAY, @ID_FRQNCY_PAY, @NO_HOURS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_PAY_DATESByIDAsync(int? ID_PAY_DATES, int? ID_UNERND_INCM, decimal? AM_GROSS_MNTHLY, decimal? AM_GROSS_PER_PAY, decimal? AM_HRLY_PAY, decimal? AM_NET_MNTHLY, DateTime? DT_PAY_DATE, string FL_INCM_NXT_MNTH, string FL_RPRSNTTV_PAY, int? ID_FRQNCY_PAY, int? NO_HOURS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAY_DATES",
                    Value = ID_PAY_DATES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_GROSS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_GROSS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_GROSS_PER_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_GROSS_PER_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_HRLY_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_HRLY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_NET_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_NET_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_PAY_DATE",
                    Value = DT_PAY_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INCM_NXT_MNTH",
                    Size = 1,
                    Value = FL_INCM_NXT_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RPRSNTTV_PAY",
                    Size = 1,
                    Value = FL_RPRSNTTV_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PAY",
                    Value = ID_FRQNCY_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOURS",
                    Value = NO_HOURS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_PAY_DATESByID] @ID_PAY_DATES, @ID_UNERND_INCM, @AM_GROSS_MNTHLY, @AM_GROSS_PER_PAY, @AM_HRLY_PAY, @AM_NET_MNTHLY, @DT_PAY_DATE, @FL_INCM_NXT_MNTH, @FL_RPRSNTTV_PAY, @ID_FRQNCY_PAY, @NO_HOURS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_PAY_TYPEAsync(int? ID_PAY_TYPE, string CD_PAY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAY_TYPE",
                    Value = ID_PAY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PAY_TYPE",
                    Size = 10,
                    Value = CD_PAY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_PAY_TYPE] @ID_PAY_TYPE, @CD_PAY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_PROVIDER_ADDRESSResult>> Updt_REF_PROVIDER_ADDRESSAsync(int? ID_PRVDR_ADDR, int? ID_PRVDR_NAME, string AD_PRVDR_PHONE, string AD_PRVDR_ZIP, string AD_PRVDR_STATE, string AD_PRVDR_CITY, string AD_PRVDR_STREET2, string AD_PRVDR_STREET1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_ADDR",
                    Value = ID_PRVDR_ADDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AD_PRVDR_PHONE",
                    Size = 12,
                    Value = AD_PRVDR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_PRVDR_ZIP",
                    Size = 9,
                    Value = AD_PRVDR_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_PRVDR_STATE",
                    Size = 2,
                    Value = AD_PRVDR_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_PRVDR_CITY",
                    Size = 25,
                    Value = AD_PRVDR_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_PRVDR_STREET2",
                    Size = 25,
                    Value = AD_PRVDR_STREET2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_PRVDR_STREET1",
                    Size = 25,
                    Value = AD_PRVDR_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_PROVIDER_ADDRESSResult>("EXEC @returnValue = [dbo].[Updt_REF_PROVIDER_ADDRESS] @ID_PRVDR_ADDR, @ID_PRVDR_NAME, @AD_PRVDR_PHONE, @AD_PRVDR_ZIP, @AD_PRVDR_STATE, @AD_PRVDR_CITY, @AD_PRVDR_STREET2, @AD_PRVDR_STREET1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_PROVIDER_NAMEAsync(int? ID_PRVDR_NAME, decimal? ID_PRVDR_TYPE, string NM_PRVDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_TYPE",
                    Precision = 2,
                    Value = ID_PRVDR_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NM_PRVDR",
                    Size = 40,
                    Value = NM_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_PROVIDER_NAME] @ID_PRVDR_NAME, @ID_PRVDR_TYPE, @NM_PRVDR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_RACEAsync(short? ID_RACE_CODE, decimal? CD_RACE, string TX_RACE_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RACE_CODE",
                    Value = ID_RACE_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Precision = 9,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RACE_DSCR",
                    Size = 100,
                    Value = TX_RACE_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_RACE] @ID_RACE_CODE, @CD_RACE, @TX_RACE_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_RB_MEALResult>> Updt_REF_RB_MEALAsync(short? ID_REF_RB_MEAL, string TX_RBML_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_RB_MEAL",
                    Value = ID_REF_RB_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RBML_DSCR",
                    Size = 15,
                    Value = TX_RBML_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_RB_MEALResult>("EXEC @returnValue = [dbo].[Updt_REF_RB_MEAL] @ID_REF_RB_MEAL, @TX_RBML_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_REJ_CLO_CODEResult>> Updt_REF_REJ_CLO_CODEAsync(decimal? ID_RJCTN_CLSR_CODES, string CD_RJCTN_CLSR, string TX_RJCTN_CLSR_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR_CODES",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RJCTN_CLSR_DSCR",
                    Value = TX_RJCTN_CLSR_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_REJ_CLO_CODEResult>("EXEC @returnValue = [dbo].[Updt_REF_REJ_CLO_CODE] @ID_RJCTN_CLSR_CODES, @CD_RJCTN_CLSR, @TX_RJCTN_CLSR_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_RELATIONAsync(decimal? ID_RLTN, string TX_RLTN_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RLTN",
                    Precision = 2,
                    Value = ID_RLTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RLTN_DSCR",
                    Value = TX_RLTN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_RELATION] @ID_RLTN, @TX_RLTN_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_RESOURCE_LIMITAsync(short? ID_RSRC_LIMIT, decimal? AM_RSRC_LIMIT, string CD_RSRC_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_LIMIT",
                    Value = ID_RSRC_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSRC_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSRC_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RSRC_DSCR",
                    Size = 20,
                    Value = CD_RSRC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_RESOURCE_LIMIT] @ID_RSRC_LIMIT, @AM_RSRC_LIMIT, @CD_RSRC_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_RESOURCE_TYPEAsync(int? ID_RSRC_CODE, string TX_RSRC_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RSRC_DSCR",
                    Value = TX_RSRC_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_RESOURCE_TYPE] @ID_RSRC_CODE, @TX_RSRC_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_SANCTION_REASONAsync(decimal? ID_REF_SNCTN_RSN, string TX_SNCTN_RSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_SNCTN_RSN",
                    Precision = 2,
                    Value = ID_REF_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SNCTN_RSN",
                    Value = TX_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_SANCTION_REASON] @ID_REF_SNCTN_RSN, @TX_SNCTN_RSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_SECURITYAsync(string ID_PYRLL, string CD_CNTY_SCRTY, string CD_PSSWRD, string CD_ROLE, string NM_FULL_NAME, string ID_USER, string FL_ADMIN, string FL_REGISTRATION, string FL_APPOINTMENTS, string FL_APP_STATUS, string FL_CASE_NOTES, string FL_SR_UPDATES, string FL_TRIAL_BUDGET, string FL_REPORTS, string CD_FiscalYear, string FL_ISSUANCE, string FL_FORMS, string FL_DSNAP, string FL_SSNINQ, int? MOD_TIMER, DateTime? DT_COLA, string HIS_SERVER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PYRLL",
                    Size = 9,
                    Value = ID_PYRLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY_SCRTY",
                    Size = 2,
                    Value = CD_CNTY_SCRTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PSSWRD",
                    Size = 20,
                    Value = CD_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ROLE",
                    Size = 15,
                    Value = CD_ROLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_FULL_NAME",
                    Size = 25,
                    Value = NM_FULL_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADMIN",
                    Size = 1,
                    Value = FL_ADMIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REGISTRATION",
                    Size = 1,
                    Value = FL_REGISTRATION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_APPOINTMENTS",
                    Size = 1,
                    Value = FL_APPOINTMENTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_APP_STATUS",
                    Size = 1,
                    Value = FL_APP_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CASE_NOTES",
                    Size = 1,
                    Value = FL_CASE_NOTES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SR_UPDATES",
                    Size = 1,
                    Value = FL_SR_UPDATES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TRIAL_BUDGET",
                    Size = 1,
                    Value = FL_TRIAL_BUDGET ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REPORTS",
                    Size = 1,
                    Value = FL_REPORTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_FiscalYear",
                    Size = 6,
                    Value = CD_FiscalYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ISSUANCE",
                    Size = 1,
                    Value = FL_ISSUANCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FORMS",
                    Size = 1,
                    Value = FL_FORMS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSNAP",
                    Size = 1,
                    Value = FL_DSNAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SSNINQ",
                    Size = 1,
                    Value = FL_SSNINQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MOD_TIMER",
                    Value = MOD_TIMER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_COLA",
                    Value = DT_COLA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "HIS_SERVER",
                    Size = 20,
                    Value = HIS_SERVER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_SECURITY] @ID_PYRLL, @CD_CNTY_SCRTY, @CD_PSSWRD, @CD_ROLE, @NM_FULL_NAME, @ID_USER, @FL_ADMIN, @FL_REGISTRATION, @FL_APPOINTMENTS, @FL_APP_STATUS, @FL_CASE_NOTES, @FL_SR_UPDATES, @FL_TRIAL_BUDGET, @FL_REPORTS, @CD_FiscalYear, @FL_ISSUANCE, @FL_FORMS, @FL_DSNAP, @FL_SSNINQ, @MOD_TIMER, @DT_COLA, @HIS_SERVER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_SHELTER_DWELLING_TYPEAsync(short? ID_SHLTR_DWELLNG_TYPE, short? ID_OWNRSHP, string CD_SHLTR_DWELLING_TYPE, string TX_SHLTR_DWELLNG_TYPE_OTHR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SHLTR_DWELLING_TYPE",
                    Size = 25,
                    Value = CD_SHLTR_DWELLING_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_SHLTR_DWELLNG_TYPE_OTHR",
                    Value = TX_SHLTR_DWELLNG_TYPE_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_SHELTER_DWELLING_TYPE] @ID_SHLTR_DWELLNG_TYPE, @ID_OWNRSHP, @CD_SHLTR_DWELLING_TYPE, @TX_SHLTR_DWELLNG_TYPE_OTHR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_SHELTER_EXPENSE_TYPEAsync(short? ID_SHLTR_EXPNS_TYPE, short? ID_SHLTR_DWELLNG_TYPE, string CD_SHLTR_EXPNS_TYPE, string TX_OTHR_SHLTR_EXPNS_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SHLTR_EXPNS_TYPE",
                    Value = CD_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_OTHR_SHLTR_EXPNS_TYPE",
                    Value = TX_OTHR_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_SHELTER_EXPENSE_TYPE] @ID_SHLTR_EXPNS_TYPE, @ID_SHLTR_DWELLNG_TYPE, @CD_SHLTR_EXPNS_TYPE, @TX_OTHR_SHLTR_EXPNS_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_SHELTER_OWNERSHIPAsync(short? ID_OWNRSHP, string CD_OWNRSHP, string TX_RENT_FREE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_OWNRSHP",
                    Size = 15,
                    Value = CD_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RENT_FREE",
                    Value = TX_RENT_FREE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_SHELTER_OWNERSHIP] @ID_OWNRSHP, @CD_OWNRSHP, @TX_RENT_FREE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_TFP_LIMITAsync(short? ID_REF_TFP_LIMIT, decimal? AM_TFP_LIMIT, decimal? NO_HH_SIZE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_TFP_LIMIT",
                    Value = ID_REF_TFP_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TFP_LIMIT",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TFP_LIMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_SIZE",
                    Precision = 2,
                    Value = NO_HH_SIZE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_TFP_LIMIT] @ID_REF_TFP_LIMIT, @AM_TFP_LIMIT, @NO_HH_SIZE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_UTILITY_LIMITSAsync(decimal? ID_UTLTY_DDCTN, decimal? AM_UTLTY_DDCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_DDCTN",
                    Precision = 1,
                    Value = ID_UTLTY_DDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTLTY_DDCTN",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UTLTY_DDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_UTILITY_LIMITS] @ID_UTLTY_DDCTN, @AM_UTLTY_DDCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_UTILITY_TYPEAsync(int? ID_UTLTY_TYPE, string CD_UTLTY_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_UTLTY_TYPE",
                    Size = 30,
                    Value = CD_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_UTILITY_TYPE] @ID_UTLTY_TYPE, @CD_UTLTY_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REF_VERFICATIONResult>> Updt_REF_VERFICATIONAsync(decimal? ID_VRFCTN, string CD_VRFCTN_DSCR, string FL_OTHR_VRFCTN_RCVD, string TX_OTHR_VRFCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN",
                    Precision = 2,
                    Value = ID_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_VRFCTN_DSCR",
                    Size = 30,
                    Value = CD_VRFCTN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OTHR_VRFCTN_RCVD",
                    Size = 1,
                    Value = FL_OTHR_VRFCTN_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_OTHR_VRFCTN",
                    Value = TX_OTHR_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REF_VERFICATIONResult>("EXEC @returnValue = [dbo].[Updt_REF_VERFICATION] @ID_VRFCTN, @CD_VRFCTN_DSCR, @FL_OTHR_VRFCTN_RCVD, @TX_OTHR_VRFCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_VERIFICATION_DETAILAsync(decimal? ID_VRFCTN_DETAIL, decimal? ID_REF_VRFCTN_SUBTYPE, string CD_VRFCTN_DETAIL_DSCR, string FL_OTHR_VRFCTN_RCVD, string TX_OTHR_VRFCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_DETAIL",
                    Precision = 2,
                    Value = ID_VRFCTN_DETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_SUBTYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_VRFCTN_DETAIL_DSCR",
                    Size = 30,
                    Value = CD_VRFCTN_DETAIL_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OTHR_VRFCTN_RCVD",
                    Size = 1,
                    Value = FL_OTHR_VRFCTN_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_OTHR_VRFCTN",
                    Value = TX_OTHR_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_VERIFICATION_DETAIL] @ID_VRFCTN_DETAIL, @ID_REF_VRFCTN_SUBTYPE, @CD_VRFCTN_DETAIL_DSCR, @FL_OTHR_VRFCTN_RCVD, @TX_OTHR_VRFCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_VERIFICATION_SUBTYPEAsync(decimal? ID_REF_VRFCTN_SUBTYPE, decimal? ID_REF_VRFCTN_TYPE, string CD_REF_VRFCTN_SUBTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_SUBTYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_TYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_VRFCTN_SUBTYPE",
                    Size = 30,
                    Value = CD_REF_VRFCTN_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_VERIFICATION_SUBTYPE] @ID_REF_VRFCTN_SUBTYPE, @ID_REF_VRFCTN_TYPE, @CD_REF_VRFCTN_SUBTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_VERIFICATION_TYPEAsync(decimal? ID_REF_VRFCTN_TYPE, string CD_REF_VRFCTN_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_REF_VRFCTN_TYPE",
                    Precision = 2,
                    Value = ID_REF_VRFCTN_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REF_VRFCTN_DSCR",
                    Size = 15,
                    Value = CD_REF_VRFCTN_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_VERIFICATION_TYPE] @ID_REF_VRFCTN_TYPE, @CD_REF_VRFCTN_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_WELCOME_MESSAGEAsync(short? ID_WLCM_MSSG, string ID_MSSG_CNTY, DateTime? DT_MSSG, string TX_WLCM_MSSG_DSCR, DateTime? DT_START, DateTime? DT_END, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WLCM_MSSG",
                    Value = ID_WLCM_MSSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MSSG_CNTY",
                    Size = 2,
                    Value = ID_MSSG_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_MSSG",
                    Value = DT_MSSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WLCM_MSSG_DSCR",
                    Value = TX_WLCM_MSSG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "DT_START",
                    Value = DT_START ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_END",
                    Value = DT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_WELCOME_MESSAGE] @ID_WLCM_MSSG, @ID_MSSG_CNTY, @DT_MSSG, @TX_WLCM_MSSG_DSCR, @DT_START, @DT_END", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REF_WORK_REG_CODEAsync(short? ID_WORK_CODE, string CD_WORK, string TX_WORK_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WORK",
                    Size = 1,
                    Value = CD_WORK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WORK_DSCR",
                    Size = 50,
                    Value = TX_WORK_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REF_WORK_REG_CODE] @ID_WORK_CODE, @CD_WORK, @TX_WORK_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REG_APP_WITH_CASENOAsync(int? ID_NEWCASE, string ID_USER, string NO_CASE, string NO_CASE_CHCKDGT, DateTime? DT_REGISTRATION_MODIFIED, string DATE_REGISTRATION, string DATE_ERROR, string FL_REGISTRATION_COMPLETE, string CD_REGISTRATION_STATUS, DateTime? DT_REGISTRATION_STATUS, string TEXT_REGISTRATION_COMMENTS, string SCI_APPSTS, string SCI_APTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Size = 2,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_REGISTRATION",
                    Size = 16,
                    Value = DATE_REGISTRATION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_ERROR",
                    Size = 16,
                    Value = DATE_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REGISTRATION_COMPLETE",
                    Size = 1,
                    Value = FL_REGISTRATION_COMPLETE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_STATUS",
                    Value = DT_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TEXT_REGISTRATION_COMMENTS",
                    Value = TEXT_REGISTRATION_COMMENTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPSTS",
                    Size = 1,
                    Value = SCI_APPSTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APTYPE",
                    Size = 1,
                    Value = SCI_APTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REG_APP_WITH_CASENO] @ID_NEWCASE, @ID_USER, @NO_CASE, @NO_CASE_CHCKDGT, @DT_REGISTRATION_MODIFIED, @DATE_REGISTRATION, @DATE_ERROR, @FL_REGISTRATION_COMPLETE, @CD_REGISTRATION_STATUS, @DT_REGISTRATION_STATUS, @TEXT_REGISTRATION_COMMENTS, @SCI_APPSTS, @SCI_APTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REG_CASEAsync(int? ID_NEWCASE, string FL_OLD, string FL_LOCAL, string ApplicationID, string ID_USER, string CASEENTRYDT, string CASEMODDT, string NO_CASE, string NO_CASE_CHCKDGT, string CD_CNTY, string CD_OFF, string TRANDT, string DUEDT, string RCTYOFF, string ADDR1, string ADDR2, string AD_CITY, string AD_STATE, string AD_ZIP, string AD_ZIP_4, string SPECDT, string APPSTS, string APPDT, string PROSTD, string HHTYP, string HOMELS, string WORKER, string EXPDT, string PASS, string AUTH1, string AUTH2, string HNBR, string FLBTR, string SCIERRMSG, string REG_DT, string ERROR_DT, string DEL_DT, int? NBR_APPTS, string FL_APPTMADE, DateTime? CASE_APPTDATETIME, string NOMA_DT, string OACIS_INT_DT, string VERIFICATION_PEND_DT, string AWARD_DT, string DENY_DT, string CD_REGISTRATION_STATUS, string CD_REGISTRATION_STATUS_SENT, string DT_LAST_CD_STATUS_SENT, string TX_REGISTRATION_COMMENT, string FL_REGISTRATION_COMPLETE, string CD_LANGUAGE, string FL_EXPEDITED, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OLD",
                    Size = 1,
                    Value = FL_OLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LOCAL",
                    Size = 1,
                    Value = FL_LOCAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationID",
                    Size = 36,
                    Value = ApplicationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASEENTRYDT",
                    Size = 8,
                    Value = CASEENTRYDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASEMODDT",
                    Size = 8,
                    Value = CASEMODDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Size = 1,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_OFF",
                    Size = 2,
                    Value = CD_OFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TRANDT",
                    Size = 8,
                    Value = TRANDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DUEDT",
                    Size = 8,
                    Value = DUEDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RCTYOFF",
                    Size = 5,
                    Value = RCTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDR1",
                    Size = 25,
                    Value = ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADDR2",
                    Size = 25,
                    Value = ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 17,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP_4",
                    Size = 4,
                    Value = AD_ZIP_4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SPECDT",
                    Size = 8,
                    Value = SPECDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "APPSTS",
                    Size = 1,
                    Value = APPSTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "APPDT",
                    Size = 8,
                    Value = APPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PROSTD",
                    Size = 1,
                    Value = PROSTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HHTYP",
                    Size = 1,
                    Value = HHTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HOMELS",
                    Size = 1,
                    Value = HOMELS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "WORKER",
                    Size = 3,
                    Value = WORKER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXPDT",
                    Size = 8,
                    Value = EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PASS",
                    Size = 1,
                    Value = PASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AUTH1",
                    Size = 35,
                    Value = AUTH1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AUTH2",
                    Size = 35,
                    Value = AUTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "HNBR",
                    Size = 2,
                    Value = HNBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FLBTR",
                    Size = 1,
                    Value = FLBTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCIERRMSG",
                    Size = 255,
                    Value = SCIERRMSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "REG_DT",
                    Size = 8,
                    Value = REG_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ERROR_DT",
                    Size = 8,
                    Value = ERROR_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEL_DT",
                    Size = 8,
                    Value = DEL_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NBR_APPTS",
                    Value = NBR_APPTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_APPTMADE",
                    Size = 1,
                    Value = FL_APPTMADE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_APPTDATETIME",
                    Value = CASE_APPTDATETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NOMA_DT",
                    Size = 8,
                    Value = NOMA_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OACIS_INT_DT",
                    Size = 8,
                    Value = OACIS_INT_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "VERIFICATION_PEND_DT",
                    Size = 8,
                    Value = VERIFICATION_PEND_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AWARD_DT",
                    Size = 8,
                    Value = AWARD_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DENY_DT",
                    Size = 8,
                    Value = DENY_DT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS_SENT",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_LAST_CD_STATUS_SENT",
                    Size = 8,
                    Value = DT_LAST_CD_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_REGISTRATION_COMMENT",
                    Value = TX_REGISTRATION_COMMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REGISTRATION_COMPLETE",
                    Size = 1,
                    Value = FL_REGISTRATION_COMPLETE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE",
                    Size = 2,
                    Value = CD_LANGUAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPEDITED",
                    Size = 1,
                    Value = FL_EXPEDITED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REG_CASE] @ID_NEWCASE, @FL_OLD, @FL_LOCAL, @ApplicationID, @ID_USER, @CASEENTRYDT, @CASEMODDT, @NO_CASE, @NO_CASE_CHCKDGT, @CD_CNTY, @CD_OFF, @TRANDT, @DUEDT, @RCTYOFF, @ADDR1, @ADDR2, @AD_CITY, @AD_STATE, @AD_ZIP, @AD_ZIP_4, @SPECDT, @APPSTS, @APPDT, @PROSTD, @HHTYP, @HOMELS, @WORKER, @EXPDT, @PASS, @AUTH1, @AUTH2, @HNBR, @FLBTR, @SCIERRMSG, @REG_DT, @ERROR_DT, @DEL_DT, @NBR_APPTS, @FL_APPTMADE, @CASE_APPTDATETIME, @NOMA_DT, @OACIS_INT_DT, @VERIFICATION_PEND_DT, @AWARD_DT, @DENY_DT, @CD_REGISTRATION_STATUS, @CD_REGISTRATION_STATUS_SENT, @DT_LAST_CD_STATUS_SENT, @TX_REGISTRATION_COMMENT, @FL_REGISTRATION_COMPLETE, @CD_LANGUAGE, @FL_EXPEDITED", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REG_CASE_CNTYAsync(int? ID_NEWCASE, string CD_CNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REG_CASE_CNTY] @ID_NEWCASE, @CD_CNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REG_CASE_DENIALAsync(string NO_CASE, DateTime? DT_REGISTRATION_MODIFIED, string DATE_DENY, string CD_REGISTRATION_STATUS, DateTime? DT_REGISTRATION_STATUS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DENY",
                    Size = 8,
                    Value = DATE_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_STATUS",
                    Value = DT_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REG_CASE_DENIAL] @NO_CASE, @DT_REGISTRATION_MODIFIED, @DATE_DENY, @CD_REGISTRATION_STATUS, @DT_REGISTRATION_STATUS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REG_CASEMBRSAsync(int? ID_NEWMBR, int? ID_NEWCASE, string DEPNUM, string SSN, string VERIND, string DEP_NM_MMBR_LST, string DEP_NM_MMBR_FRST, string DEP_NM_MMBR_MDL, string DEP_NM_MMBR_SFX, string SEX, string CD_RACE, string DOB, string PACASE, string ELIG, string FL_INVALID_MEMBER, string CD_INVALID_MEMBER, string FL_HOH, string ApplicationID, int? PersonID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DEPNUM",
                    Size = 2,
                    Value = DEPNUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "VERIND",
                    Size = 1,
                    Value = VERIND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_LST",
                    Size = 20,
                    Value = DEP_NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_FRST",
                    Size = 20,
                    Value = DEP_NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_MDL",
                    Size = 20,
                    Value = DEP_NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_SFX",
                    Size = 20,
                    Value = DEP_NM_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SEX",
                    Size = 1,
                    Value = SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Size = 2,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Size = 8,
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PACASE",
                    Size = 1,
                    Value = PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ELIG",
                    Size = 1,
                    Value = ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INVALID_MEMBER",
                    Size = 1,
                    Value = FL_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INVALID_MEMBER",
                    Size = 2,
                    Value = CD_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HOH",
                    Size = 1,
                    Value = FL_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ApplicationID",
                    Size = 36,
                    Value = ApplicationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PersonID",
                    Value = PersonID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REG_CASEMBRS] @ID_NEWMBR, @ID_NEWCASE, @DEPNUM, @SSN, @VERIND, @DEP_NM_MMBR_LST, @DEP_NM_MMBR_FRST, @DEP_NM_MMBR_MDL, @DEP_NM_MMBR_SFX, @SEX, @CD_RACE, @DOB, @PACASE, @ELIG, @FL_INVALID_MEMBER, @CD_INVALID_MEMBER, @FL_HOH, @ApplicationID, @PersonID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REG_FLACTIVEAsync(int? ID_NEWCASE, DateTime? DT_REGISTRATION_MODIFIED, string FL_ACTIVE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REG_FLACTIVE] @ID_NEWCASE, @DT_REGISTRATION_MODIFIED, @FL_ACTIVE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REG_MMBRAsync(int? ID_NEWMBR, string SSN, string DEP_NM_MMBR_LST, string DEP_NM_MMBR_FRST, string DEP_NM_MMBR_MDL, string DEP_NM_MMBR_SFX, string SEX, string CD_RACE, string DOB, string PACASE, string ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_LST",
                    Size = 20,
                    Value = DEP_NM_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_FRST",
                    Size = 20,
                    Value = DEP_NM_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_MDL",
                    Size = 20,
                    Value = DEP_NM_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DEP_NM_MMBR_SFX",
                    Size = 20,
                    Value = DEP_NM_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SEX",
                    Size = 1,
                    Value = SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Size = 2,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DOB",
                    Size = 8,
                    Value = DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PACASE",
                    Size = 1,
                    Value = PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ELIG",
                    Size = 1,
                    Value = ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REG_MMBR] @ID_NEWMBR, @SSN, @DEP_NM_MMBR_LST, @DEP_NM_MMBR_FRST, @DEP_NM_MMBR_MDL, @DEP_NM_MMBR_SFX, @SEX, @CD_RACE, @DOB, @PACASE, @ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REG_MSGAsync(int? ID_NEWCASE, string DATE_ERROR, string SCI_ERROR_MSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_ERROR",
                    Size = 8,
                    Value = DATE_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ERROR_MSG",
                    Size = 255,
                    Value = SCI_ERROR_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REG_MSG] @ID_NEWCASE, @DATE_ERROR, @SCI_ERROR_MSG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_APPLICATIONAsync(int? ID_NEWCASE, string ID_USER, string NO_CASE, string NO_CASE_CHCKDGT, string COUNTY_SUBMIT, string COUNTY_OFFICE, DateTime? DT_REGISTRATION_MODIFIED, string FL_EXPEDITED, string CD_SOURCE, string CD_LANGUAGE, string DHR_SIGNED_DATE, string ALL_MAILING_ADDR1, string ALL_MAILING_ADDR2, string ALL_MAILING_CITY, string ALL_MAILING_STATE, string ALL_MAILING_ZIP, string ALL_MAILING_ZIP4, string DHR_HOME_PHONE_NUMBER, string DHR_WORK_PHONE_NUMBER, string DHR_MESSAGE_PHONE_NUMBER, string DHR_CELL_NUMBER, string ALL_AUTH_REP_FIRST_NAME, string ALL_AUTH_REP_MIDDLE_NAME, string ALL_AUTH_REP_LAST_NAME, string ALL_EBT_REP_FIRST_NAME, string ALL_EBT_REP_MIDDLE_NAME, string ALL_EBT_REP_LAST_NAME, int? DHR_HOH_PERSON_ID, string SCI_SPECDT, string SCI_APPDT, string SCI_PROSTD, string SCI_HHTYP, string SCI_HOMELS, string SCI_WORKER, string SCI_OFFICE, string SCI_APTDT, string SCI_BATTER, string SCI_DENY, string SCI_EXPDT, string SCI_PASS, string SCI_AUTH1, string SCI_AUTH2, int? ID_DISASTER, string MYDHR_MIGRANT_EXPEDITE_FL, string MYDHR_INC_EXP_EXPEDITE_FL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Size = 2,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 4,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_OFFICE",
                    Size = 4,
                    Value = COUNTY_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPEDITED",
                    Size = 1,
                    Value = FL_EXPEDITED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SOURCE",
                    Size = 1,
                    Value = CD_SOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE",
                    Size = 2,
                    Value = CD_LANGUAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SIGNED_DATE",
                    Size = 8,
                    Value = DHR_SIGNED_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ADDR1",
                    Size = 25,
                    Value = ALL_MAILING_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ADDR2",
                    Size = 25,
                    Value = ALL_MAILING_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_CITY",
                    Size = 25,
                    Value = ALL_MAILING_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_STATE",
                    Size = 2,
                    Value = ALL_MAILING_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ZIP",
                    Size = 5,
                    Value = ALL_MAILING_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ZIP4",
                    Size = 4,
                    Value = ALL_MAILING_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_HOME_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_HOME_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_WORK_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_WORK_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MESSAGE_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_MESSAGE_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_CELL_NUMBER",
                    Size = 12,
                    Value = DHR_CELL_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_FIRST_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_MIDDLE_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_LAST_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_FIRST_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_MIDDLE_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_LAST_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_HOH_PERSON_ID",
                    Value = DHR_HOH_PERSON_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SPECDT",
                    Size = 8,
                    Value = SCI_SPECDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPDT",
                    Size = 8,
                    Value = SCI_APPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PROSTD",
                    Size = 1,
                    Value = SCI_PROSTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HHTYP",
                    Size = 1,
                    Value = SCI_HHTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HOMELS",
                    Size = 1,
                    Value = SCI_HOMELS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_WORKER",
                    Size = 3,
                    Value = SCI_WORKER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_OFFICE",
                    Size = 2,
                    Value = SCI_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APTDT",
                    Size = 8,
                    Value = SCI_APTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_BATTER",
                    Size = 1,
                    Value = SCI_BATTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DENY",
                    Size = 1,
                    Value = SCI_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_EXPDT",
                    Size = 8,
                    Value = SCI_EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PASS",
                    Size = 1,
                    Value = SCI_PASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH1",
                    Size = 35,
                    Value = SCI_AUTH1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH2",
                    Size = 35,
                    Value = SCI_AUTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_DISASTER",
                    Value = ID_DISASTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_MIGRANT_EXPEDITE_FL",
                    Size = 1,
                    Value = MYDHR_MIGRANT_EXPEDITE_FL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MYDHR_INC_EXP_EXPEDITE_FL",
                    Size = 1,
                    Value = MYDHR_INC_EXP_EXPEDITE_FL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_APPLICATION] @ID_NEWCASE, @ID_USER, @NO_CASE, @NO_CASE_CHCKDGT, @COUNTY_SUBMIT, @COUNTY_OFFICE, @DT_REGISTRATION_MODIFIED, @FL_EXPEDITED, @CD_SOURCE, @CD_LANGUAGE, @DHR_SIGNED_DATE, @ALL_MAILING_ADDR1, @ALL_MAILING_ADDR2, @ALL_MAILING_CITY, @ALL_MAILING_STATE, @ALL_MAILING_ZIP, @ALL_MAILING_ZIP4, @DHR_HOME_PHONE_NUMBER, @DHR_WORK_PHONE_NUMBER, @DHR_MESSAGE_PHONE_NUMBER, @DHR_CELL_NUMBER, @ALL_AUTH_REP_FIRST_NAME, @ALL_AUTH_REP_MIDDLE_NAME, @ALL_AUTH_REP_LAST_NAME, @ALL_EBT_REP_FIRST_NAME, @ALL_EBT_REP_MIDDLE_NAME, @ALL_EBT_REP_LAST_NAME, @DHR_HOH_PERSON_ID, @SCI_SPECDT, @SCI_APPDT, @SCI_PROSTD, @SCI_HHTYP, @SCI_HOMELS, @SCI_WORKER, @SCI_OFFICE, @SCI_APTDT, @SCI_BATTER, @SCI_DENY, @SCI_EXPDT, @SCI_PASS, @SCI_AUTH1, @SCI_AUTH2, @ID_DISASTER, @MYDHR_MIGRANT_EXPEDITE_FL, @MYDHR_INC_EXP_EXPEDITE_FL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_APPLICATION_09_09_2010Async(int? ID_NEWCASE, string ID_USER, string NO_CASE, string NO_CASE_CHCKDGT, string COUNTY_SUBMIT, string COUNTY_OFFICE, DateTime? DT_REGISTRATION_CREATIED, DateTime? DT_REGISTRATION_MODIFIED, DateTime? DT_CASE_APPTDATETIME, string DATE_REGISTRATION, string DATE_NOMA, string DATE_OACIS_INTERVIEW, string DATE_VERIFICATION_PENDING, string DATE_AWARD, string DATE_DENY, string DATE_DELETION, string DATE_ERROR, string FL_ACTIVE, string FL_REGISTRATION_COMPLETE, string FL_EXPEDITED, string FL_APPTMADE, string FL_OFFICEINT, string CD_SOURCE, string CD_LANGUAGE, string CD_REGISTRATION_STATUS, string CD_REGISTRATION_STATUS_SENT, DateTime? DT_REGISTRATION_STATUS, DateTime? DT_REGISTRATION_STATUS_SENT, string DHR_APPLICATION_ID, string DHR_APPLICATION_TYPE, string DHR_START_DATE, string DHR_SIGNED_DATE, string DHR_SUBMIT_TO_COUNTY_OFFICE, string ALL_MAILING_ADDR1, string ALL_MAILING_ADDR2, string ALL_MAILING_CITY, string ALL_MAILING_STATE, string ALL_MAILING_ZIP, string ALL_MAILING_ZIP4, string ALL_MAILING_COUNTY, string ALL_RESIDENCE_ADDR1, string ALL_RESIDENCE_ADDR2, string ALL_RESIDENCE_CITY, string ALL_RESIDENCE_STATE, string ALL_RESIDENCE_ZIP, string ALL_RESIDENCE_ZIP4, string DHR_HOME_PHONE_NUMBER, string DHR_WORK_PHONE_NUMBER, string DHR_MESSAGE_PHONE_NUMBER, string DHR_CELL_NUMBER, string DHR_EMAIL_ADDRESS, string ALL_AUTH_REP_FIRST_NAME, string ALL_AUTH_REP_MIDDLE_NAME, string ALL_AUTH_REP_LAST_NAME, string ALL_AUTH_REP_PHONE_NUMBER, string ALL_EBT_REP_FIRST_NAME, string ALL_EBT_REP_MIDDLE_NAME, string ALL_EBT_REP_LAST_NAME, string ALL_EBT_REP_PHONE_NUMBER, int? DHR_HOH_PERSON_ID, int? DHR_APPLICANT_PERSON_ID, int? ALL_HOH_ID, int? NUMBER_OF_APPTS, string TEXT_REGISTRATION_COMMENTS, int? NBR_IN_HH, string SCI_CASENO, string SCI_CHKDGT, string SCI_CTYOFF, string SCI_TRANDT, string SCI_DUEDT, string SCI_NAME, string SCI_ADDR1, string SCI_RCTYOFF, string SCI_ADDR2, string SCI_CITY, string SCI_ZIP5, string SCI_ZIP4, string SCI_SPECDT, string SCI_APPSTS, string SCI_APPDT, string SCI_PROSTD, string SCI_HHTYP, string SCI_HOMELS, string SCI_WORKER, string SCI_OFFICE, string SCI_APTDT, string SCI_BATTER, string SCI_DENY, string SCI_APTYPE, string SCI_EXPDT, string SCI_PASS, string SCI_AUTH1, string SCI_AUTH2, string SCI_ERROR_MSG, int? SCI_NBR_IN_HH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHCKDGT",
                    Size = 2,
                    Value = NO_CASE_CHCKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 4,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_OFFICE",
                    Size = 4,
                    Value = COUNTY_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_CREATIED",
                    Value = DT_REGISTRATION_CREATIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_APPTDATETIME",
                    Value = DT_CASE_APPTDATETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_REGISTRATION",
                    Size = 16,
                    Value = DATE_REGISTRATION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_NOMA",
                    Size = 16,
                    Value = DATE_NOMA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_OACIS_INTERVIEW",
                    Size = 16,
                    Value = DATE_OACIS_INTERVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_VERIFICATION_PENDING",
                    Size = 16,
                    Value = DATE_VERIFICATION_PENDING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_AWARD",
                    Size = 16,
                    Value = DATE_AWARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DENY",
                    Size = 16,
                    Value = DATE_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DELETION",
                    Size = 16,
                    Value = DATE_DELETION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_ERROR",
                    Size = 16,
                    Value = DATE_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REGISTRATION_COMPLETE",
                    Size = 1,
                    Value = FL_REGISTRATION_COMPLETE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXPEDITED",
                    Size = 1,
                    Value = FL_EXPEDITED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_APPTMADE",
                    Size = 1,
                    Value = FL_APPTMADE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OFFICEINT",
                    Size = 1,
                    Value = FL_OFFICEINT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SOURCE",
                    Size = 1,
                    Value = CD_SOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE",
                    Size = 2,
                    Value = CD_LANGUAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS_SENT",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_STATUS",
                    Value = DT_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_STATUS_SENT",
                    Value = DT_REGISTRATION_STATUS_SENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICATION_ID",
                    Size = 32,
                    Value = DHR_APPLICATION_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICATION_TYPE",
                    Size = 10,
                    Value = DHR_APPLICATION_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_START_DATE",
                    Size = 8,
                    Value = DHR_START_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SIGNED_DATE",
                    Size = 8,
                    Value = DHR_SIGNED_DATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SUBMIT_TO_COUNTY_OFFICE",
                    Size = 2,
                    Value = DHR_SUBMIT_TO_COUNTY_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ADDR1",
                    Size = 25,
                    Value = ALL_MAILING_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ADDR2",
                    Size = 25,
                    Value = ALL_MAILING_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_CITY",
                    Size = 25,
                    Value = ALL_MAILING_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_STATE",
                    Size = 2,
                    Value = ALL_MAILING_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ZIP",
                    Size = 5,
                    Value = ALL_MAILING_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_ZIP4",
                    Size = 4,
                    Value = ALL_MAILING_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_MAILING_COUNTY",
                    Size = 2,
                    Value = ALL_MAILING_COUNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ADDR1",
                    Size = 25,
                    Value = ALL_RESIDENCE_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ADDR2",
                    Size = 50,
                    Value = ALL_RESIDENCE_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_CITY",
                    Size = 25,
                    Value = ALL_RESIDENCE_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_STATE",
                    Size = 2,
                    Value = ALL_RESIDENCE_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ZIP",
                    Size = 5,
                    Value = ALL_RESIDENCE_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_RESIDENCE_ZIP4",
                    Size = 4,
                    Value = ALL_RESIDENCE_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_HOME_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_HOME_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_WORK_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_WORK_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MESSAGE_PHONE_NUMBER",
                    Size = 12,
                    Value = DHR_MESSAGE_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_CELL_NUMBER",
                    Size = 12,
                    Value = DHR_CELL_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_EMAIL_ADDRESS",
                    Size = 30,
                    Value = DHR_EMAIL_ADDRESS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_FIRST_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_MIDDLE_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_LAST_NAME",
                    Size = 20,
                    Value = ALL_AUTH_REP_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_AUTH_REP_PHONE_NUMBER",
                    Size = 12,
                    Value = ALL_AUTH_REP_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_FIRST_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_MIDDLE_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_LAST_NAME",
                    Size = 20,
                    Value = ALL_EBT_REP_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_EBT_REP_PHONE_NUMBER",
                    Size = 12,
                    Value = ALL_EBT_REP_PHONE_NUMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_HOH_PERSON_ID",
                    Value = DHR_HOH_PERSON_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICANT_PERSON_ID",
                    Value = DHR_APPLICANT_PERSON_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ALL_HOH_ID",
                    Value = ALL_HOH_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NUMBER_OF_APPTS",
                    Value = NUMBER_OF_APPTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TEXT_REGISTRATION_COMMENTS",
                    Value = TEXT_REGISTRATION_COMMENTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "NBR_IN_HH",
                    Value = NBR_IN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CASENO",
                    Size = 9,
                    Value = SCI_CASENO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CHKDGT",
                    Size = 1,
                    Value = SCI_CHKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CTYOFF",
                    Size = 4,
                    Value = SCI_CTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_TRANDT",
                    Size = 8,
                    Value = SCI_TRANDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DUEDT",
                    Size = 8,
                    Value = SCI_DUEDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_NAME",
                    Size = 28,
                    Value = SCI_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ADDR1",
                    Size = 25,
                    Value = SCI_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_RCTYOFF",
                    Size = 4,
                    Value = SCI_RCTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ADDR2",
                    Size = 25,
                    Value = SCI_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CITY",
                    Size = 20,
                    Value = SCI_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ZIP5",
                    Size = 5,
                    Value = SCI_ZIP5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ZIP4",
                    Size = 4,
                    Value = SCI_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SPECDT",
                    Size = 8,
                    Value = SCI_SPECDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPSTS",
                    Size = 1,
                    Value = SCI_APPSTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPDT",
                    Size = 8,
                    Value = SCI_APPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PROSTD",
                    Size = 1,
                    Value = SCI_PROSTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HHTYP",
                    Size = 1,
                    Value = SCI_HHTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HOMELS",
                    Size = 1,
                    Value = SCI_HOMELS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_WORKER",
                    Size = 3,
                    Value = SCI_WORKER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_OFFICE",
                    Size = 2,
                    Value = SCI_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APTDT",
                    Size = 8,
                    Value = SCI_APTDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_BATTER",
                    Size = 1,
                    Value = SCI_BATTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DENY",
                    Size = 1,
                    Value = SCI_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APTYPE",
                    Size = 1,
                    Value = SCI_APTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_EXPDT",
                    Size = 8,
                    Value = SCI_EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PASS",
                    Size = 1,
                    Value = SCI_PASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH1",
                    Size = 35,
                    Value = SCI_AUTH1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH2",
                    Size = 35,
                    Value = SCI_AUTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ERROR_MSG",
                    Size = 510,
                    Value = SCI_ERROR_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_NBR_IN_HH",
                    Value = SCI_NBR_IN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_APPLICATION_09_09_2010] @ID_NEWCASE, @ID_USER, @NO_CASE, @NO_CASE_CHCKDGT, @COUNTY_SUBMIT, @COUNTY_OFFICE, @DT_REGISTRATION_CREATIED, @DT_REGISTRATION_MODIFIED, @DT_CASE_APPTDATETIME, @DATE_REGISTRATION, @DATE_NOMA, @DATE_OACIS_INTERVIEW, @DATE_VERIFICATION_PENDING, @DATE_AWARD, @DATE_DENY, @DATE_DELETION, @DATE_ERROR, @FL_ACTIVE, @FL_REGISTRATION_COMPLETE, @FL_EXPEDITED, @FL_APPTMADE, @FL_OFFICEINT, @CD_SOURCE, @CD_LANGUAGE, @CD_REGISTRATION_STATUS, @CD_REGISTRATION_STATUS_SENT, @DT_REGISTRATION_STATUS, @DT_REGISTRATION_STATUS_SENT, @DHR_APPLICATION_ID, @DHR_APPLICATION_TYPE, @DHR_START_DATE, @DHR_SIGNED_DATE, @DHR_SUBMIT_TO_COUNTY_OFFICE, @ALL_MAILING_ADDR1, @ALL_MAILING_ADDR2, @ALL_MAILING_CITY, @ALL_MAILING_STATE, @ALL_MAILING_ZIP, @ALL_MAILING_ZIP4, @ALL_MAILING_COUNTY, @ALL_RESIDENCE_ADDR1, @ALL_RESIDENCE_ADDR2, @ALL_RESIDENCE_CITY, @ALL_RESIDENCE_STATE, @ALL_RESIDENCE_ZIP, @ALL_RESIDENCE_ZIP4, @DHR_HOME_PHONE_NUMBER, @DHR_WORK_PHONE_NUMBER, @DHR_MESSAGE_PHONE_NUMBER, @DHR_CELL_NUMBER, @DHR_EMAIL_ADDRESS, @ALL_AUTH_REP_FIRST_NAME, @ALL_AUTH_REP_MIDDLE_NAME, @ALL_AUTH_REP_LAST_NAME, @ALL_AUTH_REP_PHONE_NUMBER, @ALL_EBT_REP_FIRST_NAME, @ALL_EBT_REP_MIDDLE_NAME, @ALL_EBT_REP_LAST_NAME, @ALL_EBT_REP_PHONE_NUMBER, @DHR_HOH_PERSON_ID, @DHR_APPLICANT_PERSON_ID, @ALL_HOH_ID, @NUMBER_OF_APPTS, @TEXT_REGISTRATION_COMMENTS, @NBR_IN_HH, @SCI_CASENO, @SCI_CHKDGT, @SCI_CTYOFF, @SCI_TRANDT, @SCI_DUEDT, @SCI_NAME, @SCI_ADDR1, @SCI_RCTYOFF, @SCI_ADDR2, @SCI_CITY, @SCI_ZIP5, @SCI_ZIP4, @SCI_SPECDT, @SCI_APPSTS, @SCI_APPDT, @SCI_PROSTD, @SCI_HHTYP, @SCI_HOMELS, @SCI_WORKER, @SCI_OFFICE, @SCI_APTDT, @SCI_BATTER, @SCI_DENY, @SCI_APTYPE, @SCI_EXPDT, @SCI_PASS, @SCI_AUTH1, @SCI_AUTH2, @SCI_ERROR_MSG, @SCI_NBR_IN_HH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_APPLICATION_AwdDnyAsync(string NO_CASE, DateTime? DT_REGISTRATION_MODIFIED, string DATE_AWARD, string DATE_DENY, string FL_ACTIVE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_AWARD",
                    Size = 8,
                    Value = DATE_AWARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DENY",
                    Size = 8,
                    Value = DATE_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_APPLICATION_AwdDny] @NO_CASE, @DT_REGISTRATION_MODIFIED, @DATE_AWARD, @DATE_DENY, @FL_ACTIVE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_APPLICATION_byIdNewCase_AwdDnyAsync(int? ID_NEWCASE, DateTime? DT_REGISTRATION_MODIFIED, string DATE_AWARD, string DATE_DENY, string FL_ACTIVE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_MODIFIED",
                    Value = DT_REGISTRATION_MODIFIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_AWARD",
                    Size = 8,
                    Value = DATE_AWARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DENY",
                    Size = 8,
                    Value = DATE_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_APPLICATION_byIdNewCase_AwdDny] @ID_NEWCASE, @DT_REGISTRATION_MODIFIED, @DATE_AWARD, @DATE_DENY, @FL_ACTIVE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTER_APPLICATION_CNTYAsync(int? ID_NEWCASE, string COUNTY_SUBMIT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTY_SUBMIT",
                    Size = 2,
                    Value = COUNTY_SUBMIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTER_APPLICATION_CNTY] @ID_NEWCASE, @COUNTY_SUBMIT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTER_APPLICATION_CNTYCHKAsync(int? ID_NEWCASE, string CHKDGT, string OFFCD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CHKDGT",
                    Size = 1,
                    Value = CHKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "OFFCD",
                    Size = 2,
                    Value = OFFCD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTER_APPLICATION_CNTYCHK] @ID_NEWCASE, @CHKDGT, @OFFCD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_APPLICATION_FLAG_COMPLETEDAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_APPLICATION_FLAG_COMPLETED] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTER_APPLICATION_PAAsync(int? ID_NEWMBR, string SCI_PACASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PACASE",
                    Size = 9,
                    Value = SCI_PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTER_APPLICATION_PA] @ID_NEWMBR, @SCI_PACASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_APPLICATION_RECERT_REOPENAsync(int? ID_NEWCASE, DateTime? DT_REGISTRATION_CREATIED, DateTime? DT_CASE_APPTDATETIME, string DATE_REGISTRATION, string DATE_NOMA, string DATE_OACIS_INTERVIEW, string DATE_VERIFICATION_PENDING, string DATE_AWARD, string DATE_DENY, string DATE_DELETION, string DATE_ERROR, string FL_ACTIVE, string FL_REGISTRATION_COMPLETE, string CD_REGISTRATION_STATUS, DateTime? DT_REGISTRATION_STATUS, string DHR_APPLICATION_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_CREATIED",
                    Value = DT_REGISTRATION_CREATIED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_APPTDATETIME",
                    Value = DT_CASE_APPTDATETIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_REGISTRATION",
                    Size = 8,
                    Value = DATE_REGISTRATION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_NOMA",
                    Size = 8,
                    Value = DATE_NOMA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_OACIS_INTERVIEW",
                    Size = 8,
                    Value = DATE_OACIS_INTERVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_VERIFICATION_PENDING",
                    Size = 8,
                    Value = DATE_VERIFICATION_PENDING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_AWARD",
                    Size = 8,
                    Value = DATE_AWARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DENY",
                    Size = 8,
                    Value = DATE_DENY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_DELETION",
                    Size = 8,
                    Value = DATE_DELETION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DATE_ERROR",
                    Size = 8,
                    Value = DATE_ERROR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_REGISTRATION_COMPLETE",
                    Size = 1,
                    Value = FL_REGISTRATION_COMPLETE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REGISTRATION_STATUS",
                    Size = 2,
                    Value = CD_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_REGISTRATION_STATUS",
                    Value = DT_REGISTRATION_STATUS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICATION_TYPE",
                    Size = 10,
                    Value = DHR_APPLICATION_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_APPLICATION_RECERT_REOPEN] @ID_NEWCASE, @DT_REGISTRATION_CREATIED, @DT_CASE_APPTDATETIME, @DATE_REGISTRATION, @DATE_NOMA, @DATE_OACIS_INTERVIEW, @DATE_VERIFICATION_PENDING, @DATE_AWARD, @DATE_DENY, @DATE_DELETION, @DATE_ERROR, @FL_ACTIVE, @FL_REGISTRATION_COMPLETE, @CD_REGISTRATION_STATUS, @DT_REGISTRATION_STATUS, @DHR_APPLICATION_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTER_APPLICATION_SCI_MSGAsync(int? ID_NEWCASE, string SCI_MESSAGE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_MESSAGE",
                    Size = 255,
                    Value = SCI_MESSAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTER_APPLICATION_SCI_MSG] @ID_NEWCASE, @SCI_MESSAGE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_CASE_SCIII_INFOAsync(int? ID_NEWCASE, string NO_CASE, string SCI_CHKDGT, string SCI_CTYOFF, string SCI_TRANDT, string SCI_DUEDT, string SCI_NAME, string SCI_RCTYOFF, string CD_LANGUAGE, string SCI_ADDR1, string SCI_ADDR2, string SCI_CITY, string SCI_ZIP5, string SCI_ZIP4, string SCI_SPECDT, string SCI_APPSTS, string SCI_APPDT, string SCI_PROSTD, string SCI_HHTYP, string SCI_HOMELS, string SCI_WORKER, string SCI_OFFICE, string SCI_BATTER, string SCI_APTYPE, string SCI_EXPDT, string SCI_PASS, string SCI_AUTH1, string SCI_AUTH2, int? SCI_NBR_IN_HH, string SCI_ERROR_MSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Size = 9,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CHKDGT",
                    Size = 1,
                    Value = SCI_CHKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CTYOFF",
                    Size = 4,
                    Value = SCI_CTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_TRANDT",
                    Size = 8,
                    Value = SCI_TRANDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DUEDT",
                    Size = 8,
                    Value = SCI_DUEDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_NAME",
                    Size = 28,
                    Value = SCI_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_RCTYOFF",
                    Size = 4,
                    Value = SCI_RCTYOFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE",
                    Size = 2,
                    Value = CD_LANGUAGE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ADDR1",
                    Size = 25,
                    Value = SCI_ADDR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ADDR2",
                    Size = 25,
                    Value = SCI_ADDR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_CITY",
                    Size = 20,
                    Value = SCI_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ZIP5",
                    Size = 5,
                    Value = SCI_ZIP5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ZIP4",
                    Size = 4,
                    Value = SCI_ZIP4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SPECDT",
                    Size = 8,
                    Value = SCI_SPECDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPSTS",
                    Size = 1,
                    Value = SCI_APPSTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APPDT",
                    Size = 8,
                    Value = SCI_APPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PROSTD",
                    Size = 1,
                    Value = SCI_PROSTD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HHTYP",
                    Size = 1,
                    Value = SCI_HHTYP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_HOMELS",
                    Size = 1,
                    Value = SCI_HOMELS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_WORKER",
                    Size = 3,
                    Value = SCI_WORKER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_OFFICE",
                    Size = 2,
                    Value = SCI_OFFICE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_BATTER",
                    Size = 1,
                    Value = SCI_BATTER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_APTYPE",
                    Size = 1,
                    Value = SCI_APTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_EXPDT",
                    Size = 8,
                    Value = SCI_EXPDT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PASS",
                    Size = 1,
                    Value = SCI_PASS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH1",
                    Size = 35,
                    Value = SCI_AUTH1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_AUTH2",
                    Size = 35,
                    Value = SCI_AUTH2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_NBR_IN_HH",
                    Value = SCI_NBR_IN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ERROR_MSG",
                    Value = SCI_ERROR_MSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_CASE_SCIII_INFO] @ID_NEWCASE, @NO_CASE, @SCI_CHKDGT, @SCI_CTYOFF, @SCI_TRANDT, @SCI_DUEDT, @SCI_NAME, @SCI_RCTYOFF, @CD_LANGUAGE, @SCI_ADDR1, @SCI_ADDR2, @SCI_CITY, @SCI_ZIP5, @SCI_ZIP4, @SCI_SPECDT, @SCI_APPSTS, @SCI_APPDT, @SCI_PROSTD, @SCI_HHTYP, @SCI_HOMELS, @SCI_WORKER, @SCI_OFFICE, @SCI_BATTER, @SCI_APTYPE, @SCI_EXPDT, @SCI_PASS, @SCI_AUTH1, @SCI_AUTH2, @SCI_NBR_IN_HH, @SCI_ERROR_MSG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<updt_REGISTER_MEMBERSResult>> updt_REGISTER_MEMBERSAsync(int? ID_NEWMBR, int? ID_NEWCASE, int? DEPENDENT_NMBR, string FL_HOH, string FL_INVALID_MEMBER, string CD_INVALID_MEMBER, string DHR_APPLICATION_ID, int? DHR_PERSON_ID, string DHR_RELATIONSHIP, string DHR_ETHNICITY, string DHR_USCITIZEN, string DHR_MEMBER_SSN, string DHR_MEMBER_FIRST_NAME, string DHR_MEMBER_MIDDLE_NAME, string DHR_MEMBER_LAST_NAME, string DHR_MEMBER_SUFFIX_NAME, string DHR_DOB, string DHR_SEX, string DHR_RACE, string SCI_DEPNUM, string SCI_SSN, string SCI_VERIND, string SCI_DEPNAM, string SCI_SEX, string SCI_RACE, string SCI_DOB, string SCI_PACASE, string SCI_ELIG, string SCI_ERRMSG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DEPENDENT_NMBR",
                    Value = DEPENDENT_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HOH",
                    Size = 1,
                    Value = FL_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_INVALID_MEMBER",
                    Size = 1,
                    Value = FL_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_INVALID_MEMBER",
                    Size = 2,
                    Value = CD_INVALID_MEMBER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_APPLICATION_ID",
                    Size = 36,
                    Value = DHR_APPLICATION_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_PERSON_ID",
                    Value = DHR_PERSON_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_RELATIONSHIP",
                    Size = 20,
                    Value = DHR_RELATIONSHIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_ETHNICITY",
                    Size = 1,
                    Value = DHR_ETHNICITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_USCITIZEN",
                    Size = 1,
                    Value = DHR_USCITIZEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SSN",
                    Size = 11,
                    Value = DHR_MEMBER_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_FIRST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_MIDDLE_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_LAST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SUFFIX_NAME",
                    Size = 3,
                    Value = DHR_MEMBER_SUFFIX_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_DOB",
                    Size = 8,
                    Value = DHR_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SEX",
                    Size = 1,
                    Value = DHR_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_RACE",
                    Size = 2,
                    Value = DHR_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNUM",
                    Size = 2,
                    Value = SCI_DEPNUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SSN",
                    Size = 9,
                    Value = SCI_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_VERIND",
                    Size = 1,
                    Value = SCI_VERIND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNAM",
                    Size = 28,
                    Value = SCI_DEPNAM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SEX",
                    Size = 1,
                    Value = SCI_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_RACE",
                    Size = 2,
                    Value = SCI_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DOB",
                    Size = 8,
                    Value = SCI_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PACASE",
                    Size = 9,
                    Value = SCI_PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ELIG",
                    Size = 1,
                    Value = SCI_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ERRMSG",
                    Size = 79,
                    Value = SCI_ERRMSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<updt_REGISTER_MEMBERSResult>("EXEC @returnValue = [dbo].[updt_REGISTER_MEMBERS] @ID_NEWMBR, @ID_NEWCASE, @DEPENDENT_NMBR, @FL_HOH, @FL_INVALID_MEMBER, @CD_INVALID_MEMBER, @DHR_APPLICATION_ID, @DHR_PERSON_ID, @DHR_RELATIONSHIP, @DHR_ETHNICITY, @DHR_USCITIZEN, @DHR_MEMBER_SSN, @DHR_MEMBER_FIRST_NAME, @DHR_MEMBER_MIDDLE_NAME, @DHR_MEMBER_LAST_NAME, @DHR_MEMBER_SUFFIX_NAME, @DHR_DOB, @DHR_SEX, @DHR_RACE, @SCI_DEPNUM, @SCI_SSN, @SCI_VERIND, @SCI_DEPNAM, @SCI_SEX, @SCI_RACE, @SCI_DOB, @SCI_PACASE, @SCI_ELIG, @SCI_ERRMSG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_MEMBERS_DepNbrAsync(int? ID_NEWMBR, int? DEPENDENT_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DEPENDENT_NMBR",
                    Value = DEPENDENT_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_MEMBERS_DepNbr] @ID_NEWMBR, @DEPENDENT_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTER_MEMBERS_MATCH_CASEAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTER_MEMBERS_MATCH_CASE] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTER_MEMBERS_MATCH_MBRAsync(int? ID_NEWMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTER_MEMBERS_MATCH_MBR] @ID_NEWMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_MEMBERS_RECERTAsync(int? ID_NEWMBR, string DHR_MEMBER_SSN, string DHR_MEMBER_FIRST_NAME, string DHR_MEMBER_MIDDLE_NAME, string DHR_MEMBER_LAST_NAME, string DHR_MEMBER_SUFFIX_NAME, string DHR_DOB, string DHR_SEX, string DHR_RACE, string SCI_ELIG, string SCI_PANBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SSN",
                    Size = 9,
                    Value = DHR_MEMBER_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_FIRST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_FIRST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_MIDDLE_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_MIDDLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_LAST_NAME",
                    Size = 20,
                    Value = DHR_MEMBER_LAST_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SUFFIX_NAME",
                    Size = 3,
                    Value = DHR_MEMBER_SUFFIX_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_DOB",
                    Size = 8,
                    Value = DHR_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_SEX",
                    Size = 1,
                    Value = DHR_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_RACE",
                    Size = 2,
                    Value = DHR_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ELIG",
                    Size = 1,
                    Value = SCI_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PANBR",
                    Size = 9,
                    Value = SCI_PANBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_MEMBERS_RECERT] @ID_NEWMBR, @DHR_MEMBER_SSN, @DHR_MEMBER_FIRST_NAME, @DHR_MEMBER_MIDDLE_NAME, @DHR_MEMBER_LAST_NAME, @DHR_MEMBER_SUFFIX_NAME, @DHR_DOB, @DHR_SEX, @DHR_RACE, @SCI_ELIG, @SCI_PANBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_MEMBERS_SCIII_INFOAsync(int? ID_NEWCASE, string SCI_DEPNUM, string SCI_SSN, string SCI_VERIND, string SCI_DEPNAM, string SCI_SEX, string SCI_RACE, string SCI_DOB, string SCI_PACASE, string SCI_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNUM",
                    Size = 2,
                    Value = SCI_DEPNUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SSN",
                    Size = 9,
                    Value = SCI_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_VERIND",
                    Size = 1,
                    Value = SCI_VERIND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNAM",
                    Size = 28,
                    Value = SCI_DEPNAM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SEX",
                    Size = 1,
                    Value = SCI_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_RACE",
                    Size = 2,
                    Value = SCI_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DOB",
                    Size = 8,
                    Value = SCI_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PACASE",
                    Size = 9,
                    Value = SCI_PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ELIG",
                    Size = 1,
                    Value = SCI_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_MEMBERS_SCIII_INFO] @ID_NEWCASE, @SCI_DEPNUM, @SCI_SSN, @SCI_VERIND, @SCI_DEPNAM, @SCI_SEX, @SCI_RACE, @SCI_DOB, @SCI_PACASE, @SCI_ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_MEMBERS_SCIII_INFO_BAsync(int? ID_NEWCASE, string SCI_DEPNUM, string SCI_SSN, string SCI_VERIND, string SCI_DEPNAM, string SCI_SEX, string SCI_RACE, string SCI_DOB, string SCI_PACASE, string SCI_ELIG, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNUM",
                    Size = 2,
                    Value = SCI_DEPNUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SSN",
                    Size = 9,
                    Value = SCI_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_VERIND",
                    Size = 1,
                    Value = SCI_VERIND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DEPNAM",
                    Size = 28,
                    Value = SCI_DEPNAM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_SEX",
                    Size = 1,
                    Value = SCI_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_RACE",
                    Size = 2,
                    Value = SCI_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_DOB",
                    Size = 8,
                    Value = SCI_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_PACASE",
                    Size = 9,
                    Value = SCI_PACASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SCI_ELIG",
                    Size = 1,
                    Value = SCI_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_MEMBERS_SCIII_INFO_B] @ID_NEWCASE, @SCI_DEPNUM, @SCI_SSN, @SCI_VERIND, @SCI_DEPNAM, @SCI_SEX, @SCI_RACE, @SCI_DOB, @SCI_PACASE, @SCI_ELIG", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> updt_REGISTER_MEMBERS_SSNAsync(int? ID_NEWMBR, string DHR_MEMBER_SSN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWMBR",
                    Value = ID_NEWMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DHR_MEMBER_SSN",
                    Size = 9,
                    Value = DHR_MEMBER_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[updt_REGISTER_MEMBERS_SSN] @ID_NEWMBR, @DHR_MEMBER_SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTRATION_ARCHIVEAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTRATION_ARCHIVE]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTRATION_FLAGS_RIDAPPAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTRATION_FLAGS_RIDAPP] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REGISTRATION_FLAGS_UndoRIDAPPAsync(int? ID_NEWCASE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NEWCASE",
                    Value = ID_NEWCASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REGISTRATION_FLAGS_UndoRIDAPP] @ID_NEWCASE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Updt_REJ_CLOResult>> Updt_REJ_CLOAsync(decimal? ID_RJCTN_CLSR, int? ID_CASE_NMBR, decimal? ID_RJCTN_CLSR_CODES, DateTime? DT_RJCTN_CLSR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RJCTN_CLSR_CODES",
                    Precision = 2,
                    Value = ID_RJCTN_CLSR_CODES ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RJCTN_CLSR",
                    Value = DT_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Updt_REJ_CLOResult>("EXEC @returnValue = [dbo].[Updt_REJ_CLO] @ID_RJCTN_CLSR, @ID_CASE_NMBR, @ID_RJCTN_CLSR_CODES, @DT_RJCTN_CLSR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_REPORTINGAsync(int? ID_RPRTNG, int? ID_CASE_NMBR, string CD_RPRTNG_RQRMNT, DateTime? DT_RPRTNG, string TX_RPRTNG_RQRMNT_DSCR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RPRTNG",
                    Value = ID_RPRTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RPRTNG_RQRMNT",
                    Size = 1,
                    Value = CD_RPRTNG_RQRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RPRTNG",
                    Value = DT_RPRTNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RPRTNG_RQRMNT_DSCR",
                    Value = TX_RPRTNG_RQRMNT_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_REPORTING] @ID_RPRTNG, @ID_CASE_NMBR, @CD_RPRTNG_RQRMNT, @DT_RPRTNG, @TX_RPRTNG_RQRMNT_DSCR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_RESOURCEAsync(short? ID_RSRC, int? ID_MMBR, int? ID_RSRC_CODE, decimal? AM_RSRC_INCM, decimal? AM_RSRC_VALUE, decimal? AM_TRST_INTRST, decimal? AM_WTHDRWL_PNLTY, string FL_CHLD_TRUST_FUND, string FL_CRT_ORDRD, string FL_EXCLD_RSRC, string FL_JNT_ACCT, string FL_RCVNG_TRUST_INTRST, string FL_TRUST_ACCSSBL, string FL_WTHDRWL_PNLTY, decimal? ID_FRQNCY_INTRST, int? ID_VRFCTN_RSRC, string NM_BANK_INSTTTN, string NM_JNT_MMBR_LST, string NM_JNT_MMBR_FRST, string NM_JNT_MMBR_MDL, string NM_JNT_MMBR_SFX, string NM_SRC_LCTN, string NO_ACCT, string FL_CTGRCLLY_ELGBL, string CD_MONTH, string SQLTYPE, int? ID_UNERND_INCM, string TX_VRFCTN_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC",
                    Value = ID_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSRC_CODE",
                    Value = ID_RSRC_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSRC_INCM",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSRC_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSRC_VALUE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSRC_VALUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_TRST_INTRST",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_TRST_INTRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_WTHDRWL_PNLTY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_WTHDRWL_PNLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CHLD_TRUST_FUND",
                    Size = 1,
                    Value = FL_CHLD_TRUST_FUND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CRT_ORDRD",
                    Size = 1,
                    Value = FL_CRT_ORDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EXCLD_RSRC",
                    Size = 1,
                    Value = FL_EXCLD_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_JNT_ACCT",
                    Size = 1,
                    Value = FL_JNT_ACCT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RCVNG_TRUST_INTRST",
                    Size = 1,
                    Value = FL_RCVNG_TRUST_INTRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TRUST_ACCSSBL",
                    Size = 1,
                    Value = FL_TRUST_ACCSSBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WTHDRWL_PNLTY",
                    Size = 1,
                    Value = FL_WTHDRWL_PNLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_INTRST",
                    Precision = 1,
                    Value = ID_FRQNCY_INTRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RSRC",
                    Value = ID_VRFCTN_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_BANK_INSTTTN",
                    Size = 30,
                    Value = NM_BANK_INSTTTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_LST",
                    Size = 15,
                    Value = NM_JNT_MMBR_LST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_FRST",
                    Size = 15,
                    Value = NM_JNT_MMBR_FRST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_MDL",
                    Size = 15,
                    Value = NM_JNT_MMBR_MDL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_JNT_MMBR_SFX",
                    Size = 3,
                    Value = NM_JNT_MMBR_SFX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_SRC_LCTN",
                    Size = 30,
                    Value = NM_SRC_LCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_ACCT",
                    Size = 15,
                    Value = NO_ACCT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CTGRCLLY_ELGBL",
                    Size = 1,
                    Value = FL_CTGRCLLY_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_RSRC",
                    Value = TX_VRFCTN_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_RESOURCE] @ID_RSRC, @ID_MMBR, @ID_RSRC_CODE, @AM_RSRC_INCM, @AM_RSRC_VALUE, @AM_TRST_INTRST, @AM_WTHDRWL_PNLTY, @FL_CHLD_TRUST_FUND, @FL_CRT_ORDRD, @FL_EXCLD_RSRC, @FL_JNT_ACCT, @FL_RCVNG_TRUST_INTRST, @FL_TRUST_ACCSSBL, @FL_WTHDRWL_PNLTY, @ID_FRQNCY_INTRST, @ID_VRFCTN_RSRC, @NM_BANK_INSTTTN, @NM_JNT_MMBR_LST, @NM_JNT_MMBR_FRST, @NM_JNT_MMBR_MDL, @NM_JNT_MMBR_SFX, @NM_SRC_LCTN, @NO_ACCT, @FL_CTGRCLLY_ELGBL, @CD_MONTH, @SQLTYPE, @ID_UNERND_INCM, @TX_VRFCTN_RSRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_RESTORATIONAsync(short? ID_RSTRTN, int? ID_CASE_NMBR, decimal? ID_RSTRTN_RSN, decimal? AM_RSTRTN, DateTime? DT_RSTRTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN",
                    Value = ID_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN_RSN",
                    Precision = 2,
                    Value = ID_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSTRTN",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RSTRTN",
                    Value = DT_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_RESTORATION] @ID_RSTRTN, @ID_CASE_NMBR, @ID_RSTRTN_RSN, @AM_RSTRTN, @DT_RSTRTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_RmMealFlag_CASEAsync(int? ID_CASE_NMBR, string FL_PAY_ROOM_MEAL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_ROOM_MEAL",
                    Size = 1,
                    Value = FL_PAY_ROOM_MEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_RmMealFlag_CASE] @ID_CASE_NMBR, @FL_PAY_ROOM_MEAL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ROOMAsync(int? ID_ROOM, int? ID_MMBR, decimal? AM_ROOM_PAY, decimal? ID_FRQNCY_ROOM_PAY, int? ID_VRFCTN_ROOM, string CD_MONTH, string SQLTYPE, string TX_VRFCTN_ROOM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ROOM",
                    Value = ID_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ROOM_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_ROOM_PAY",
                    Precision = 2,
                    Value = ID_FRQNCY_ROOM_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ROOM",
                    Value = ID_VRFCTN_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_ROOM",
                    Value = TX_VRFCTN_ROOM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ROOM] @ID_ROOM, @ID_MMBR, @AM_ROOM_PAY, @ID_FRQNCY_ROOM_PAY, @ID_VRFCTN_ROOM, @CD_MONTH, @SQLTYPE, @TX_VRFCTN_ROOM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SANCTIONAsync(int? ID_SNCTN, decimal? ID_REF_SNCTN_RSN, int? ID_MMBR, DateTime? DT_SNCTN_END, DateTime? DT_SNCTN_STRT, decimal? NO_SNCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SNCTN",
                    Value = ID_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_SNCTN_RSN",
                    Precision = 2,
                    Value = ID_REF_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SNCTN_END",
                    Value = DT_SNCTN_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SNCTN_STRT",
                    Value = DT_SNCTN_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SNCTN",
                    Precision = 1,
                    Value = NO_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SANCTION] @ID_SNCTN, @ID_REF_SNCTN_RSN, @ID_MMBR, @DT_SNCTN_END, @DT_SNCTN_STRT, @NO_SNCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SCI2_CASE_DATAAsync(int? ID_SCI2_CASE_DATA, int? ID_NMBR_CASELOG, int? ID_AUDIT_CASEACTION, int? ID_CASE_NMBR, string CD_REC_TYPE, decimal? NO_CASE, decimal? NO_CASE_CHKDGT, string CD_CTY_OFF, string NM_HOH, string TX_ADDRESS, string TX_CITY_STATE, string TXT_ZIP, string NO_HOME_TEL, string FL_EBT, string NM_AUTH_REP, string NM_EBT_REP, string CD_PRCSSN_STNDRD, string CD_EXPEDITE, string CD_RJCTN_CLSR, string CD_NTC_TYPE_IND, string DT_APPLD, string DT_CERT_STRT, string DT_CERT_END, string DT_STRT_ISSNC, string CD_ISSUE_TYPE, string CD_ADVRS_GUARD, string AM_RESOURCE, string NO_WRKR_NMBR, string NO_TMP_WRKR_NMBR, string AM_DEP_CARE, string AM_MED_EXP, string AM_RENT_MORT, string AM_PROP_TAX, string AM_PROP_INS, string AM_OTHER_EXP, string CD_UTIL_TYPE, string AM_UTILITY, string CD_HH_TYPE, string CD_LANGUAGE_INDCTR, string CD_RPRTNG_RQRMNT, string CD_PAST_DUE_RSN, int? NO_HH_MMBRS, string GROSS_INCOME_TESTED, string NET_INCOME_TESTED, string EXC_2040, string STND_DED, string ADJ_INC, string SHL_DED, string NET_INC, string TFP, string RATE_REDUC, string TOT_SHL, string AM_RETRO_RESTORE, string AM_RECOUP, string AM_COMBINED, string AM_ALLOTMENT, string CD_TRANSACTION, string CD_RTR_RST_REASON, string CD_CLAIM, string CD_CTY_OFF_RESIDING, int? NO_HH_MMBR_BUD, string CASE_XREF, string AM_EARNED, string AM_UNEARND, string AM_CS_EXPENSE, string CASE_REVIEW_RSN, string DT_CASE_REVIEW, string DT_ISSUE, string AM_ISSUE, string DT_TRANSACTION, string DT_TRIAL_BUDGET, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SCI2_CASE_DATA",
                    Value = ID_SCI2_CASE_DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_CASELOG",
                    Value = ID_NMBR_CASELOG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_AUDIT_CASEACTION",
                    Value = ID_AUDIT_CASEACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REC_TYPE",
                    Size = 1,
                    Value = CD_REC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE",
                    Precision = 18,
                    Value = NO_CASE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_CASE_CHKDGT",
                    Precision = 18,
                    Value = NO_CASE_CHKDGT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CTY_OFF",
                    Size = 4,
                    Value = CD_CTY_OFF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_HOH",
                    Size = 100,
                    Value = NM_HOH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_ADDRESS",
                    Size = 50,
                    Value = TX_ADDRESS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CITY_STATE",
                    Size = 25,
                    Value = TX_CITY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TXT_ZIP",
                    Size = 10,
                    Value = TXT_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HOME_TEL",
                    Size = 10,
                    Value = NO_HOME_TEL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EBT",
                    Size = 1,
                    Value = FL_EBT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_AUTH_REP",
                    Size = 50,
                    Value = NM_AUTH_REP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EBT_REP",
                    Size = 50,
                    Value = NM_EBT_REP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PRCSSN_STNDRD",
                    Size = 1,
                    Value = CD_PRCSSN_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EXPEDITE",
                    Size = 1,
                    Value = CD_EXPEDITE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RJCTN_CLSR",
                    Size = 2,
                    Value = CD_RJCTN_CLSR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_NTC_TYPE_IND",
                    Size = 2,
                    Value = CD_NTC_TYPE_IND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_APPLD",
                    Size = 8,
                    Value = DT_APPLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_STRT",
                    Size = 6,
                    Value = DT_CERT_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CERT_END",
                    Size = 6,
                    Value = DT_CERT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRT_ISSNC",
                    Size = 6,
                    Value = DT_STRT_ISSNC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ISSUE_TYPE",
                    Size = 1,
                    Value = CD_ISSUE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ADVRS_GUARD",
                    Size = 1,
                    Value = CD_ADVRS_GUARD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RESOURCE",
                    Size = 5,
                    Value = AM_RESOURCE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_WRKR_NMBR",
                    Size = 3,
                    Value = NO_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_TMP_WRKR_NMBR",
                    Size = 3,
                    Value = NO_TMP_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_DEP_CARE",
                    Size = 5,
                    Value = AM_DEP_CARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MED_EXP",
                    Size = 5,
                    Value = AM_MED_EXP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RENT_MORT",
                    Size = 8,
                    Value = AM_RENT_MORT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PROP_TAX",
                    Size = 8,
                    Value = AM_PROP_TAX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PROP_INS",
                    Size = 8,
                    Value = AM_PROP_INS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_OTHER_EXP",
                    Size = 8,
                    Value = AM_OTHER_EXP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_UTIL_TYPE",
                    Size = 1,
                    Value = CD_UTIL_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTILITY",
                    Size = 8,
                    Value = AM_UTILITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_HH_TYPE",
                    Size = 1,
                    Value = CD_HH_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE_INDCTR",
                    Size = 1,
                    Value = CD_LANGUAGE_INDCTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RPRTNG_RQRMNT",
                    Size = 1,
                    Value = CD_RPRTNG_RQRMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PAST_DUE_RSN",
                    Size = 1,
                    Value = CD_PAST_DUE_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_MMBRS",
                    Value = NO_HH_MMBRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GROSS_INCOME_TESTED",
                    Size = 5,
                    Value = GROSS_INCOME_TESTED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NET_INCOME_TESTED",
                    Size = 5,
                    Value = NET_INCOME_TESTED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "EXC_2040",
                    Size = 5,
                    Value = EXC_2040 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "STND_DED",
                    Size = 5,
                    Value = STND_DED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ADJ_INC",
                    Size = 5,
                    Value = ADJ_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "SHL_DED",
                    Size = 5,
                    Value = SHL_DED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NET_INC",
                    Size = 5,
                    Value = NET_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TFP",
                    Size = 5,
                    Value = TFP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "RATE_REDUC",
                    Size = 5,
                    Value = RATE_REDUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TOT_SHL",
                    Size = 5,
                    Value = TOT_SHL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RETRO_RESTORE",
                    Size = 5,
                    Value = AM_RETRO_RESTORE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RECOUP",
                    Size = 5,
                    Value = AM_RECOUP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_COMBINED",
                    Size = 5,
                    Value = AM_COMBINED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ALLOTMENT",
                    Size = 5,
                    Value = AM_ALLOTMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_TRANSACTION",
                    Size = 1,
                    Value = CD_TRANSACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RTR_RST_REASON",
                    Size = 2,
                    Value = CD_RTR_RST_REASON ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CLAIM",
                    Size = 2,
                    Value = CD_CLAIM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CTY_OFF_RESIDING",
                    Size = 4,
                    Value = CD_CTY_OFF_RESIDING ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_HH_MMBR_BUD",
                    Value = NO_HH_MMBR_BUD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_XREF",
                    Size = 1,
                    Value = CASE_XREF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_EARNED",
                    Size = 5,
                    Value = AM_EARNED ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNEARND",
                    Size = 5,
                    Value = AM_UNEARND ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_EXPENSE",
                    Size = 5,
                    Value = AM_CS_EXPENSE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CASE_REVIEW_RSN",
                    Size = 50,
                    Value = CASE_REVIEW_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_CASE_REVIEW",
                    Size = 9,
                    Value = DT_CASE_REVIEW ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ISSUE",
                    Size = 9,
                    Value = DT_ISSUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ISSUE",
                    Size = 5,
                    Value = AM_ISSUE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_TRANSACTION",
                    Size = 8,
                    Value = DT_TRANSACTION ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_TRIAL_BUDGET",
                    Size = 6,
                    Value = DT_TRIAL_BUDGET ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SCI2_CASE_DATA] @ID_SCI2_CASE_DATA, @ID_NMBR_CASELOG, @ID_AUDIT_CASEACTION, @ID_CASE_NMBR, @CD_REC_TYPE, @NO_CASE, @NO_CASE_CHKDGT, @CD_CTY_OFF, @NM_HOH, @TX_ADDRESS, @TX_CITY_STATE, @TXT_ZIP, @NO_HOME_TEL, @FL_EBT, @NM_AUTH_REP, @NM_EBT_REP, @CD_PRCSSN_STNDRD, @CD_EXPEDITE, @CD_RJCTN_CLSR, @CD_NTC_TYPE_IND, @DT_APPLD, @DT_CERT_STRT, @DT_CERT_END, @DT_STRT_ISSNC, @CD_ISSUE_TYPE, @CD_ADVRS_GUARD, @AM_RESOURCE, @NO_WRKR_NMBR, @NO_TMP_WRKR_NMBR, @AM_DEP_CARE, @AM_MED_EXP, @AM_RENT_MORT, @AM_PROP_TAX, @AM_PROP_INS, @AM_OTHER_EXP, @CD_UTIL_TYPE, @AM_UTILITY, @CD_HH_TYPE, @CD_LANGUAGE_INDCTR, @CD_RPRTNG_RQRMNT, @CD_PAST_DUE_RSN, @NO_HH_MMBRS, @GROSS_INCOME_TESTED, @NET_INCOME_TESTED, @EXC_2040, @STND_DED, @ADJ_INC, @SHL_DED, @NET_INC, @TFP, @RATE_REDUC, @TOT_SHL, @AM_RETRO_RESTORE, @AM_RECOUP, @AM_COMBINED, @AM_ALLOTMENT, @CD_TRANSACTION, @CD_RTR_RST_REASON, @CD_CLAIM, @CD_CTY_OFF_RESIDING, @NO_HH_MMBR_BUD, @CASE_XREF, @AM_EARNED, @AM_UNEARND, @AM_CS_EXPENSE, @CASE_REVIEW_RSN, @DT_CASE_REVIEW, @DT_ISSUE, @AM_ISSUE, @DT_TRANSACTION, @DT_TRIAL_BUDGET", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SCI2_MMBR_DATAAsync(int? ID_NMBR_CASELOG, int? ID_SCI2_CASE_DATA, int? ID_CASE_NMBR, int? ID_MMBR, string CD_REC_TYPE, int? NO_DEPENDENT_NBR, string NO_SSN, string NM_DEPENDENT, string CD_SEX, string CD_RACE, string DT_DOB, string CD_WORK_REG, string CD_CERT_ELIG, string AM_EARNED_INC, string AM_UNERND_INC, string AM_PA, string AM_SSI_VA, string CD_EARNED_INC_TYPE, string CD_UNERND_INC_TYPE, string CD_PA_TYPE, string CD_SSI_TYPE, string AM_SSA, string AM_MEDICARE, string AM_CS_RCVD, string AM_CS_PAID, string CD_MEDICARE_TYPE, string CD_CS_RCVD_TYPE, string CD_CS_PAID_TYPE, string PA_FILE_NBR, string PA_CASE_NBR, string CHILD_SUPPORT_NBR, string ENUM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_NMBR_CASELOG",
                    Value = ID_NMBR_CASELOG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SCI2_CASE_DATA",
                    Value = ID_SCI2_CASE_DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_REC_TYPE",
                    Size = 1,
                    Value = CD_REC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_DEPENDENT_NBR",
                    Value = NO_DEPENDENT_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SSN",
                    Size = 9,
                    Value = NO_SSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NM_DEPENDENT",
                    Size = 100,
                    Value = NM_DEPENDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SEX",
                    Size = 1,
                    Value = CD_SEX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_RACE",
                    Size = 2,
                    Value = CD_RACE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_DOB",
                    Size = 9,
                    Value = DT_DOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WORK_REG",
                    Size = 1,
                    Value = CD_WORK_REG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_EARNED_INC",
                    Size = 5,
                    Value = AM_EARNED_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_INC",
                    Size = 5,
                    Value = AM_UNERND_INC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PA",
                    Size = 5,
                    Value = AM_PA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SSI_VA",
                    Size = 5,
                    Value = AM_SSI_VA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_EARNED_INC_TYPE",
                    Size = 1,
                    Value = CD_EARNED_INC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_UNERND_INC_TYPE",
                    Size = 1,
                    Value = CD_UNERND_INC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PA_TYPE",
                    Size = 1,
                    Value = CD_PA_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_SSI_TYPE",
                    Size = 1,
                    Value = CD_SSI_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SSA",
                    Size = 5,
                    Value = AM_SSA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_MEDICARE",
                    Size = 5,
                    Value = AM_MEDICARE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_RCVD",
                    Size = 5,
                    Value = AM_CS_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AM_CS_PAID",
                    Size = 5,
                    Value = AM_CS_PAID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MEDICARE_TYPE",
                    Size = 1,
                    Value = CD_MEDICARE_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CS_RCVD_TYPE",
                    Size = 1,
                    Value = CD_CS_RCVD_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CS_PAID_TYPE",
                    Size = 1,
                    Value = CD_CS_PAID_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PA_FILE_NBR",
                    Size = 10,
                    Value = PA_FILE_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "PA_CASE_NBR",
                    Size = 10,
                    Value = PA_CASE_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CHILD_SUPPORT_NBR",
                    Size = 10,
                    Value = CHILD_SUPPORT_NBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ENUM",
                    Size = 1,
                    Value = ENUM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SCI2_MMBR_DATA] @ID_NMBR_CASELOG, @ID_SCI2_CASE_DATA, @ID_CASE_NMBR, @ID_MMBR, @CD_REC_TYPE, @NO_DEPENDENT_NBR, @NO_SSN, @NM_DEPENDENT, @CD_SEX, @CD_RACE, @DT_DOB, @CD_WORK_REG, @CD_CERT_ELIG, @AM_EARNED_INC, @AM_UNERND_INC, @AM_PA, @AM_SSI_VA, @CD_EARNED_INC_TYPE, @CD_UNERND_INC_TYPE, @CD_PA_TYPE, @CD_SSI_TYPE, @AM_SSA, @AM_MEDICARE, @AM_CS_RCVD, @AM_CS_PAID, @CD_MEDICARE_TYPE, @CD_CS_RCVD_TYPE, @CD_CS_PAID_TYPE, @PA_FILE_NBR, @PA_CASE_NBR, @CHILD_SUPPORT_NBR, @ENUM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SECURITYAsync(string ID_USER, string ID_PAYROLL, string CD_PSSWRD, string CD_ROLE, string FL_ACTIVE, string FL_SUPERVISOR, string CD_CNTY, string TX_COMMENT, string CD_WRKR_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PAYROLL",
                    Size = 9,
                    Value = ID_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PSSWRD",
                    Size = 20,
                    Value = CD_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ROLE",
                    Size = 15,
                    Value = CD_ROLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUPERVISOR",
                    Size = 1,
                    Value = FL_SUPERVISOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_COMMENT",
                    Size = 256,
                    Value = TX_COMMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WRKR_NMBR",
                    Size = 3,
                    Value = CD_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SECURITY] @ID_USER, @ID_PAYROLL, @CD_PSSWRD, @CD_ROLE, @FL_ACTIVE, @FL_SUPERVISOR, @CD_CNTY, @TX_COMMENT, @CD_WRKR_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SECURITY_ACTIVATEAsync(string ID_PAYROLL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAYROLL",
                    Size = 9,
                    Value = ID_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SECURITY_ACTIVATE] @ID_PAYROLL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SECURITY_ACTIVEAsync(string ID_PAYROLL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAYROLL",
                    Size = 9,
                    Value = ID_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SECURITY_ACTIVE] @ID_PAYROLL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_Security_FL_DSNAPAsync(string ID_USER, string FL_DSNAP, string CD_CNTY, string UPDT_TYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSNAP",
                    Size = 1,
                    Value = FL_DSNAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "UPDT_TYPE",
                    Size = 3,
                    Value = UPDT_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_Security_FL_DSNAP] @ID_USER, @FL_DSNAP, @CD_CNTY, @UPDT_TYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SECURITY_NAMESAsync(string ID_PAYROLL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_PAYROLL",
                    Size = 9,
                    Value = ID_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SECURITY_NAMES] @ID_PAYROLL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SECURITY_NewAsync(string ID_USER, string ID_PAYROLL, string CD_PSSWRD, string CD_ROLE, string FL_ACTIVE, string FL_SUPERVISOR, string CD_CNTY, string TX_COMMENT, string CD_WRKR_NMBR, string FL_WF, string FL_TEST, string FL_ADDI, string FL_DSNAP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PAYROLL",
                    Size = 9,
                    Value = ID_PAYROLL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_PSSWRD",
                    Size = 20,
                    Value = CD_PSSWRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_ROLE",
                    Size = 15,
                    Value = CD_ROLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ACTIVE",
                    Size = 1,
                    Value = FL_ACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUPERVISOR",
                    Size = 1,
                    Value = FL_SUPERVISOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_COMMENT",
                    Size = 256,
                    Value = TX_COMMENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_WRKR_NMBR",
                    Size = 3,
                    Value = CD_WRKR_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WF",
                    Size = 1,
                    Value = FL_WF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TEST",
                    Size = 1,
                    Value = FL_TEST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ADDI",
                    Size = 1,
                    Value = FL_ADDI ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSNAP",
                    Size = 1,
                    Value = FL_DSNAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SECURITY_New] @ID_USER, @ID_PAYROLL, @CD_PSSWRD, @CD_ROLE, @FL_ACTIVE, @FL_SUPERVISOR, @CD_CNTY, @TX_COMMENT, @CD_WRKR_NMBR, @FL_WF, @FL_TEST, @FL_ADDI, @FL_DSNAP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SECURITY_REGAPPTAsync(string CD_CNTY, string FL_TEST, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CD_CNTY",
                    Size = 2,
                    Value = CD_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TEST",
                    Size = 1,
                    Value = FL_TEST ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SECURITY_REGAPPT] @CD_CNTY, @FL_TEST", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_Security_WFAsync(string ID_USER, string FL_WF, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_USER",
                    Size = 10,
                    Value = ID_USER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WF",
                    Size = 1,
                    Value = FL_WF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_Security_WF] @ID_USER, @FL_WF", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SHELTER_EXPENSEAsync(int? ID_MMBR1, int? ID_MMBR2, int? ID_OWNRSHP, int? ID_SHLTR_DWELLNG_TYPE, int? ID_SHLTR_EXPNS_TYPE, decimal? AM_ACTL_SHLTR_EXPNS, decimal? AM_SHLTR_EXPNS_MNTHLY, string FL_ASSSTD_BY_OTHR, string FL_NM_OUTSIDE_HH, int? ID_FRQNCY_SHLTR_EXPNS, int? ID_VRFCTN_SHLTR_EXPNS, OutputParameter<int?> ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SHLTR_EXPNS = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SHLTR_EXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_SHLTR_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NM_OUTSIDE_HH",
                    Size = 1,
                    Value = FL_NM_OUTSIDE_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_SHLTR_EXPNS",
                    Value = ID_FRQNCY_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS",
                    Value = ID_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SHELTER_EXPENSE] @ID_SHLTR_EXPNS OUTPUT, @ID_MMBR1, @ID_MMBR2, @ID_OWNRSHP, @ID_SHLTR_DWELLNG_TYPE, @ID_SHLTR_EXPNS_TYPE, @AM_ACTL_SHLTR_EXPNS, @AM_SHLTR_EXPNS_MNTHLY, @FL_ASSSTD_BY_OTHR, @FL_NM_OUTSIDE_HH, @ID_FRQNCY_SHLTR_EXPNS, @ID_VRFCTN_SHLTR_EXPNS", sqlParameters, cancellationToken);

            ID_SHLTR_EXPNS.SetValue(parameterID_SHLTR_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SHELTER_EXPENSE_NOHELPAsync(int? ID_SHLTR_EXPNS, int? ID_MMBR1, int? ID_MMBR2, int? ID_OWNRSHP, int? ID_SHLTR_DWELLNG_TYPE, int? ID_SHLTR_EXPNS_TYPE, decimal? AM_ACTL_SHLTR_EXPNS, decimal? AM_SHLTR_EXPNS_MNTHLY, string CD_MONTh, string FL_ASSSTD_BY_OTHR, string FL_NM_OUTSIDE_HH, decimal? ID_FRQNCY_SHLTR_EXPNS, int? ID_VRFCTN_SHLTR_EXPNS, string TX_VRFCTN_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_SHLTR_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTh",
                    Size = 1,
                    Value = CD_MONTh ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NM_OUTSIDE_HH",
                    Size = 1,
                    Value = FL_NM_OUTSIDE_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_SHLTR_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS",
                    Value = ID_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_SHLTR_EXPNS",
                    Value = TX_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SHELTER_EXPENSE_NOHELP] @ID_SHLTR_EXPNS, @ID_MMBR1, @ID_MMBR2, @ID_OWNRSHP, @ID_SHLTR_DWELLNG_TYPE, @ID_SHLTR_EXPNS_TYPE, @AM_ACTL_SHLTR_EXPNS, @AM_SHLTR_EXPNS_MNTHLY, @CD_MONTh, @FL_ASSSTD_BY_OTHR, @FL_NM_OUTSIDE_HH, @ID_FRQNCY_SHLTR_EXPNS, @ID_VRFCTN_SHLTR_EXPNS, @TX_VRFCTN_SHLTR_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SHELTER_EXPENSE_OTHER_PAYERAsync(short? ID_SHLTR_EXPNS_OTHR_PAYER, int? ID_MMBR, int? ID_SHLTR_EXPNS, decimal? AM_SHLTR_EXPNS_OTHR_PAYER, DateTime? DT_SHLTR_EXPNS_OTHR_PAYER, string FL_OUTSIDE_RSDNT, string FL_SHLTR_EXPNS_PAY_MMBR, int? ID_VRFCTN_SHLTR_EXPNS_OP, string TX_VRFCTN_SHLTR_EXPNS_OP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SHLTR_EXPNS_OTHR_PAYER",
                    Value = DT_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_RSDNT",
                    Size = 1,
                    Value = FL_OUTSIDE_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SHLTR_EXPNS_PAY_MMBR",
                    Size = 1,
                    Value = FL_SHLTR_EXPNS_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS_OP",
                    Value = ID_VRFCTN_SHLTR_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_SHLTR_EXPNS_OP",
                    Value = TX_VRFCTN_SHLTR_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SHELTER_EXPENSE_OTHER_PAYER] @ID_SHLTR_EXPNS_OTHR_PAYER, @ID_MMBR, @ID_SHLTR_EXPNS, @AM_SHLTR_EXPNS_OTHR_PAYER, @DT_SHLTR_EXPNS_OTHR_PAYER, @FL_OUTSIDE_RSDNT, @FL_SHLTR_EXPNS_PAY_MMBR, @ID_VRFCTN_SHLTR_EXPNS_OP, @TX_VRFCTN_SHLTR_EXPNS_OP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SHELTER_EXPENSE_OUTSIDEHELPAsync(int? ID_SHLTR_EXPNS, int? ID_MMBR1, int? ID_MMBR2, int? ID_OWNRSHP, int? ID_SHLTR_DWELLNG_TYPE, int? ID_SHLTR_EXPNS_TYPE, decimal? AM_ACTL_SHLTR_EXPNS, decimal? AM_SHLTR_EXPNS_MNTHLY, string FL_ASSSTD_BY_OTHR, string FL_NM_OUTSIDE_HH, string FL_SHLTR_PASSTHRU, decimal? ID_FRQNCY_SHLTR_EXPNS, int? ID_VRFCTN_SHLTR_EXPNS, int? ID_MMBR, decimal? AM_SHLTR_EXPNS_OTHR_PAYER, DateTime? DT_SHLTR_EXPNS_OTHR_PAYER, string FL_OUTSIDE_RSDNT, string FL_SHLTR_EXPNS_PAY_MMBR, int? ID_VRFCTN_SHLTR_EXPNS_OP, int? ID_UNERND_INCM, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_MNTHLY, OutputParameter<int?> ID_SHLTR_EXPNS_OTHR_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SHLTR_EXPNS_OTHR_PAYER = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS_OTHR_PAYER?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_SHLTR_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NM_OUTSIDE_HH",
                    Size = 1,
                    Value = FL_NM_OUTSIDE_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SHLTR_PASSTHRU",
                    Size = 1,
                    Value = FL_SHLTR_PASSTHRU ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_SHLTR_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS",
                    Value = ID_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterID_SHLTR_EXPNS_OTHR_PAYER,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SHLTR_EXPNS_OTHR_PAYER",
                    Value = DT_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_RSDNT",
                    Size = 1,
                    Value = FL_OUTSIDE_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SHLTR_EXPNS_PAY_MMBR",
                    Size = 1,
                    Value = FL_SHLTR_EXPNS_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS_OP",
                    Value = ID_VRFCTN_SHLTR_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SHELTER_EXPENSE_OUTSIDEHELP] @ID_SHLTR_EXPNS, @ID_MMBR1, @ID_MMBR2, @ID_OWNRSHP, @ID_SHLTR_DWELLNG_TYPE, @ID_SHLTR_EXPNS_TYPE, @AM_ACTL_SHLTR_EXPNS, @AM_SHLTR_EXPNS_MNTHLY, @FL_ASSSTD_BY_OTHR, @FL_NM_OUTSIDE_HH, @FL_SHLTR_PASSTHRU, @ID_FRQNCY_SHLTR_EXPNS, @ID_VRFCTN_SHLTR_EXPNS, @ID_SHLTR_EXPNS_OTHR_PAYER OUTPUT, @ID_MMBR, @AM_SHLTR_EXPNS_OTHR_PAYER, @DT_SHLTR_EXPNS_OTHR_PAYER, @FL_OUTSIDE_RSDNT, @FL_SHLTR_EXPNS_PAY_MMBR, @ID_VRFCTN_SHLTR_EXPNS_OP, @ID_UNERND_INCM, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_MNTHLY", sqlParameters, cancellationToken);

            ID_SHLTR_EXPNS_OTHR_PAYER.SetValue(parameterID_SHLTR_EXPNS_OTHR_PAYER.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SHELTER_EXPENSE_UPDT_OUTSIDHELPAsync(int? ID_SHLTR_EXPNS, int? ID_MMBR1, int? ID_MMBR2, int? ID_OWNRSHP, int? ID_SHLTR_DWELLNG_TYPE, int? ID_SHLTR_EXPNS_TYPE, decimal? AM_ACTL_SHLTR_EXPNS, decimal? AM_SHLTR_EXPNS_MNTHLY, string FL_ASSSTD_BY_OTHR, string FL_NM_OUTSIDE_HH, string FL_SHLTR_PASSTHRU, decimal? ID_FRQNCY_SHLTR_EXPNS, int? ID_VRFCTN_SHLTR_EXPNS, int? ID_MMBR, int? ID_SHLTR_EXPNS_OTHR_PAYER, decimal? AM_SHLTR_EXPNS_OTHR_PAYER, DateTime? DT_SHLTR_EXPNS_OTHR_PAYER, string FL_OUTSIDE_RSDNT, string FL_PAY_ALL_SHLTR, string FL_SHLTR_EXPNS_PAY_MMBR, decimal? ID_FRQNCY_SHLTR_EXPNS_OP, int? ID_VRFCTN_SHLTR_EXPNS_OP, int? ID_UNERND_INCM, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_MNTHLY, DateTime? DT_RCVD, decimal? ID_FRQNCY_RECPT, int? ID_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_OWNRSHP",
                    Value = ID_OWNRSHP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_DWELLNG_TYPE",
                    Value = ID_SHLTR_DWELLNG_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_TYPE",
                    Value = ID_SHLTR_EXPNS_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_SHLTR_EXPNS",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NM_OUTSIDE_HH",
                    Size = 1,
                    Value = FL_NM_OUTSIDE_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SHLTR_PASSTHRU",
                    Size = 1,
                    Value = FL_SHLTR_PASSTHRU ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_SHLTR_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS",
                    Value = ID_VRFCTN_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_SHLTR_EXPNS_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SHLTR_EXPNS_OTHR_PAYER",
                    Value = DT_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_RSDNT",
                    Size = 1,
                    Value = FL_OUTSIDE_RSDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_ALL_SHLTR",
                    Size = 1,
                    Value = FL_PAY_ALL_SHLTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SHLTR_EXPNS_PAY_MMBR",
                    Size = 1,
                    Value = FL_SHLTR_EXPNS_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_SHLTR_EXPNS_OP",
                    Precision = 1,
                    Value = ID_FRQNCY_SHLTR_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_SHLTR_EXPNS_OP",
                    Value = ID_VRFCTN_SHLTR_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RCVD",
                    Value = DT_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_RECPT",
                    Precision = 1,
                    Value = ID_FRQNCY_RECPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UNERND_INCM",
                    Value = ID_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SHELTER_EXPENSE_UPDT_OUTSIDHELP] @ID_SHLTR_EXPNS, @ID_MMBR1, @ID_MMBR2, @ID_OWNRSHP, @ID_SHLTR_DWELLNG_TYPE, @ID_SHLTR_EXPNS_TYPE, @AM_ACTL_SHLTR_EXPNS, @AM_SHLTR_EXPNS_MNTHLY, @FL_ASSSTD_BY_OTHR, @FL_NM_OUTSIDE_HH, @FL_SHLTR_PASSTHRU, @ID_FRQNCY_SHLTR_EXPNS, @ID_VRFCTN_SHLTR_EXPNS, @ID_MMBR, @ID_SHLTR_EXPNS_OTHR_PAYER, @AM_SHLTR_EXPNS_OTHR_PAYER, @DT_SHLTR_EXPNS_OTHR_PAYER, @FL_OUTSIDE_RSDNT, @FL_PAY_ALL_SHLTR, @FL_SHLTR_EXPNS_PAY_MMBR, @ID_FRQNCY_SHLTR_EXPNS_OP, @ID_VRFCTN_SHLTR_EXPNS_OP, @ID_UNERND_INCM, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_MNTHLY, @DT_RCVD, @ID_FRQNCY_RECPT, @ID_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SHLTR_EXP_NOTESAsync(string TX_SHLTR_OTHR, OutputParameter<int?> ID_REF_SHLTR_OTHR, OutputParameter<int?> ID_SHLTR_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_REF_SHLTR_OTHR = new SqlParameter
            {
                ParameterName = "ID_REF_SHLTR_OTHR",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_REF_SHLTR_OTHR?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterID_SHLTR_EXPNS = new SqlParameter
            {
                ParameterName = "ID_SHLTR_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SHLTR_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_REF_SHLTR_OTHR,
                parameterID_SHLTR_EXPNS,
                new SqlParameter
                {
                    ParameterName = "TX_SHLTR_OTHR",
                    Value = TX_SHLTR_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SHLTR_EXP_NOTES] @ID_REF_SHLTR_OTHR OUTPUT, @ID_SHLTR_EXPNS OUTPUT, @TX_SHLTR_OTHR", sqlParameters, cancellationToken);

            ID_REF_SHLTR_OTHR.SetValue(parameterID_REF_SHLTR_OTHR.Value);
            ID_SHLTR_EXPNS.SetValue(parameterID_SHLTR_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_SHLTR_UNEARNAsync(int? ID_UNERND_INCM, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, int? ID_SHLTR_EXPNS_OTHR_PAYER, decimal? AM_UNERND_MNTHLY, string CD_MONTH, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS_OTHR_PAYER",
                    Value = ID_SHLTR_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_SHLTR_UNEARN] @ID_UNERND_INCM, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @ID_SHLTR_EXPNS_OTHR_PAYER, @AM_UNERND_MNTHLY, @CD_MONTH, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ShltrExp_CDMTHAsync(int? ID_SHLTR_EXPNS, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SHLTR_EXPNS",
                    Value = ID_SHLTR_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ShltrExp_CDMTH] @ID_SHLTR_EXPNS, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_ShltrExp_UNEARN_CDMTHAsync(int? ID_UNERND_INCM, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_ShltrExp_UNEARN_CDMTH] @ID_UNERND_INCM, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_STRIKEAsync(int? ID_STRKR, int? ID_EMPLYMNT, decimal? AM_STRKPAY_MNTHLY, decimal? AM_STRK_PAY, string CD_MONTH, DateTime? DT_STRK_END, DateTime? DT_STRK_STRT, string FL_ELGBL_FS_PRIOR_STRK, decimal? ID_FRQNCY_PAY_STRK, int? ID_VRFCTN_STRK, int? ID_UNERND_INCM, string TX_VRFCTN_STRK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STRKR",
                    Value = ID_STRKR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_STRKPAY_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_STRKPAY_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_STRK_PAY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_STRK_PAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRK_END",
                    Value = DT_STRK_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_STRK_STRT",
                    Value = DT_STRK_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_FS_PRIOR_STRK",
                    Size = 1,
                    Value = FL_ELGBL_FS_PRIOR_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_PAY_STRK",
                    Precision = 1,
                    Value = ID_FRQNCY_PAY_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_STRK",
                    Value = ID_VRFCTN_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_STRK",
                    Value = TX_VRFCTN_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_STRIKE] @ID_STRKR, @ID_EMPLYMNT, @AM_STRKPAY_MNTHLY, @AM_STRK_PAY, @CD_MONTH, @DT_STRK_END, @DT_STRK_STRT, @FL_ELGBL_FS_PRIOR_STRK, @ID_FRQNCY_PAY_STRK, @ID_VRFCTN_STRK, @ID_UNERND_INCM, @TX_VRFCTN_STRK", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_STRIKE_CDMTHAsync(int? ID_STRKR, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STRKR",
                    Value = ID_STRKR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_STRIKE_CDMTH] @ID_STRKR, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_STUDENTAsync(int? ID_STDNT, int? ID_MMBR, string CD_MONTH, string CD_CERT_ELIG, string CD_CERT_ELIG2, string FL_CHILD_CARE_PRVDR, string FL_ELGBL_STDNT, string FL_EMPLYD_PRTTM, string FL_FIT, string FL_HGHR_LRNNG, string FL_JOBS_TRNNG, string FL_MEAL_TCKT, string FL_OJT, string FL_PLUS_50_MEALS_CVRD, string FL_PRNT_OF_CHLD, string FL_RCVNG_TANF, string FL_SNGL_PRNT_STDNT, string FL_TITLE_IV, string FL_WORK_STDY_PRGRM, int? ID_VRFCTN_STUDENT, string TX_VRFCTN_STUDENT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STDNT",
                    Value = ID_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG",
                    Size = 1,
                    Value = CD_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_CERT_ELIG2",
                    Size = 1,
                    Value = CD_CERT_ELIG2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_CHILD_CARE_PRVDR",
                    Size = 1,
                    Value = FL_CHILD_CARE_PRVDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ELGBL_STDNT",
                    Size = 1,
                    Value = FL_ELGBL_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_EMPLYD_PRTTM",
                    Size = 1,
                    Value = FL_EMPLYD_PRTTM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_FIT",
                    Size = 1,
                    Value = FL_FIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_HGHR_LRNNG",
                    Size = 1,
                    Value = FL_HGHR_LRNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_JOBS_TRNNG",
                    Size = 1,
                    Value = FL_JOBS_TRNNG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_MEAL_TCKT",
                    Size = 1,
                    Value = FL_MEAL_TCKT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OJT",
                    Size = 1,
                    Value = FL_OJT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PLUS_50_MEALS_CVRD",
                    Size = 1,
                    Value = FL_PLUS_50_MEALS_CVRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PRNT_OF_CHLD",
                    Size = 1,
                    Value = FL_PRNT_OF_CHLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_RCVNG_TANF",
                    Size = 1,
                    Value = FL_RCVNG_TANF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SNGL_PRNT_STDNT",
                    Size = 1,
                    Value = FL_SNGL_PRNT_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_TITLE_IV",
                    Size = 1,
                    Value = FL_TITLE_IV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WORK_STDY_PRGRM",
                    Size = 1,
                    Value = FL_WORK_STDY_PRGRM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_STUDENT",
                    Value = ID_VRFCTN_STUDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_STUDENT",
                    Value = TX_VRFCTN_STUDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_STUDENT] @ID_STDNT, @ID_MMBR, @CD_MONTH, @CD_CERT_ELIG, @CD_CERT_ELIG2, @FL_CHILD_CARE_PRVDR, @FL_ELGBL_STDNT, @FL_EMPLYD_PRTTM, @FL_FIT, @FL_HGHR_LRNNG, @FL_JOBS_TRNNG, @FL_MEAL_TCKT, @FL_OJT, @FL_PLUS_50_MEALS_CVRD, @FL_PRNT_OF_CHLD, @FL_RCVNG_TANF, @FL_SNGL_PRNT_STDNT, @FL_TITLE_IV, @FL_WORK_STDY_PRGRM, @ID_VRFCTN_STUDENT, @TX_VRFCTN_STUDENT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_STUDNT_CDMTHAsync(int? ID_STDNT, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_STDNT",
                    Value = ID_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_STUDNT_CDMTH] @ID_STDNT, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_TRIPAsync(int? ID_TRIPS, int? ID_PRVDR_NAME, decimal? AM_FLAT_FEE, decimal? AM_PAY_MILES_MNTHLY, string FL_DRVS_SELF, string FL_PAY_FLAT_FEE, string FL_PAY_PER_MILE, decimal? ID_VRFCTN_TRIP, decimal? NO_MILES_PER_MNTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_TRIPS",
                    Value = ID_TRIPS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_PRVDR_NAME",
                    Value = ID_PRVDR_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_FLAT_FEE",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_PAY_MILES_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_PAY_MILES_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DRVS_SELF",
                    Size = 1,
                    Value = FL_DRVS_SELF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_FLAT_FEE",
                    Size = 1,
                    Value = FL_PAY_FLAT_FEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PAY_PER_MILE",
                    Size = 1,
                    Value = FL_PAY_PER_MILE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_TRIP",
                    Precision = 2,
                    Value = ID_VRFCTN_TRIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NO_MILES_PER_MNTH",
                    Precision = 3,
                    Value = NO_MILES_PER_MNTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_TRIP] @ID_TRIPS, @ID_PRVDR_NAME, @AM_FLAT_FEE, @AM_PAY_MILES_MNTHLY, @FL_DRVS_SELF, @FL_PAY_FLAT_FEE, @FL_PAY_PER_MILE, @ID_VRFCTN_TRIP, @NO_MILES_PER_MNTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_TXTDTL_UNERNDAsync(int? ID_UNERND_INCM, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_TXTDTL_UNERND] @ID_UNERND_INCM, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UE_UNEARNAsync(int? ID_UNERND_INCM, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, int? ID_UTLTY_EXPNS_OTHR_PAYER, decimal? AM_UNERND_MNTHLY, string CD_MONTH, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UE_UNEARN] @ID_UNERND_INCM, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @ID_UTLTY_EXPNS_OTHR_PAYER, @AM_UNERND_MNTHLY, @CD_MONTH, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UNEARNED_INCOMEAsync(int? ID_UNERND_INCM, int? ID_CS_AMNT, int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, decimal? AM_UNERND_VALUE1, decimal? AM_UNERND_VALUE2, decimal? AM_UNERND_MNTHLY, DateTime? DT_RCVD, string FL_DSBLTY, decimal? ID_FRQNCY_RECPT, int? ID_VRFCTN_UNERND_INCM, decimal? ID_WORK_CODE, string ID_WORK_CODE_FLAG, string CD_MONTH, int? NO_PYMNT_MNTHS, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CS_AMNT",
                    Value = ID_CS_AMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_VALUE1",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_VALUE1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_VALUE2",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_VALUE2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RCVD",
                    Value = DT_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_DSBLTY",
                    Size = 1,
                    Value = FL_DSBLTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_RECPT",
                    Precision = 1,
                    Value = ID_FRQNCY_RECPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UNERND_INCM",
                    Value = ID_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Precision = 2,
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE_FLAG",
                    Size = 1,
                    Value = ID_WORK_CODE_FLAG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_PYMNT_MNTHS",
                    Value = NO_PYMNT_MNTHS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UNEARNED_INCOME] @ID_UNERND_INCM, @ID_CS_AMNT, @ID_MMBR, @ID_REF_UNERND_SUBTYPE, @AM_UNERND_VALUE1, @AM_UNERND_VALUE2, @AM_UNERND_MNTHLY, @DT_RCVD, @FL_DSBLTY, @ID_FRQNCY_RECPT, @ID_VRFCTN_UNERND_INCM, @ID_WORK_CODE, @ID_WORK_CODE_FLAG, @CD_MONTH, @NO_PYMNT_MNTHS, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UNEARNED_INCOME_CdMonthAsync(int? ID_UNERND_INCM, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UNEARNED_INCOME_CdMonth] @ID_UNERND_INCM, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UNEARNED_INCOME_STRIKEAsync(int? ID_MMBR, decimal? AM_UNERND_MNTHLY, decimal? AM_UNERND_VALUE1, string CD_MONTH, decimal? ID_FRQNCY_RECPT, int? ID_VRFCTN_UNERND_INCM, OutputParameter<int?> ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_INCM = new SqlParameter
            {
                ParameterName = "ID_UNERND_INCM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_INCM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_INCM,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UNERND_VALUE1",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UNERND_VALUE1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_RECPT",
                    Precision = 1,
                    Value = ID_FRQNCY_RECPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UNERND_INCM",
                    Value = ID_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UNEARNED_INCOME_STRIKE] @ID_UNERND_INCM OUTPUT, @ID_MMBR, @AM_UNERND_MNTHLY, @AM_UNERND_VALUE1, @CD_MONTH, @ID_FRQNCY_RECPT, @ID_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            ID_UNERND_INCM.SetValue(parameterID_UNERND_INCM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UNEARNED_PAYERAsync(int? ID_UNERND_PAYER, int? ID_UNERND_INCM, short? ID_REF_UNERND_PAYER_TYPE, string NM_UNERND_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_PAYER",
                    Value = ID_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_PAYER_TYPE",
                    Value = ID_REF_UNERND_PAYER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "NM_UNERND_PAYER",
                    Size = 45,
                    Value = NM_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UNEARNED_PAYER] @ID_UNERND_PAYER, @ID_UNERND_INCM, @ID_REF_UNERND_PAYER_TYPE, @NM_UNERND_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UNEARNED_PAYER_byIdUnerndIncmAsync(int? ID_UNERND_PAYER, int? ID_UNERND_INCM, short? ID_REF_UNERND_PAYER_TYPE, string NM_UNERND_PAYER, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_PAYER",
                    Value = ID_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UNERND_INCM",
                    Value = ID_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_PAYER_TYPE",
                    Value = ID_REF_UNERND_PAYER_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "NM_UNERND_PAYER",
                    Size = 45,
                    Value = NM_UNERND_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UNEARNED_PAYER_byIdUnerndIncm] @ID_UNERND_PAYER, @ID_UNERND_INCM, @ID_REF_UNERND_PAYER_TYPE, @NM_UNERND_PAYER", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UnearnedTypebyIDMmbrAsync(int? ID_MMBR, int? ID_REF_UNERND_SUBTYPE, OutputParameter<int?> ID_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UNERND_INCM = new SqlParameter
            {
                ParameterName = "ID_UNERND_INCM",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UNERND_INCM?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UNERND_INCM,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_UNERND_SUBTYPE",
                    Value = ID_REF_UNERND_SUBTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UnearnedTypebyIDMmbr] @ID_UNERND_INCM OUTPUT, @ID_MMBR, @ID_REF_UNERND_SUBTYPE", sqlParameters, cancellationToken);

            ID_UNERND_INCM.SetValue(parameterID_UNERND_INCM.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UPDT_UNERND_VRFCTNS_INITIALAsync(int? ID_CASE_NMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UPDT_UNERND_VRFCTNS_INITIAL] @ID_CASE_NMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UPDATE_NOTICE_TYPEAsync(int? ID_UPDT_NTC, int? ID_CASE_NMBR, int? ID_REF_NTC_TYPE, string CD_LANGUAGE_INDCTR, DateTime? DT_UPDT_NTC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UPDT_NTC",
                    Value = ID_UPDT_NTC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_NTC_TYPE",
                    Value = ID_REF_NTC_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_LANGUAGE_INDCTR",
                    Size = 1,
                    Value = CD_LANGUAGE_INDCTR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_UPDT_NTC",
                    Value = DT_UPDT_NTC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UPDATE_NOTICE_TYPE] @ID_UPDT_NTC, @ID_CASE_NMBR, @ID_REF_NTC_TYPE, @CD_LANGUAGE_INDCTR, @DT_UPDT_NTC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UTILITY_EXPENSEAsync(int? ID_MMBR1, int? ID_MMBR2, int? ID_UTLTY_DDCTN, int? ID_UTLTY_TYPE, decimal? AM_ACTL_UTLTY_AVG, decimal? AM_UTLTY_EXPNS_MNTHLY, string CD_MONTH, DateTime? DT_LIHEAP_RCVD, string FL_AC_BLLD, string FL_ASSSTD_BY_OTHR, string FL_BUA, string FL_LIHEAP, string FL_NM_OUTSIDE_HH_UE, string FL_PHONE_STNDRD, string FL_SUA_ELGBL, decimal? ID_FRQNCY_UTLTY_EXPNS, int? ID_VRFCTN_UTLTY_EXPNS, string TX_VRFCTN_UTLTY_EXPNS, OutputParameter<int?> ID_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_UTLTY_EXPNS = new SqlParameter
            {
                ParameterName = "ID_UTLTY_EXPNS",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_UTLTY_EXPNS?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_UTLTY_EXPNS,
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR2",
                    Value = ID_MMBR2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_DDCTN",
                    Value = ID_UTLTY_DDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_UTLTY_AVG",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_UTLTY_AVG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTLTY_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UTLTY_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_LIHEAP_RCVD",
                    Value = DT_LIHEAP_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AC_BLLD",
                    Size = 1,
                    Value = FL_AC_BLLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_BUA",
                    Size = 1,
                    Value = FL_BUA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LIHEAP",
                    Size = 1,
                    Value = FL_LIHEAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_NM_OUTSIDE_HH_UE",
                    Size = 1,
                    Value = FL_NM_OUTSIDE_HH_UE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_PHONE_STNDRD",
                    Size = 1,
                    Value = FL_PHONE_STNDRD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUA_ELGBL",
                    Size = 1,
                    Value = FL_SUA_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_UTLTY_EXPNS",
                    Precision = 1,
                    Value = ID_FRQNCY_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UTLTY_EXPNS",
                    Value = ID_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UTLTY_EXPNS",
                    Value = TX_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UTILITY_EXPENSE] @ID_UTLTY_EXPNS OUTPUT, @ID_MMBR1, @ID_MMBR2, @ID_UTLTY_DDCTN, @ID_UTLTY_TYPE, @AM_ACTL_UTLTY_AVG, @AM_UTLTY_EXPNS_MNTHLY, @CD_MONTH, @DT_LIHEAP_RCVD, @FL_AC_BLLD, @FL_ASSSTD_BY_OTHR, @FL_BUA, @FL_LIHEAP, @FL_NM_OUTSIDE_HH_UE, @FL_PHONE_STNDRD, @FL_SUA_ELGBL, @ID_FRQNCY_UTLTY_EXPNS, @ID_VRFCTN_UTLTY_EXPNS, @TX_VRFCTN_UTLTY_EXPNS", sqlParameters, cancellationToken);

            ID_UTLTY_EXPNS.SetValue(parameterID_UTLTY_EXPNS.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UTILITY_EXPENSE_OTHER_PAYERAsync(short? ID_UTLTY_EXPNS_OTHR_PAYER, int? ID_UTLTY_EXPNS, int? ID_MMBR, decimal? AM_UTLTY_EXPNS_OTHR_PAYER, string FL_OUTSIDE_RSDNT_UE, string FL_UTLTY_PAY_MMBR, int? ID_VRFCTN_UTLTY_EXPNS_OP, string TX_VRFCTN_UTLTY_EXPNS_OP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS_OTHR_PAYER",
                    Value = ID_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTLTY_EXPNS_OTHR_PAYER",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UTLTY_EXPNS_OTHR_PAYER ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_OUTSIDE_RSDNT_UE",
                    Size = 1,
                    Value = FL_OUTSIDE_RSDNT_UE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_UTLTY_PAY_MMBR",
                    Size = 1,
                    Value = FL_UTLTY_PAY_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UTLTY_EXPNS_OP",
                    Value = ID_VRFCTN_UTLTY_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UTLTY_EXPNS_OP",
                    Value = TX_VRFCTN_UTLTY_EXPNS_OP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UTILITY_EXPENSE_OTHER_PAYER] @ID_UTLTY_EXPNS_OTHR_PAYER, @ID_UTLTY_EXPNS, @ID_MMBR, @AM_UTLTY_EXPNS_OTHR_PAYER, @FL_OUTSIDE_RSDNT_UE, @FL_UTLTY_PAY_MMBR, @ID_VRFCTN_UTLTY_EXPNS_OP, @TX_VRFCTN_UTLTY_EXPNS_OP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UTLTY_EXP_BASICAsync(int? ID_UTLTY_EXPNS, int? ID_MMBR1, int? ID_UTLTY_DDCTN, int? ID_UTLTY_TYPE, decimal? AM_ACTL_UTLTY_AVG, decimal? AM_UTLTY_EXPNS_MNTHLY, string CD_MONTH, DateTime? DT_LIHEAP_RCVD, string FL_AC_BLLD, string FL_ASSSTD_BY_OTHR, string FL_LIHEAP, string FL_SUA_ELGBL, int? ID_FRQNCY_UTLTY_EXPNS, int? ID_VRFCTN_UTLTY_EXPNS, string TX_VRFCTN_UTLTY_EXPNS, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR1",
                    Value = ID_MMBR1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_DDCTN",
                    Value = ID_UTLTY_DDCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_TYPE",
                    Value = ID_UTLTY_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AM_ACTL_UTLTY_AVG",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_ACTL_UTLTY_AVG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "AM_UTLTY_EXPNS_MNTHLY",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_UTLTY_EXPNS_MNTHLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_LIHEAP_RCVD",
                    Value = DT_LIHEAP_RCVD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_AC_BLLD",
                    Size = 1,
                    Value = FL_AC_BLLD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ASSSTD_BY_OTHR",
                    Size = 1,
                    Value = FL_ASSSTD_BY_OTHR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_LIHEAP",
                    Size = 1,
                    Value = FL_LIHEAP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SUA_ELGBL",
                    Size = 1,
                    Value = FL_SUA_ELGBL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FRQNCY_UTLTY_EXPNS",
                    Value = ID_FRQNCY_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_UTLTY_EXPNS",
                    Value = ID_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UTLTY_EXPNS",
                    Value = TX_VRFCTN_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UTLTY_EXP_BASIC] @ID_UTLTY_EXPNS, @ID_MMBR1, @ID_UTLTY_DDCTN, @ID_UTLTY_TYPE, @AM_ACTL_UTLTY_AVG, @AM_UTLTY_EXPNS_MNTHLY, @CD_MONTH, @DT_LIHEAP_RCVD, @FL_AC_BLLD, @FL_ASSSTD_BY_OTHR, @FL_LIHEAP, @FL_SUA_ELGBL, @ID_FRQNCY_UTLTY_EXPNS, @ID_VRFCTN_UTLTY_EXPNS, @TX_VRFCTN_UTLTY_EXPNS", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_UTLTYEXP_CDMTHAsync(int? ID_UTLTY_EXPNS, string CD_MONTH, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_UTLTY_EXPNS",
                    Value = ID_UTLTY_EXPNS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CD_MONTH",
                    Size = 1,
                    Value = CD_MONTH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_UTLTYEXP_CDMTH] @ID_UTLTY_EXPNS, @CD_MONTH", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqAddressAsync(int? ID_ADDRSS, short? ID_CNTY_STATE, int? ID_MMBR, int? ID_EMPLYMNT, string AD_STREET1, string AD_CITY, string AD_STATE, string AD_ZIP, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_ADDRSS",
                    Value = ID_ADDRSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STREET1",
                    Size = 25,
                    Value = AD_STREET1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_CITY",
                    Size = 25,
                    Value = AD_CITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_STATE",
                    Size = 2,
                    Value = AD_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "AD_ZIP",
                    Size = 5,
                    Value = AD_ZIP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqAddress] @ID_ADDRSS, @ID_CNTY_STATE, @ID_MMBR, @ID_EMPLYMNT, @AD_STREET1, @AD_CITY, @AD_STATE, @AD_ZIP", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqAddressCountyAsync(short? ID_CNTY_STATE, int? ID_MMBR, int? ID_EMPLYMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CNTY_STATE",
                    Value = ID_CNTY_STATE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqAddressCounty] @ID_CNTY_STATE, @ID_MMBR, @ID_EMPLYMNT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqEmploymentAsync(int? ID_EMPLYMNT, int? ID_MMBR, DateTime? DT_EMPLYMNT_END, string FL_GOOD_RSN_QUIT, string FL_VLNTRY_QUIT, int? ID_VRFCTN_EMPLYMNT, string NM_EMPLYR, string NO_EMPLYR_PHONE, string TX_RSN_QUIT, string TX_VRFCTN_EMPLYMNT, DateTime? DT_VQ_Exemption, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_EMPLYMNT_END",
                    Value = DT_EMPLYMNT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_GOOD_RSN_QUIT",
                    Size = 1,
                    Value = FL_GOOD_RSN_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_VLNTRY_QUIT",
                    Size = 1,
                    Value = FL_VLNTRY_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NM_EMPLYR",
                    Size = 50,
                    Value = NM_EMPLYR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "NO_EMPLYR_PHONE",
                    Size = 12,
                    Value = NO_EMPLYR_PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_RSN_QUIT",
                    Size = 256,
                    Value = TX_RSN_QUIT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_EMPLYMNT",
                    Size = 256,
                    Value = TX_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DT_VQ_Exemption",
                    Value = DT_VQ_Exemption ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqEmployment] @ID_EMPLYMNT, @ID_MMBR, @DT_EMPLYMNT_END, @FL_GOOD_RSN_QUIT, @FL_VLNTRY_QUIT, @ID_VRFCTN_EMPLYMNT, @NM_EMPLYR, @NO_EMPLYR_PHONE, @TX_RSN_QUIT, @TX_VRFCTN_EMPLYMNT, @DT_VQ_Exemption", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqMemberAsync(int? ID_MMBR, short? ID_REF_CERT_ELIG, string FL_SNCTN, string FL_WRK_RGSTRTN_EXMPT, short? ID_WORK_CODE, short? ID_WORK_CODE_2, short? ID_REF_CERT_ELIG_2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG",
                    Value = ID_REF_CERT_ELIG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FL_SNCTN",
                    Size = 1,
                    Value = FL_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WRK_RGSTRTN_EXMPT",
                    Size = 1,
                    Value = FL_WRK_RGSTRTN_EXMPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE",
                    Value = ID_WORK_CODE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WORK_CODE_2",
                    Value = ID_WORK_CODE_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_CERT_ELIG_2",
                    Value = ID_REF_CERT_ELIG_2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqMember] @ID_MMBR, @ID_REF_CERT_ELIG, @FL_SNCTN, @FL_WRK_RGSTRTN_EXMPT, @ID_WORK_CODE, @ID_WORK_CODE_2, @ID_REF_CERT_ELIG_2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqMemberDateAsync(int? ID_MMBR, DateTime? DT_VQEXEMPTORCOMPLY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_VQEXEMPTORCOMPLY",
                    Value = DT_VQEXEMPTORCOMPLY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqMemberDate] @ID_MMBR, @DT_VQEXEMPTORCOMPLY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqResetAsync(int? ID_MMBR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqReset] @ID_MMBR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqSanctionAsync(decimal? ID_REF_SNCTN_RSN, int? ID_MMBR, DateTime? DT_SNCTN_END, DateTime? DT_SNCTN_STRT, decimal? NO_SNCTN, OutputParameter<int?> ID_SNCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_SNCTN = new SqlParameter
            {
                ParameterName = "ID_SNCTN",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_SNCTN?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_SNCTN,
                new SqlParameter
                {
                    ParameterName = "ID_REF_SNCTN_RSN",
                    Precision = 2,
                    Value = ID_REF_SNCTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SNCTN_END",
                    Value = DT_SNCTN_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_SNCTN_STRT",
                    Value = DT_SNCTN_STRT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NO_SNCTN",
                    Precision = 1,
                    Value = NO_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqSanction] @ID_SNCTN OUTPUT, @ID_REF_SNCTN_RSN, @ID_MMBR, @DT_SNCTN_END, @DT_SNCTN_STRT, @NO_SNCTN", sqlParameters, cancellationToken);

            ID_SNCTN.SetValue(parameterID_SNCTN.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqSanctionDateAsync(int? ID_SNCTN, DateTime? DT_COMPLYOREXEMPT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SNCTN",
                    Value = ID_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_COMPLYOREXEMPT",
                    Value = DT_COMPLYOREXEMPT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqSanctionDate] @ID_SNCTN, @DT_COMPLYOREXEMPT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VqSanctionReminderAsync(int? ID_SNCTN, int? ID_WRKR_RMNDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_SNCTN",
                    Value = ID_SNCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_RMNDR",
                    Value = ID_WRKR_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VqSanctionReminder] @ID_SNCTN, @ID_WRKR_RMNDR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_CASEAsync(int? ID_CASE_NMBR, int? ID_VRFCTN_ATHRZD_RPRSNTTV, int? ID_VRFCTN_HH, int? ID_VRFCTN_HH_CMPSTN, int? ID_VRFCTN_RSDNCY, int? ID_VRFCTN_INTRVWEE, string SQLTYPE, string TX_VRFCTN_HH, string TX_VRFCTN_HH_CMPSTN, string TX_VRFCTN_INTRVWEE, string TX_VRFCTN_RSDNCY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ATHRZD_RPRSNTTV",
                    Value = ID_VRFCTN_ATHRZD_RPRSNTTV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH",
                    Value = ID_VRFCTN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_HH_CMPSTN",
                    Value = ID_VRFCTN_HH_CMPSTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RSDNCY",
                    Value = ID_VRFCTN_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_INTRVWEE",
                    Value = ID_VRFCTN_INTRVWEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_HH",
                    Value = TX_VRFCTN_HH ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_HH_CMPSTN",
                    Value = TX_VRFCTN_HH_CMPSTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_INTRVWEE",
                    Value = TX_VRFCTN_INTRVWEE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_RSDNCY",
                    Value = TX_VRFCTN_RSDNCY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_CASE] @ID_CASE_NMBR, @ID_VRFCTN_ATHRZD_RPRSNTTV, @ID_VRFCTN_HH, @ID_VRFCTN_HH_CMPSTN, @ID_VRFCTN_RSDNCY, @ID_VRFCTN_INTRVWEE, @SQLTYPE, @TX_VRFCTN_HH, @TX_VRFCTN_HH_CMPSTN, @TX_VRFCTN_INTRVWEE, @TX_VRFCTN_RSDNCY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_DATESAsync(int? ID_CASE_NMBR, DateTime? DT_RCVD_VRFCTN, DateTime? DT_RQRD_VRCTN, string SQLTYPE, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RCVD_VRFCTN",
                    Value = DT_RCVD_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RQRD_VRCTN",
                    Value = DT_RQRD_VRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_DATES] @ID_CASE_NMBR, @DT_RCVD_VRFCTN, @DT_RQRD_VRCTN, @SQLTYPE", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_DATES_DUEAsync(int? ID_CASE_NMBR, DateTime? DT_RQRD_VRCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RQRD_VRCTN",
                    Value = DT_RQRD_VRCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_DATES_DUE] @ID_CASE_NMBR, @DT_RQRD_VRCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_DATES_RCDAsync(int? ID_CASE_NMBR, DateTime? DT_RCVD_VRFCTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RCVD_VRFCTN",
                    Value = DT_RCVD_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_DATES_RCD] @ID_CASE_NMBR, @DT_RCVD_VRFCTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_EARNAsync(int? ID_EMPLYMNT, int? ID_VRFCTN_EMPLYMNT, int? ID_STRKR, int? ID_VRFCTN_STRK, string SQLTYPE, string TX_VRFCTN_STRK, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_EMPLYMNT",
                    Value = ID_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_EMPLYMNT",
                    Value = ID_VRFCTN_EMPLYMNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_STRKR",
                    Value = ID_STRKR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_STRK",
                    Value = ID_VRFCTN_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_STRK",
                    Value = TX_VRFCTN_STRK ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_EARN] @ID_EMPLYMNT, @ID_VRFCTN_EMPLYMNT, @ID_STRKR, @ID_VRFCTN_STRK, @SQLTYPE, @TX_VRFCTN_STRK", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_HHINFOAsync(int? ID_MMBR, int? ID_VRFCTN_ALIEN_STTS, int? ID_FA_STTS, int? ID_VRFCTN_FA_STTS, string SQLTYPE, string TX_CNTCT_INFO, string TX_VRFCTN_ALIEN_STTS, int? ID_VRFCTN_STUDENT, int? ID_STDNT, string TX_VRFCTN_STUDENT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_MMBR",
                    Value = ID_MMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_ALIEN_STTS",
                    Value = ID_VRFCTN_ALIEN_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_FA_STTS",
                    Value = ID_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_FA_STTS",
                    Value = ID_VRFCTN_FA_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_CNTCT_INFO",
                    Value = TX_CNTCT_INFO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_ALIEN_STTS",
                    Value = TX_VRFCTN_ALIEN_STTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_STUDENT",
                    Value = ID_VRFCTN_STUDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_STDNT",
                    Value = ID_STDNT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_STUDENT",
                    Value = TX_VRFCTN_STUDENT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_HHINFO] @ID_MMBR, @ID_VRFCTN_ALIEN_STTS, @ID_FA_STTS, @ID_VRFCTN_FA_STTS, @SQLTYPE, @TX_CNTCT_INFO, @TX_VRFCTN_ALIEN_STTS, @ID_VRFCTN_STUDENT, @ID_STDNT, @TX_VRFCTN_STUDENT", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_RSRCAsync(int? ID_RSRC, int? ID_VRFCTN_RSRC, string TX_VRFCTN_RSRC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSRC",
                    Value = ID_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN_RSRC",
                    Value = ID_VRFCTN_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_RSRC",
                    Value = TX_VRFCTN_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_RSRC] @ID_RSRC, @ID_VRFCTN_RSRC, @TX_VRFCTN_RSRC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_VRFCTNS_UNEARNAsync(int? ID_TABLE, int? ID_VRFCTN, string SQLTYPE, string TX_VRFCTN_UNERND_INCM, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_TABLE",
                    Value = ID_TABLE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_VRFCTN",
                    Value = ID_VRFCTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SQLTYPE",
                    Size = 1,
                    Value = SQLTYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_VRFCTN_UNERND_INCM",
                    Value = TX_VRFCTN_UNERND_INCM ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_VRFCTNS_UNEARN] @ID_TABLE, @ID_VRFCTN, @SQLTYPE, @TX_VRFCTN_UNERND_INCM", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_WAIVE_ADVERSE_ACTIONAsync(int? ID_CASE_NMBR, int? ID_REF_WAIVE_ADVRS_ACTN, DateTime? DT_ADVRS_ACTN, string FL_WAIVE_ADVRS_ACTN_10DAY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_REF_WAIVE_ADVRS_ACTN",
                    Value = ID_REF_WAIVE_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DT_ADVRS_ACTN",
                    Value = DT_ADVRS_ACTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FL_WAIVE_ADVRS_ACTN_10DAY",
                    Size = 1,
                    Value = FL_WAIVE_ADVRS_ACTN_10DAY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_WAIVE_ADVERSE_ACTION] @ID_CASE_NMBR, @ID_REF_WAIVE_ADVRS_ACTN, @DT_ADVRS_ACTN, @FL_WAIVE_ADVRS_ACTN_10DAY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_WELCOME_MESSAGEAsync(short? ID_WLCM_MSSG, string ID_MSSG_CNTY, string TX_WLCM_MSSG_DSCR, DateTime? DT_START, DateTime? DT_END, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_WLCM_MSSG",
                    Value = ID_WLCM_MSSG ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_MSSG_CNTY",
                    Size = 2,
                    Value = ID_MSSG_CNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "TX_WLCM_MSSG_DSCR",
                    Value = TX_WLCM_MSSG_DSCR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Text,
                },
                new SqlParameter
                {
                    ParameterName = "DT_START",
                    Value = DT_START ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DT_END",
                    Value = DT_END ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_WELCOME_MESSAGE] @ID_WLCM_MSSG, @ID_MSSG_CNTY, @TX_WLCM_MSSG_DSCR, @DT_START, @DT_END", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Updt_WORKER_REMINDERAsync(string FL_INACTIVE, int? ID_WRKR_RMNDR, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FL_INACTIVE",
                    Size = 1,
                    Value = FL_INACTIVE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ID_WRKR_RMNDR",
                    Value = ID_WRKR_RMNDR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Updt_WORKER_REMINDER] @FL_INACTIVE, @ID_WRKR_RMNDR", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdtArrearsFlag_CS_AMOUNTAsync(decimal? AM_NON_RCRRNG_RSRC, string FL_ARRRS, OutputParameter<int?> ID_CS_AMNT, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterID_CS_AMNT = new SqlParameter
            {
                ParameterName = "ID_CS_AMNT",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ID_CS_AMNT?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterID_CS_AMNT,
                new SqlParameter
                {
                    ParameterName = "AM_NON_RCRRNG_RSRC",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_NON_RCRRNG_RSRC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "FL_ARRRS",
                    Size = 1,
                    Value = FL_ARRRS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdtArrearsFlag_CS_AMOUNT] @ID_CS_AMNT OUTPUT, @AM_NON_RCRRNG_RSRC, @FL_ARRRS", sqlParameters, cancellationToken);

            ID_CS_AMNT.SetValue(parameterID_CS_AMNT.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdtByIdCaseNmbr_RESTORATIONAsync(short? ID_RSTRTN, int? ID_CASE_NMBR, decimal? ID_RSTRTN_RSN, decimal? AM_RSTRTN, DateTime? DT_RSTRTN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN",
                    Value = ID_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ID_CASE_NMBR",
                    Value = ID_CASE_NMBR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ID_RSTRTN_RSN",
                    Precision = 2,
                    Value = ID_RSTRTN_RSN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "AM_RSTRTN",
                    Precision = 19,
                    Scale = 4,
                    Value = AM_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "DT_RSTRTN",
                    Value = DT_RSTRTN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdtByIdCaseNmbr_RESTORATION] @ID_RSTRTN, @ID_CASE_NMBR, @ID_RSTRTN_RSN, @AM_RSTRTN, @DT_RSTRTN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_SE_CASE_INFObyUserIdResult>> usp_SE_CASE_INFObyUserIdAsync(string USERADID, int? REVIEWCOUNTY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "USERADID",
                    Size = 10,
                    Value = USERADID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "REVIEWCOUNTY",
                    Value = REVIEWCOUNTY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_SE_CASE_INFObyUserIdResult>("EXEC @returnValue = [dbo].[usp_SE_CASE_INFObyUserId] @USERADID, @REVIEWCOUNTY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
